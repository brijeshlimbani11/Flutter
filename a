using System;
using System.Web.UI;
using System.IO;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Text;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Winnovative;
using Newtonsoft.Json;
using System.Data;
using CrystalDecisions.Shared;
using BarCodeImageGenerator.BarCode;
using Ionic.Zip;
using CrystalDecisions.CrystalReports.Engine;
using System.Configuration;
using System.Web;

partial class frmCRFPrint_New : System.Web.UI.Page
{
	private bool InstanceFieldsInitialized = false;

	public frmCRFPrint_New()
	{
		if (!InstanceFieldsInitialized)
		{
			InitializeInstanceFields();
			InstanceFieldsInitialized = true;
		}
	}

	private void InitializeInstanceFields()
	{
		objHelp = objCommon.GetHelpDbTableRef();
		objLambda = objCommon.GetHelpDbLambdaRef();
	}

#region Variable Declaration

	private clsCommon objCommon = new clsCommon();
	// Private objHelp As New WS_HelpDbTable.WS_HelpDbTable
	private WS_HelpDbTable.WS_HelpDbTable objHelp;
	private WS_Lambda.WS_Lambda objLambda;


	private string eStr_Retu = string.Empty;
	private const string VS_dtMedEx_Fill = "dt_MedEx_Fill";
	private const string VS_BlankCRF = "BlankCRF";
	private const string VS_AuthenticatedBy = "AuthenticatedBy";
	private const string VS_AuthenticatedOn = "AuthenticatedOn";
	private static int MainIdentifier = 0;
	private const string vs_reporttype = "Report_Type";
	private const string VS_Report = "Dt_Report";
	private const string VS_Activity = "Dt_Activity";
	private const string vs_dsMsr = "ds_MSR";

	private const int GVR_Edit = 0;
	private const int GVR_SRNo = 1;
	private const int GVR_ReportId = 2;
	private const int GVR_NodeID = 3;
	private const int GVR_DisplayName = 4;
	private const int GVR_Rearrange = 5;
	private const int GVR_ReportType = 6;

	private const int GVA_Edit = 0;
	private const int GVA_SRNo = 1;
	private const int GVA_NodeID = 2;
	private const int GVA_DisplayName = 3;
	private const int GVA_Rearrange = 4;

	public const string IsProjectLock = "IsProjectLock";
	public const string IsProjectCT = "IsProjectCT";
	public const string vs_Workspaceprotocoldetail = "Workspaceprotocoldetail";
	public const string vs_View_getWorkspaceDetailForHdr = "View_getWorkspaceDetailForHdr";
	public const string vs_View_WorkspaceSubjectMst = "View_WorkspaceSubjectMst";
	public const string vs_sponsorlogofilepath = "vs_sponsorlogofilepath";
	private string vs_strReporttype = "ReportType";
	private string strFormName = "frmCRFPrint_New";

	//Added by Kruti Salot
	private const int ECRF_CRF_Report = 2;
	private const int ECRF_CRF_Status_History = 3;
	private const int ECRF_Data_Change_History = 4;
	private const int ECRF_DCF_Status_Report = 5;
	private const int ECRF_ODM_status_Report = 6;
	private const int ECRF_CRF_Version_History = 7;
	//End Kruti

	//Added by Kruti Salot
	private const string VAR_MSR_Report = "MSR Report";
	private const string VAR_Screening_Lab_Report = "Screening Lab Report";
	private const string VAR_ECRF_CRF_Report = "CRF Report";
	private const string VAR_ECRF_CRF_Status_History = "eCRF Status History Report";
	private const string VAR_ECRF_Data_Change_History = "eCRF Data Change Status Report";
	private const string VAR_ECRF_DCF_Status_Report = "DCF Report";
	private const string VAR_ECRF_ODM_status_Report = "SEC Report";
	private const string VAR_ECRF_CRF_Version_History = "eCRF Version History Report";
	private const string VAR_ECG = "ECG";
	private const string VAR_XRAY = "XRAY";
	//End Kruti

	//ECG XRAY
	private string VS_ECGXRAY = "ECGXRAY";
	private int ECGNO = 0;
	private int XRAYNO = 1;
	private ReportDocument rDocument;

	//For Crystal Report
	private ConnectionInfo ConnInfo;
	private string[] arrConString = null;
	private string strServername = "";
	private string strDatabasename = "";
	private string strUsername = "";
	private string strPassword = "";
	private string strConString = "";
	private string strErrMsg = "";

	private ParameterFieldDefinition paramField;
	private ParameterValues currentValues;
	private ParameterDiscreteValue currval = new ParameterDiscreteValue();
	private Tables RepTbls;

#endregion

#region Page Load + Unload

	protected void Page_Load(object sender, System.EventArgs e)
	{
		if (!IsPostBack)
		{

			string contextKey = string.Empty;

			contextKey = "iUserId = " + this.Request.QueryString["UserId"].ToString();
			string Wstr_ScopeValue = string.Empty;
			//To Get Where condition of ScopeVales( Project Type )
			if (Convert.ToString(HttpContext.Current.Session[GeneralModule.S_ScopeValue]).Length > 0)
			{
				Wstr_ScopeValue = Convert.ToString(HttpContext.Current.Session[GeneralModule.S_ScopeValue]);
				Wstr_ScopeValue = " vProjectTypeCode in (" + Wstr_ScopeValue + ")";
			}

			if (contextKey != null && !string.IsNullOrEmpty(contextKey.ToString().Trim()))
			{
				contextKey += " And " + Wstr_ScopeValue;
			}
			else
			{
				contextKey = Wstr_ScopeValue;
			}

			this.AutoCompleteExtender1.ContextKey = contextKey;
			this.ddlActivityType.Enabled = false;
			this.BtnGeneratePdf.Style.Add("display", "none");

			if ((Session[GeneralModule.S_ProjectId] != null) && (Session[GeneralModule.S_ProjectName] != null))
			{
				this.txtproject.Text = Convert.ToString(Session[GeneralModule.S_ProjectName]);
				this.HProjectId.Value = Convert.ToString(Session[GeneralModule.S_ProjectId]);
				btnSetProject_Click(sender, e);
			}
			((Label)this.Master.FindControl("lblHeading")).Text = "Dossier Compilation";
			Page.Title = " ::  Dossier Compilation ::  " + System.Configuration.ConfigurationManager.AppSettings["Client"];
		}

	}

	protected void Page_Unload(object sender, System.EventArgs e)
	{

		if (this.rDocument != null)
		{
			this.rDocument.Close();
			this.rDocument.Dispose();
		}
		System.GC.Collect();

	}

#endregion

#region GenCall

	private bool GenCall()
	{

		if (!GenCall_Data())
		{
			return false;
		}

		if (this.RBLselect.SelectedValue.Trim() == "1")
		{
			if (!GenCall_ShowUI())
			{
				return false;
			}
		}
		else
		{
			if (string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()))
			{
				if (!GenCall_ShowUI())
				{
					return false;
				}
			}
			else if (this.ddlActivityType.SelectedIndex == 1)
			{
				if (!GenCall_ShowUI())
				{
					return false;
				}
			}

		}

		return true;

	}

#endregion

#region GenCall_Data 

	private bool GenCall_Data()
	{
		DataSet ds = new DataSet();
		string estr_retu = string.Empty;
		string strQuery = string.Empty;
		string Wstr = string.Empty;
		string Wstr_nodeid = string.Empty;
		string Wstr_inodeid = string.Empty;
		DataSet ds_CRFHdrDtlSubDtl = new DataSet();
		string AuthenticatedOn = null;
		DataSet ds_msr = new DataSet();
		try
		{

			this.Session[VS_AuthenticatedOn] = "";
			this.Session[VS_AuthenticatedBy] = "";

			if (!string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()))
			{

				if (this.ddlActivityType.SelectedIndex == 1)
				{
					Wstr = "cActiveFlag <> 'N' and vWorkSpaceId='" + this.HProjectId.Value.Trim() + "'";
					Wstr += " And iNodeId in(";

					foreach (GridViewRow row in gvwActivity.Rows)
					{
						if (row.RowType == DataControlRowType.DataRow)
						{
							if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
							{
								Wstr_nodeid += row.Cells[GVA_NodeID].Text.ToString() + ",";
							}
						}
					}

					if (Wstr_nodeid.Contains(","))
					{
						Wstr_nodeid = Wstr_nodeid.Substring(0, Wstr_nodeid.LastIndexOf(","));
					}
					Wstr += Wstr_nodeid;
					Wstr += ") And vSubjectId in (" + this.hdnSubSelection.Value.Trim() + ")";
					Wstr += " Order by iPeriod,iNodeNo,iNodeId,vMedExGroupCode,vMedExSubGroupCode,iSeqNo,View_CRFHdrDtlSubDtl_Print.iRepeatNo";
					Wstr += " OPTION (MAXDOP 1)";

					objHelp.Timeout = -1;
					if (!this.objHelp.View_CRFHdrDtlSubDtl_Print(Wstr, "*,DENSE_RANK() OVER(PARTITION BY nCRFHdrNo,vActivityId,vSubjectId ORDER BY nCRFHdrNo,vActivityId,vSubjectId,iRepeatNo) as [RepetitionNo] ", ref ds_CRFHdrDtlSubDtl, ref estr_retu))
					{
						throw new Exception(estr_retu);
					}

					if (ds_CRFHdrDtlSubDtl.Tables[0].Rows.Count > 0)
					{
						this.lblSubjectName.Text = ds_CRFHdrDtlSubDtl.Tables[0].Rows[0]["vSubjectName"].ToString();
						this.Session[VS_dtMedEx_Fill] = ds_CRFHdrDtlSubDtl.Tables[0];
						this.Session[VS_BlankCRF] = "NO";
						if (!string.IsNullOrEmpty(Convert.ToString(ds_CRFHdrDtlSubDtl.Tables[0].Select("", "AuthenticatedOn DESC")[0]["AuthenticatedOn"])))
						{
							AuthenticatedOn = Convert.ToString(ds_CRFHdrDtlSubDtl.Tables[0].Select("", "AuthenticatedOn DESC")[0]["AuthenticatedOn"]);
							this.Session[VS_AuthenticatedOn] = DateTime.Parse(AuthenticatedOn).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset; //for format like "16 July, 2011 09:03:00 PM"
							this.Session[VS_AuthenticatedBy] = ds_CRFHdrDtlSubDtl.Tables[0].Select("", "AuthenticatedOn DESC")[0]["AuthenticatedBy"].ToString();
						}

					}
					else
					{
						this.HFHeaderLabel.Value = null;
						this.HFHeaderLabel.Value = "";
						this.BtnGeneratePdf.Style.Add("display", "none");

						PlaceMedEx.Controls.Clear();
						this.Session[VS_dtMedEx_Fill] = ds_CRFHdrDtlSubDtl.Tables[0];
						objCommon.ShowAlert("Selected Subject and Activities Have No Data.", this.Page);

					}
				}

				if (this.ViewState[vs_strReporttype] != null)
				{
					if (this.ViewState[vs_strReporttype].ToString().IndexOf("CRF") > -1)
					{

						Wstr = "cActiveFlag <> 'N' and vWorkSpaceId='" + this.HProjectId.Value.Trim() + "'";
						Wstr += " And iNodeId in(";

						foreach (GridViewRow row in gvwActivity.Rows)
						{
							if (row.RowType == DataControlRowType.DataRow)
							{
								if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
								{
									Wstr_nodeid += row.Cells[GVA_NodeID].Text.ToString() + ",";
								}
							}
						}

						if (Wstr_nodeid.Contains(","))
						{
							Wstr_nodeid = Wstr_nodeid.Substring(0, Wstr_nodeid.LastIndexOf(","));
						}
						Wstr += Wstr_nodeid;
						Wstr += ") And vSubjectId in (" + this.hdnSubSelection.Value.Trim() + ")";
						Wstr += " Order by iPeriod,iNodeNo,iNodeId,vMedExGroupCode,vMedExSubGroupCode,iSeqNo,View_CRFHdrDtlSubDtl_Print.iRepeatNo";
						Wstr += " OPTION (MAXDOP 1)";

						objHelp.Timeout = -1;
						if (!this.objHelp.View_CRFHdrDtlSubDtl_Print(Wstr, "*,DENSE_RANK() OVER(PARTITION BY nCRFHdrNo,vActivityId,vSubjectId ORDER BY nCRFHdrNo,vActivityId,vSubjectId,iRepeatNo) as [RepetitionNo] ", ref ds_CRFHdrDtlSubDtl, ref estr_retu))
						{
							throw new Exception(estr_retu);
						}

						if (ds_CRFHdrDtlSubDtl.Tables[0].Rows.Count > 1)
						{
							this.lblSubjectName.Text = ds_CRFHdrDtlSubDtl.Tables[0].Rows[1]["vSubjectName"].ToString();
							this.Session[VS_BlankCRF] = "NO";
							if (!string.IsNullOrEmpty(Convert.ToString(ds_CRFHdrDtlSubDtl.Tables[0].Select("", "AuthenticatedOn DESC")[0]["AuthenticatedOn"])))
							{
								AuthenticatedOn = Convert.ToString(ds_CRFHdrDtlSubDtl.Tables[0].Select("", "AuthenticatedOn DESC")[0]["AuthenticatedOn"]);
								this.Session[VS_AuthenticatedOn] = DateTime.Parse(AuthenticatedOn).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset; //for format like "16 July, 2011 09:03:00 PM"
								this.Session[VS_AuthenticatedBy] = ds_CRFHdrDtlSubDtl.Tables[0].Select("", "AuthenticatedOn DESC")[0]["AuthenticatedBy"].ToString();
							}

						}
						else
						{
							this.HFHeaderLabel.Value = null;
							this.HFHeaderLabel.Value = "";
							this.BtnGeneratePdf.Style.Add("display", "none");
							PlaceMedEx.Controls.Clear();
							objCommon.ShowAlert("Selected Subject and Activities Have No CRF Data.", this.Page);
						}

						this.Session[VS_dtMedEx_Fill] = ds_CRFHdrDtlSubDtl.Tables[0];
					}
					if (this.ViewState[vs_strReporttype].ToString().IndexOf("MSR") > -1)
					{
						Wstr = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId in (" + this.hdnSubSelection.Value.Trim() + ")";
						if (!objHelp.getViewMaxMedExScreeningHdrDtl_Rpt(Wstr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_msr, ref estr_retu))
						{

							throw new Exception("Error While getting data from getViewMaxMedExScreeningHdrDtl_Rpt" + estr_retu);
						}

						if (ds_msr.Tables[0].Rows.Count == 0)
						{
							objCommon.ShowAlert("Selected Subject Have No MSR Data.", this.Page);
						}
						this.Session[vs_dsMsr] = ds_msr.Tables[0];
					}
				}

			}
			else
			{
				Wstr = "vWorkSpaceId = '" + this.HProjectId.Value.Trim() + "' And vMedExType <> 'Import' ";
				Wstr += "And iNodeId in(";

				foreach (GridViewRow row in gvwActivity.Rows)
				{
					if (row.RowType == DataControlRowType.DataRow)
					{
						if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
						{
							Wstr_inodeid += row.Cells[GVA_NodeID].Text.ToString() + ",";
						}
					}
				}

				if (Wstr_inodeid.Contains(","))
				{
					Wstr_inodeid = Wstr_inodeid.Substring(0, Wstr_inodeid.LastIndexOf(","));
				}
				Wstr += Wstr_inodeid;
				Wstr += ") order by iPeriod,iNodeNo,iNodeId,vMedExGroupCode,vMedExSubGroupCode,iSeqNo,RepetitionNo"; //For Lambda

				if (!this.objHelp.View_BlankCRF(Wstr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds, ref estr_retu))
				{
					throw new Exception(estr_retu);
				}

				this.Session[VS_dtMedEx_Fill] = ds.Tables[0];
				this.Session[VS_BlankCRF] = "YES";
			}
			return true;

		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message.ToString(), estr_retu, ex);
		}
		finally
		{
			ds.Dispose();
			ds_CRFHdrDtlSubDtl.Dispose();
		}
//INSTANT C# NOTE: Inserted the following 'return' since all code paths must return a value in C#:
		return false;
	}

#endregion

#region GenCall_ShowUI 

	private bool GenCall_ShowUI()
	{
		DataTable dt = new DataTable();
		DataView dv = new DataView();
		DataTable dt_MedExMst = new DataTable();
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim dr As DataRow
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim drGroup As DataRow
		object objelement = null;
		DataTable dt_MedexGroup = new DataTable();
		int CntSubGroup = 0;
		string PrevSubGroupCodes = "";
		int Nodeid = 0;
		int PreviousNodeID = 1;
		string NodeDisplayName = string.Empty;
		DataView dv_MedexGrp = new DataView();
		DataTable dtNodeID = new DataTable();
		int Index = 0;
		int SubjectIndex = 0;
		DataTable dt_Subject = new DataTable();
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim dr_Subject As DataRow
		string SubjectId = "";
		string Prev_SubjectId = "";
		string SubjectName = "";
		int MedIndex = 0;
		int Identifier = 0;
		int ParentNodeId = 0;
		int PreviousParentNodeId = 0;
		DataTable dtPeriod = new DataTable();
		DataTable dtParentActivity = new DataTable();
		int Period = 0;
		int PreviousPeriod = 0;
		DataTable dtMain = new DataTable();
		DataView dvMain = new DataView();
		DataView dvSort = new DataView();
		string NodeIds = "";
		DataTable dtData = new DataTable();
		DataTable dtsubjectcrf = new DataTable();
		string iPeriod = string.Empty;
		try
		{
			Page.Title = " ::  CRF Print ::  " + System.Configuration.ConfigurationManager.AppSettings["Client"];
			PlaceMedEx.Controls.Clear();
			if (this.Session[VS_dtMedEx_Fill] != null)
			{
				if (((DataTable)this.Session[VS_dtMedEx_Fill]).Rows.Count < 1)
				{
					if (!IsPostBack)
					{
						this.objCommon.ShowAlert("No Attribute is Attached with This Activity. So, please Attach Attribute to this Activity.", this.Page);
						return false;
					}

				}
			}
			if (Convert.ToInt32(this.Session[GeneralModule.S_ScopeNo]) == GeneralModule.Scope_ClinicalTrial)
			{
				this.SpnSubject.InnerHtml = "Subject No:";
				this.SpnSubjectInit.InnerHtml = "Subject Initials:";
			}
			PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" style=\"font-family: 'Times New Roman' !important; \">"));

			if (this.ddlActivityType.SelectedIndex == 1)
			{
				if (((DataTable)this.Session[VS_dtMedEx_Fill]).Rows.Count < 1)
				{
					return true;
				}
				dt_Subject = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy().DefaultView.ToTable(true, "vSubjectId,vSubjectName".Split(','));
				SubjectIndex += 1;
				SubjectId = Convert.ToString(dt_Subject.Rows[0]["vSubjectId"]).Trim();
				SubjectName = Convert.ToString(dt_Subject.Rows[0]["vSubjectName"]).Trim();
				int ParentNodeIdNewPage = 0;
				int RowCount = 0;

				foreach (System.Web.UI.WebControls.GridViewRow row in gvwActivity.Rows)
				{
					if (row.RowType == DataControlRowType.DataRow)
					{
						if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
						{
							dvMain = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy().DefaultView;
							Nodeid = Convert.ToInt32(row.Cells[GVA_NodeID].Text.ToString());
							dvMain.RowFilter = " iNodeId = " + Nodeid.ToString();
							if (dvMain.ToTable().Rows.Count > 0)
							{
								dvSort = dvMain.ToTable().Copy().DefaultView.ToTable(true, "iParentNodeId,ParentActivityName,ParentNodeNo".Split(',')).DefaultView;
								dvSort.RowFilter = "isnull(iParentNodeId,0) <> 1";
								dvSort.Sort = "ParentNodeNo asc";
								dtParentActivity = dvSort.ToTable();

								if (dvSort.ToTable().Rows.Count == 0)
								{
									continue;
								}

								foreach (DataRow drParentActivity in dtParentActivity.Rows)
								{
									ParentNodeIdNewPage = Convert.ToInt32(drParentActivity["iParentNodeID"]);
									if (chkSubactivityWise.Checked == true)
									{
										if (RowCount == 0 && ParentNodeIdNewPage != PreviousParentNodeId)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]) + "\">")); //008ecd''redish orange for parent activity
										}
										else if (RowCount != 0 && ParentNodeIdNewPage == PreviousParentNodeId)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\">")); //008ecd''redish orange for parent activity
										}
										else
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]) + "\">")); //008ecd''redish orange for parent activity
										}
									}
									else
									{
										if (RowCount == 0 && ParentNodeIdNewPage != PreviousParentNodeId)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]) + "\">")); //008ecd''redish orange for parent activity
										}
										else if (RowCount != 0 && ParentNodeIdNewPage == PreviousParentNodeId)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\">")); //008ecd''redish orange for parent activity
										}
										else
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]) + "\">")); //008ecd''redish orange for parent activity
										}
									}
									PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\">")); //white-space: nowrap;
									PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
									PlaceMedEx.Controls.Add(new LiteralControl(Convert.ToString(drParentActivity["ParentActivityName"]).Trim()));
									PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
									PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
									PreviousParentNodeId = Convert.ToInt32(drParentActivity["iParentNodeID"]);
								}

								Period = Convert.ToInt32(dvMain.ToTable().Rows[0]["iPeriod"]);
								NodeDisplayName = dvMain.ToTable().Rows[0]["vNodeDisplayName"].ToString();
								dtMain = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy();
								dv_MedexGrp = dtMain.Copy().DefaultView;
								dv_MedexGrp.RowFilter = "iNodeID = " + Nodeid.ToString();

								DataTable dt_Repeatition = dv_MedexGrp.ToTable(true, "RepetitionNo".Split(','));
								int PreviousRepeatition = 0;

								foreach (DataRow drRepeatition in dt_Repeatition.Rows)
								{
									dv_MedexGrp.RowFilter = "RepetitionNo = " + Convert.ToString(drRepeatition["RepetitionNo"]).ToString();
									dt_MedexGroup = dv_MedexGrp.ToTable(true, "vMedExGroupCode".Split(','));
									PlaceMedEx.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT style=\"font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\" >"));
									PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\">")); //white-space: nowrap;
									if (PreviousRepeatition != Convert.ToInt32(drRepeatition["RepetitionNo"]))
									{
										if ((PreviousNodeID != Nodeid) || (PreviousNodeID == Nodeid && PreviousRepeatition != Convert.ToInt32(drRepeatition["RepetitionNo"])))
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman'!important; font-size:12px; font-weight:bold; border-collapse: collapse !Important;\">")); //'blue line of activity
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" color:#FFFFFF; ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold; page-break-inside:avoid;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"2\" data-bookmark-text=\"" + ((Convert.ToInt32(drRepeatition["RepetitionNo"]) > 1) ? NodeDisplayName + " , Repetition-" + Convert.ToString(drRepeatition["RepetitionNo"]) : NodeDisplayName) + "\">")); //008ecd
											if (ParentNodeId == 1)
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;color:#FFFFFF; font-family:'Times New Roman'!important; font-size:12px; font-weight:normal !important; width: 80%\">")); //white-space: nowrap;
											}
											else
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;color:#FFFFFF; font-family:'Times New Roman'!important; font-size:12px; font-weight:normal !important; width: 80%\">")); //white-space: nowrap;
											}
											dvMain.RowFilter = "iNodeId = " + Nodeid.ToString();
											dtData = dvMain.ToTable();
											PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
											if (Convert.ToInt32(drRepeatition["RepetitionNo"]) > 1)
											{
												PlaceMedEx.Controls.Add(new LiteralControl(NodeDisplayName + ", Repetition: " + Convert.ToString(drRepeatition["RepetitionNo"])));
											}
											else
											{
												PlaceMedEx.Controls.Add(new LiteralControl(NodeDisplayName));
											}
											if (RBLProjecttype.SelectedIndex == 1)
											{
												if (dtData.Rows.Count > 0)
												{
													if (!string.IsNullOrEmpty(dtData.Rows[0]["vMedExGroupCDISCValue"].ToString()))
													{
														PlaceMedEx.Controls.Add(GetMedExGroupCDISC(((dtData.Rows[0]["vMedExGroupCDISCValue"] == System.DBNull.Value) ? " " : Convert.ToString(dtData.Rows[0]["vMedExGroupCDISCValue"])), Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]), Convert.ToString(dtData.Rows[0]["vMedExSubGroupCode"]), Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]) + Convert.ToString(dtData.Rows[0]["vMedExSubGroupCode"]) + Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
													}
												}
											}
											PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											if (!(Convert.ToInt32(this.Session[GeneralModule.S_ScopeNo]) == GeneralModule.Scope_ClinicalTrial))
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td align=\"right\"  style=\"color:#FFFFFF; font-family:'Times New Roman'!important; font-size:12px; font-weight:normal !important; width: 20%\">")); //'style=""vertical-align:right;""
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;Period: "));
												PlaceMedEx.Controls.Add(new LiteralControl(Period.ToString()));
												PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											}
											PlaceMedEx.Controls.Add(new LiteralControl("</Tr>")); //'activty row done
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" height=\"1px\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFFFFF; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold; page-break-inside:avoid;\">"));
											PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;font-family:'Times New Roman'!important; font-size:12px; font-weight:bold;\" >")); //white-space: nowrap;
											PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
											PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
										}
									}
									PreviousRepeatition = Convert.ToInt32(drRepeatition["RepetitionNo"]);
									PreviousNodeID = Nodeid;
									Index = 0;
									PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"border: solid 1px gray; font-family:'Times New Roman'!important; font-size:12px; font-weight:bold; border-collapse: collapse\">")); //Added on 30-01-2010 to fix the size of display
									foreach (DataRow drGroup in dt_MedexGroup.Rows)
									{
										Index += 1;
										dt = new DataTable();
										dt_MedExMst = new DataTable();
										dt = dtMain.Copy();
										dv = new DataView();
										dv = dt.DefaultView;
										dv.RowFilter = "iNodeID = " + Nodeid.ToString() + " And vMedExGroupCode='" + drGroup["vMedExGroupCode"].ToString().Trim() + "'" + " And vSubjectId = '" + SubjectId + "' And RepetitionNo = " + Convert.ToString(drRepeatition["RepetitionNo"]);
										dv.Sort = "iSeqNo,nmedexworkspacedtlno asc";
										dt_MedExMst = dv.ToTable();
										MedIndex = 0;
										foreach (DataRow dr in dt_MedExMst.Rows)
										{
											MedIndex += 1;
											if (string.IsNullOrEmpty(PrevSubGroupCodes) || PrevSubGroupCodes != Convert.ToString(dr["vMedExSubGroupCode"]))
											{
												if (Convert.ToString(dr["vMedExSubGroupCode"]).Trim() != "0000") //Added for default SubGroup
												{
													PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #ffcc66; page-break-inside:avoid; font-family:'Times New Roman'!important; font-size:12px; \">")); //ffcc66
													PlaceMedEx.Controls.Add(new LiteralControl("<Td colspan=\"2\" style=\"vertical-align:middle; font-family:'Times New Roman'!important; font-size:12px; border: solid 1px gray !important; font-weight:normal !important;\">"));
													PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
													PlaceMedEx.Controls.Add(Getlable(dr["vMedExSubGroupDesc"].ToString().Trim(), Convert.ToString(dr["vMedExSubGroupCode"] + CntSubGroup.ToString().Trim() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString())));
													CntSubGroup += 1;
													PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
													PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
												}
											}
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT  style=\"page-break-inside:avoid; font-family:'Times New Roman'!important; font-size:12px; font-weight:normal !important;\">"));
											PrevSubGroupCodes = Convert.ToString(dr["vMedExSubGroupCode"]);
											if (Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "LABEL")
											{
												Identifier += 1;
												PlaceMedEx.Controls.Add(new LiteralControl("<Td width=\"60%\" style=\"vertical-align:middle; font-family:'Times New Roman'!important; font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
												PlaceMedEx.Controls.Add(GetlableWithHistory(Convert.ToString(dr["vMedExDesc"].ToString() + ": "), Convert.ToString(dr["vMedExGroupCode"]), Convert.ToString(dr["vMedExSubGroupCode"]), Convert.ToString(dr["vMedExGroupCode"]) + Convert.ToString(dr["vMedExSubGroupCode"]) + Convert.ToString(dr["vMedExCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
												if (RBLProjecttype.SelectedIndex == 1)
												{
													PlaceMedEx.Controls.Add(GetCDISC(((dr["vCDISCValues"] == System.DBNull.Value) ? " " : Convert.ToString(dr["vCDISCValues"])), Convert.ToString(dr["vMedExGroupCode"]), Convert.ToString(dr["vMedExSubGroupCode"]), Convert.ToString(dr["vMedExGroupCode"]) + Convert.ToString(dr["vMedExSubGroupCode"]) + Convert.ToString(dr["vMedExCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
												}

												if (chkDataType.Checked == true)
												{
													string[] str = null;
													if (!(dr["vValidationType"] == System.DBNull.Value) && !string.IsNullOrEmpty(Convert.ToString(dr["vValidationType"]).Trim()))
													{
														if (Convert.ToString(dr["vMedExType"]).ToUpper() == "TEXTBOX" || Convert.ToString(dr["vMedExType"]).ToUpper() == "TEXTAREA")
														{
															PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;&nbsp;"));
															str = Convert.ToString(dr["vValidationType"]).Split(',');
															if ((str.Length == 2 && !string.IsNullOrEmpty(str[1])))
															{
																if (Convert.ToString(str[0]).Contains("IN"))
																{
																	PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("IN", "I") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																}
																else if (Convert.ToString(str[0]).Contains("AL"))
																{
																	PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("AL", "A") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																}
																else
																{
																	PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("AL", "A") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																}

															}
															else if ((str[0] == "NU" && str.Length == 3))
															{
																PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("NU", "N") + " (" + str[1] + "," + str[2] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
															}
															else
															{
																//PlaceMedEx.Controls.Add(GetlableForDatatype("[" + Convert.ToString(str(0)).Replace("IN", "I") + "]", "ValidationType" + dr("vMedExCode") + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()))
															}

														}
													}
												}

												PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
												PlaceMedEx.Controls.Add(new LiteralControl("<Td width=\"40%\" style=\"vertical-align:middle; border: solid 1px gray !important; font-family:'Times New Roman'!important; font-size:12px; \" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
											}
											else
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td colspan=\"2\" style=\" vertical-align:middle; font-family:'Times New Roman'!important; font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>"));
											}
											if (Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "LABEL" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "FILE" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "RADIO" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "CHECKBOX")
											{
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;"));
											}
											MainIdentifier += 1;
											objelement = GetObject(Convert.ToString(dr["vMedExType"]), Convert.ToString(dr["vMedExCode"] + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()), Convert.ToString(dr["vMedExValues"]), ((dr["vDefaultValue"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vDefaultValue"])), ((dr["vRefTable"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vRefTable"])), ((dr["vRefColumn"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vRefColumn"])));
											PlaceMedEx.Controls.Add((System.Web.UI.Control)objelement);
											if (!(dr["vUOM"] == System.DBNull.Value) && !string.IsNullOrEmpty(Convert.ToString(dr["vUOM"]).Trim()))
											{
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;&nbsp;"));
												PlaceMedEx.Controls.Add(GetlableUOM(Convert.ToString(dr["vUOM"]), "UOM" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
											}
											PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
										}
									}
									PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
									PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
									PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
								}
								RowCount = RowCount + 1;
							}
						}
					}
				}

				PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
				if (this.RBLselect.SelectedValue == "0")
				{
					HFHeaderLabel.Value = RenderControl(PlaceMedEx);
				}
				return true;
			}

			//===========================================
			if (this.ViewState[vs_strReporttype] != null)
			{
				if (!string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()))
				{

					if (this.Session[VS_dtMedEx_Fill] != null && ((DataTable)this.Session[VS_dtMedEx_Fill]).Rows.Count > 0)
					{
						dtsubjectcrf = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy().DefaultView.ToTable(true, "vSubjectId,vSubjectName".Split(','));
						dt_Subject = (DataTable)(((DataTable)this.Session[VS_dtMedEx_Fill]).Copy().DefaultView.ToTable(true, "vSubjectId,vSubjectName".Split(',')).Clone());

						dynamic subjectlist = this.hdnSubSelection.Value.ToString().Split(',');

						for (int i = 0; i < subjectlist.Length; i++)
						{
							dtsubjectcrf = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy().DefaultView.ToTable(true, "vSubjectId,vSubjectName".Split(','));
							dtsubjectcrf.DefaultView.RowFilter = "vSubjectId = " + subjectlist(i);
							dt_Subject.Merge(dtsubjectcrf.DefaultView.ToTable());
							dt_Subject.AcceptChanges();
						}
					}
					else
					{
						if (this.Session[vs_dsMsr] != null && ((DataTable)this.Session[vs_dsMsr]).Rows.Count > 0)
						{
							((DataTable)this.Session[vs_dsMsr]).DefaultView.Sort = "vMysubjectNo asc";
							dtsubjectcrf = ((DataTable)this.Session[vs_dsMsr]).DefaultView.ToTable();
							dt_Subject = dtsubjectcrf.Copy().DefaultView.ToTable(true, "vSubjectId,vInitials".Split(','));
							dt_Subject.Columns[1].ColumnName = "vSubjectName";
							dt_Subject.AcceptChanges();
						}

					}

					foreach (DataRow dr_Subject in dt_Subject.Rows)
					{
						if (this.ViewState[vs_strReporttype].ToString().IndexOf("CRF") == 0)
						{
							if (!CRFPreview(dr_Subject, ref CntSubGroup, ref Nodeid, ref Index, ref SubjectIndex, ref MedIndex, ref Identifier, ref ParentNodeId, ref PreviousParentNodeId, ref Period, ref PreviousPeriod))
							{
								return false;
							}
							if (this.ViewState[vs_strReporttype].ToString().IndexOf("MSR") > 0)
							{
								if (!MSRPreview(dr_Subject))
								{
									return false;
								}
							}
						}
						else
						{
							if (!MSRPreview(dr_Subject))
							{
								return false;
							}
							if (this.ViewState[vs_strReporttype].ToString().IndexOf("CRF") > 0)
							{
								if (!CRFPreview(dr_Subject, ref CntSubGroup, ref Nodeid, ref Index, ref SubjectIndex, ref MedIndex, ref Identifier, ref ParentNodeId, ref PreviousParentNodeId, ref Period, ref PreviousPeriod))
								{
									return false;
								}
							}
						}
					}
				}
				else
				{
					dt_Subject = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy().DefaultView.ToTable(true, "vSubjectId,vSubjectName".Split(','));


					foreach (DataRow dr_Subject in dt_Subject.Rows)
					{
						if (!CRFPreview(dr_Subject, ref CntSubGroup, ref Nodeid, ref Index, ref SubjectIndex, ref MedIndex, ref Identifier, ref ParentNodeId, ref PreviousParentNodeId, ref Period, ref PreviousPeriod))
						{
							return false;
						}
					}
				}
			}

			PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
			return true;
		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message.ToString(), "", ex);
		}
		finally
		{
			dt.Dispose();
			dv.Dispose();
			dt_MedExMst.Dispose();
			dt_MedexGroup.Dispose();
			dv_MedexGrp.Dispose();
			dtNodeID.Dispose();
			dt_Subject.Dispose();
			dtPeriod.Dispose();
			dtParentActivity.Dispose();
			dtMain.Dispose();
			dvMain.Dispose();
			dvSort.Dispose();
		}

//INSTANT C# NOTE: Inserted the following 'return' since all code paths must return a value in C#:
		return false;
	}

#endregion

#region DisplayHeader

	private bool DisplayHeader()
	{
		string Wstr = "";
		DataSet ds_Heading = new DataSet();
		string estr = "";

		try
		{

			Wstr = "vWorkspaceId='" + this.HProjectId.Value.Trim() + "'";
			if (!this.objHelp.View_MyProjects(Wstr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_Heading, ref estr))
			{
				throw new Exception("Error while getting Header information. " + estr);
			}

			if (ds_Heading.Tables[0].Rows.Count > 0)
			{
				this.spnBaBe.InnerHtml = "Sponsor Name: " + ds_Heading.Tables[0].Rows[0]["vClientName"].ToString().Trim();
				this.lblProjectNo.Text = ds_Heading.Tables[0].Rows[0]["vProjectNo"].ToString().Trim();
				this.lblSubjectNo.Text = "_";
				this.lblSubjectName.Text = "_";
				this.tdSiteName.Style.Add("display", "none");
				this.tdSiteId.Style.Add("display", "none");
				this.trProtocol.Style.Add("display", "none");
				this.trsubjectno.Style.Add("display", "");
				if (Convert.ToInt32(this.Session[GeneralModule.S_ScopeNo]) == GeneralModule.Scope_ClinicalTrial)
				{
					Int32 strLen = ds_Heading.Tables[0].Rows[0]["vProjectNo"].ToString().Trim().LastIndexOf("-");
					this.lblProjectNo.Text = ds_Heading.Tables[0].Rows[0]["vProjectNo"].ToString().Trim();

					if (strLen > 5)
					{
						this.tdSiteName.Style.Add("display", "");
						this.tdSiteId.Style.Add("display", "");
						this.lblProjectNo.Text = ds_Heading.Tables[0].Rows[0]["vProjectNo"].ToString().Trim().Substring(0, strLen);
						strLen = strLen + 1;
						this.lblSiteNo.Text = ds_Heading.Tables[0].Rows[0]["vProjectNo"].ToString().Trim().Substring(strLen);
					}
					this.lblSubjectNo.Text = "_";
					this.lblSubjectName.Text = "_";

				}

				if (this.chkprotocolno.Checked == false)
				{
					if (ds_Heading.Tables[0].Rows[0]["ProtocolNo"].ToString().Length > 0)
					{
						this.trProtocol.Style.Add("display", "");
						this.LblProtocol.Text = ds_Heading.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim();
					}
					else
					{
						this.trProtocol.Style.Add("display", "none");
					}
				}
				else
				{
					this.trProtocol.Style.Add("display", "none");
				}

				if (ddlActivityType.SelectedIndex == 1)
				{
					if (this.ddlSubject.SelectedIndex > 0)
					{
						this.lblSubjectNo.Text = "0000";
						this.lblSubjectName.Text = "-";
						this.SpnSubjectInit.Style.Add("display", "none");
						this.SpnSubject.Style.Add("display", "none");
						this.lblSubjectNo.Visible = false;
					}
					this.trsubjectno.Style.Add("display", "none");
				}
				else
				{
					if (this.ddlSubject.SelectedIndex > 0)
					{
						this.lblSubjectNo.Text = ddlSubject.SelectedItem.Text.Substring(0, ddlSubject.SelectedItem.Text.IndexOf(" "));
						this.lblSubjectName.Text = ddlSubject.SelectedItem.Text.Substring(ddlSubject.SelectedItem.Text.IndexOf(" "), (int)(ddlSubject.SelectedItem.Text.Length - ddlSubject.SelectedItem.Text.IndexOf(" "))) + "  ";
					}
				}

				if (this.chkinitial.Checked == true)
				{
					this.SpnSubjectInit.Style.Add("display", "none");
					this.lblSubjectName.Style.Add("display", "none");
				}
				else
				{
					if (ddlActivityType.SelectedIndex == 2)
					{
						this.SpnSubjectInit.Style.Add("display", "");
						this.lblSubjectName.Style.Add("display", "");
					}
				}

				this.HFHeaderPDF.Value = RenderControl(tbldivheader);
			}
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "", ex);
			return false;
		}
		finally
		{
			ds_Heading.Dispose();
		}
	}

#endregion

#region Function for Preview

	private bool CRFPreview(DataRow dr_Subject, ref int CntSubGroup, ref int Nodeid, ref int Index, ref int SubjectIndex, ref int MedIndex, ref int Identifier, ref int ParentNodeId, ref int PreviousParentNodeId, ref int Period, ref int PreviousPeriod)
	{
		object objelement = null;
		DataTable dt = new DataTable();
		DataTable dt_MedExMst = new DataTable();
		DataTable dt_MedexGroup = new DataTable();
		DataTable dtNodeID = new DataTable();
		DataTable dtMain = new DataTable();
		DataTable dtData = new DataTable();
		DataTable dtParentActivity = new DataTable();
		DataTable dtPeriod = new DataTable();
		DataTable dtsubject = new DataTable();
		DataView dv = new DataView();
		DataView dvMain = new DataView();
		DataView dvSort = new DataView();
		DataView dv_MedexGrp = new DataView();
		DataView dvsubject = new DataView();
		object PrevSubGroupCodes = "" ;
		object SubjectId = "" ;
		object Prev_SubjectId = "" ;
		object SubjectName = "" ;
		string NodeIds = "";
		int PreviousNodeID = 1;
		string NodeDisplayName = string.Empty;

		try
		{
			SubjectIndex += 1;
			SubjectId = Convert.ToString(dr_Subject["vSubjectId"]).Trim();
			SubjectName = Convert.ToString(dr_Subject["vSubjectName"]).Trim();

			dtsubject = ((DataTable)this.Session[VS_dtMedEx_Fill]).Copy();
			dtsubject.DefaultView.RowFilter = "vSubjectId='" + dr_Subject["vSubjectId"].ToString().Trim() + "'";

			dvsubject = dtsubject.DefaultView.ToTable().Copy().DefaultView.ToTable(true, "iParentNodeId,ParentActivityName,ParentNodeNo".Split(',')).DefaultView;
			dvsubject.Sort = " iParentNodeId asc";

			if (dvsubject.ToTable().Rows.Count == 1)
			{
				if (dvsubject.ToTable().Rows[0]["iParentNodeId"].ToString() != "1")
				{

					if (!string.IsNullOrEmpty(this.hdnSubSelection.Value.ToString().Trim()) && this.RBLselect.SelectedValue == "1")
					{
						PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFFC00; page-break-inside:avoid; \" >"));
						PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px; font-weight:bold;\">"));
						PlaceMedEx.Controls.Add(new LiteralControl("Subject Id :" + SubjectId.ToString()));
						PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
						PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
					}
				}
			}
			else if (dvsubject.ToTable().Rows.Count > 1)
			{
				if (!string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()) && this.RBLselect.SelectedValue == "1")
				{
					PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFFC00; page-break-inside:avoid; \" >"));
					PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px; font-weight:bold;\">"));
					PlaceMedEx.Controls.Add(new LiteralControl("Subject Id :" + SubjectId.ToString()));
					PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
					PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
				}
			}
			dtPeriod = dtsubject.DefaultView.ToTable().Copy().DefaultView.ToTable(true, "iPeriod".Split(','));
			Period = 0;
			PreviousPeriod = 0;
			int NoRowCount = 0;
			string strReport = string.Empty;

			foreach (GridViewRow row in gvwReportType.Rows)
			{
				if (row.RowType == DataControlRowType.DataRow)
				{
					if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
					{
						if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "3")
						{
							strReport += "CRF REPORT" + ",";
						}
						else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "8")
						{
							strReport += "eCRF Version History Report" + ",";
						}
					}

				}
			}
			if (strReport.Contains(","))
			{
				strReport = strReport.Substring(0, strReport.LastIndexOf(","));
			}

			if (strReport != null)
			{
				if (strReport.ToString().ToUpper().ToString().IndexOf("CRF REPORT") > -1)
				{
					foreach (DataRow drPeriod in dtPeriod.Rows)
					{
						Period = Convert.ToInt32(drPeriod["iPeriod"]);

						dvMain = dtsubject.DefaultView.ToTable().Copy().DefaultView;
						dvMain.RowFilter = "iPeriod = " + Period.ToString();
						dvSort = dvMain.ToTable().Copy().DefaultView.ToTable(true, "iParentNodeId,ParentActivityName,ParentNodeNo".Split(',')).DefaultView;
						dvSort.RowFilter = "isnull(iParentNodeId,0) <> 0";
						dvSort.Sort = "ParentNodeNo asc";
						dtParentActivity = dvSort.ToTable();
						ParentNodeId = 0;
						PreviousParentNodeId = 0;
						foreach (DataRow drParentActivity in dtParentActivity.Rows)
						{
							ParentNodeId = Convert.ToInt32(drParentActivity["iParentNodeID"]);
							if (ParentNodeId == 1)
							{
								continue;
							}
							if (ParentNodeId != PreviousParentNodeId && ParentNodeId != 0)
							{
								if (ParentNodeId != 1)
								{
									if (chkSubactivityWise.Checked == true)
									{
										if (Period != PreviousPeriod && NoRowCount == 0)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; \">")); //008ecd''redish orange for parent activity
										}
										else if (Period == PreviousPeriod && NoRowCount != 0)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; \">")); //008ecd''redish orange for parent activity
										}
										else if (Period != PreviousPeriod && NoRowCount != 0)
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; \">")); //008ecd''redish orange for parent activity
										}
									}
									else
									{
										PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; \">")); //008ecd''redish orange for parent activity
									}
									if (PreviousParentNodeId == 0)
									{
										PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px;  font-weight:bold;\">")); //white-space: nowrap;
									}
									else
									{
										PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px;  font-weight:bold;\">")); //white-space: nowrap;
									}
									PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
									PlaceMedEx.Controls.Add(new LiteralControl(Convert.ToString(drParentActivity["ParentActivityName"]).Trim()));
									PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
									PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
								}
							}
							PreviousPeriod = Convert.ToInt32(drPeriod["iPeriod"]);
							PreviousParentNodeId = Convert.ToInt32(drParentActivity["iParentNodeID"]);
							dvMain.RowFilter = "(iPeriod = " + Period.ToString() + " And iNodeId = " + ParentNodeId.ToString() + ") Or (iPeriod = " + Period.ToString() + " And iParentNodeId = " + ParentNodeId.ToString() + ")";
							dtMain = dvMain.ToTable().Copy();
							dvSort = null;
							dvSort = dtMain.Copy().DefaultView.ToTable(true, "iNodeID,vNodeDisplayName,iNodeNo,ParentNodeNo".Split(',')).DefaultView;
							dvSort.Sort = "ParentNodeNo,iNodeNo asc";
							dtNodeID = dvSort.ToTable();
							Nodeid = 0;
							PreviousNodeID = 0;
							foreach (System.Data.DataRow drNode in dtNodeID.Rows)
							{
								if (chkSubactivityWise.Checked == true)
								{
									if (PreviousNodeID != 0)
									{
										PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; \">")); //008ecd''redish orange for parent activity
										PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px;  font-weight:bold;\">")); //white-space: nowrap;
										PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
										PlaceMedEx.Controls.Add(new LiteralControl(Convert.ToString(drParentActivity["ParentActivityName"]).Trim()));
										PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
										PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
									}
									string strPlaceValu = RenderControl(PlaceMedEx);
								}

								NodeIds += Convert.ToString(drNode["iNodeID"]).Trim() + ",";
								Nodeid = Convert.ToInt32(drNode["iNodeID"]);
								NodeDisplayName = Convert.ToString(drNode["vNodeDisplayName"]).Trim();
								dv_MedexGrp = dtMain.Copy().DefaultView;
								dv_MedexGrp.RowFilter = "iNodeID = " + Nodeid.ToString(); // + " And vSubjectId = '" + SubjectId + "'"
								DataTable dt_Repeatition = dv_MedexGrp.ToTable(true, "RepetitionNo".Split(','));
								int PreviousRepeatition = 0;
								foreach (DataRow drRepeatition in dt_Repeatition.Rows)
								{
									dv_MedexGrp.RowFilter = "RepetitionNo = " + Convert.ToString(drRepeatition["RepetitionNo"]).ToString();
									dt_MedexGroup = dv_MedexGrp.ToTable(true, "vMedExGroupCode".Split(','));
									PlaceMedEx.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
									PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top\"page-break-inside:avoid;\">")); //white-space: nowrap;
									if (PreviousRepeatition != Convert.ToInt32(drRepeatition["RepetitionNo"]))
									{
										if ((PreviousNodeID != Nodeid) || (PreviousNodeID == Nodeid && PreviousRepeatition != Convert.ToInt32(drRepeatition["RepetitionNo"])))
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //'blue line of activity
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"2\" data-bookmark-enabled=\"true\" data-bookmark-text=\"" + ((Convert.ToInt32(drRepeatition["RepetitionNo"]) > 1) ? NodeDisplayName + ", Repetition: " + Convert.ToString(drRepeatition["RepetitionNo"]) : NodeDisplayName) + "\" data-bookmark-level=\"2\" width=\"100%\" color:#FFFFFF; ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; page-break-inside:avoid; font-family:'Times New Roman' !Important; font-size:12px; !important;\" >")); //008ecd
											if (ParentNodeId == 1)
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;color:#FFFFFF;  width: 80%;font-family:'Times New Roman' !Important; font-size:12px; \">")); //white-space: nowrap;
											}
											else
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;color:#FFFFFF;  width: 80%;font-family:'Times New Roman' !Important; font-size:12px; \">")); //white-space: nowrap;
											}
											dvMain.RowFilter = "iNodeId = " + Nodeid.ToString();
											dtData = dvMain.ToTable();
											PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
											if (Convert.ToInt32(drRepeatition["RepetitionNo"]) > 1)
											{
												PlaceMedEx.Controls.Add(new LiteralControl(NodeDisplayName + ", Repetition: " + Convert.ToString(drRepeatition["RepetitionNo"])));
											}
											else
											{
												PlaceMedEx.Controls.Add(new LiteralControl(NodeDisplayName));
											}
											if (RBLProjecttype.SelectedIndex == 1)
											{
												if (dtData.Rows.Count > 0)
												{
													if (!string.IsNullOrEmpty(dtData.Rows[0]["vMedExGroupCDISCValue"].ToString()))
													{
														PlaceMedEx.Controls.Add(GetMedExGroupCDISC(((dtData.Rows[0]["vMedExGroupCDISCValue"] == System.DBNull.Value) ? " " : Convert.ToString(dtData.Rows[0]["vMedExGroupCDISCValue"])), Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]), Convert.ToString(dtData.Rows[0]["vMedExSubGroupCode"]), Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]) + Convert.ToString(dtData.Rows[0]["vMedExSubGroupCode"]) + Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
													}
												}
											}
											PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											if (!(Convert.ToInt32(this.Session[GeneralModule.S_ScopeNo]) == GeneralModule.Scope_ClinicalTrial))
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td align=\"right\"  style=\"color:#FFFFFF ;width: 20%;font-family:'Times New Roman' !Important; font-size:12px; \">")); //'style=""vertical-align:right;""
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;Period: "));
												PlaceMedEx.Controls.Add(new LiteralControl(Period.ToString()));
												PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											}
											PlaceMedEx.Controls.Add(new LiteralControl("</Tr>")); //'activty row done
											PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
										}
									}
									PreviousRepeatition = Convert.ToInt32(drRepeatition["RepetitionNo"]);
									PreviousNodeID = Convert.ToInt32(drNode["iNodeID"]);
									Index = 0;
									PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
									foreach (System.Data.DataRow drGroup in dt_MedexGroup.Rows)
									{
										Index += 1;
										dt = new DataTable();
										dt_MedExMst = new DataTable();
										dt = dtMain.Copy();
										dv = new DataView();
										dv = dt.DefaultView;
										dv.RowFilter = "iNodeID = " + Nodeid.ToString() + " And vMedExGroupCode='" + drGroup["vMedExGroupCode"].ToString().Trim() + "'" + " And vSubjectId = '" + SubjectId.ToString() + "' And RepetitionNo = " + Convert.ToString(drRepeatition["RepetitionNo"]);
										dv.Sort = "iSeqNo,nmedexworkspacedtlno asc";
										dt_MedExMst = dv.ToTable();
										MedIndex = 0;
										foreach (System.Data.DataRow dr in dt_MedExMst.Rows)
										{
											MedIndex += 1;
											if (Convert.ToString(PrevSubGroupCodes) == "" || PrevSubGroupCodes != dr["vMedExSubGroupCode"])
											{
												if (Convert.ToString(dr["vMedExSubGroupCode"]).Trim() != "0000") //Added for default SubGroup
												{
													PlaceMedEx.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #ffcc66; page-break-inside:avoid;font-family:'Times New Roman' !Important; font-size:12px;\">")); //ffcc66
													PlaceMedEx.Controls.Add(new LiteralControl("<Td colspan=\"2\" style=\"vertical-align:middle;font-family:'Times New Roman' !Important; border: solid 1px gray !important;  font-size:12px; \">"));
													PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
													PlaceMedEx.Controls.Add(Getlable(dr["vMedExSubGroupDesc"].ToString().Trim(), Convert.ToString(dr["vMedExSubGroupCode"] + CntSubGroup.ToString().Trim() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString())));
													CntSubGroup += 1;
													PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
													PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
												}
											}
											PlaceMedEx.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT  style=\"page-break-inside:avoid;font-family:'Times New Roman' !Important; font-size:12px; \">"));
											PrevSubGroupCodes = dr["vMedExSubGroupCode"];
											if (Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "LABEL")
											{
												Identifier += 1;
												PlaceMedEx.Controls.Add(new LiteralControl("<Td width=\"60%\" style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
                                                PlaceMedEx.Controls.Add(GetlableWithHistory(Convert.ToString(dr["vMedExDesc"].ToString() + ": "), Convert.ToString(dr["vMedExGroupCode"]), Convert.ToString(dr["vMedExSubGroupCode"]), Convert.ToString(dr["vMedExGroupCode"]) + Convert.ToString(dr["vMedExSubGroupCode"]) + Convert.ToString(dr["vMedExCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
												if (RBLProjecttype.SelectedIndex == 1)
												{
													PlaceMedEx.Controls.Add(GetCDISC(((dr["vCDISCValues"] == System.DBNull.Value) ? " " : Convert.ToString(dr["vCDISCValues"])), Convert.ToString(dr["vMedExGroupCode"]), Convert.ToString(dr["vMedExSubGroupCode"]), Convert.ToString(dr["vMedExGroupCode"]) + Convert.ToString(dr["vMedExSubGroupCode"]) + Convert.ToString(dr["vMedExCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
												}
												if (chkDataType.Checked == true)
												{
													string[] str = null;
													if (!(dr["vValidationType"] == System.DBNull.Value) && !string.IsNullOrEmpty(Convert.ToString(dr["vValidationType"]).Trim()))
													{
														if (Convert.ToString(dr["vMedExType"]).ToUpper() == "TEXTBOX" || Convert.ToString(dr["vMedExType"]).ToUpper() == "TEXTAREA")
														{
															PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;&nbsp;"));
															str = Convert.ToString(dr["vValidationType"]).Split(',');
															if ((str.Length == 2 && !string.IsNullOrEmpty(str[1])))
															{
																if (Convert.ToString(str[0]).Contains("IN"))
																{
																	PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("IN", "I") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																}
																else if (Convert.ToString(str[0]).Contains("AL"))
																{
																	PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("AL", "A") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																}
																else
																{
																	PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("AL", "A") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																}

															}
															else if ((str[0] == "NU" && str.Length == 3))
															{
																PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("NU", "N") + " (" + str[1] + "," + str[2] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
															}
															else
															{
																//PlaceMedEx.Controls.Add(GetlableForDatatype("[" + Convert.ToString(str(0)).Replace("IN", "I") + "]", "ValidationType" + dr("vMedExCode") + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()))
															}

														}
													}
												}

												PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
												PlaceMedEx.Controls.Add(new LiteralControl("<Td width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important; font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
											}
											else
											{
												PlaceMedEx.Controls.Add(new LiteralControl("<Td colspan=\"2\" style=\" font-family:'Times New Roman' !Important; font-size:12px; vertical-align:middle; border:1px solid gray !Important;\" ALIGN=LEFT>"));
											}
											if (Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "LABEL" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "FILE" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "RADIO" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "CHECKBOX" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "COMBOBOX")
											{
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;"));
											}
											MainIdentifier += 1;

											objelement = GetObject(Convert.ToString(dr["vMedExType"]), Convert.ToString(dr["vMedExCode"] + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()), Convert.ToString(dr["vMedExValues"]), ((dr["vDefaultValue"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vDefaultValue"])), ((dr["vRefTable"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vRefTable"])), ((dr["vRefColumn"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vRefColumn"])));
											PlaceMedEx.Controls.Add((System.Web.UI.Control)objelement);

											if (!(dr["vUOM"] == System.DBNull.Value) && !string.IsNullOrEmpty(Convert.ToString(dr["vUOM"]).Trim()))
											{
												PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;&nbsp;"));
												PlaceMedEx.Controls.Add(GetlableUOM(Convert.ToString(dr["vUOM"]), "UOM" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
											}
											PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
										}
									}
									PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
									PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
									PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));

								}
							}
							NoRowCount = NoRowCount + 1;
						}
					}
				}
			}


			//Added by Kruti Salot 
			// Below Code to fetch data for CRF History Version Report
			if (strReport != null)
			{
				if (strReport.ToString().ToUpper().ToString().IndexOf("ECRF VERSION HISTORY REPORT") > -1)
				{
					DataTable dtCRFVersionReport = new DataTable();
					string[] Project = null;
					string ProjectNo = string.Empty;
					string SiteId = string.Empty;
					string wstr2 = string.Empty;
					DataSet dsWorkSpaceId = new DataSet();
					DataSet dsCRFVersionReport = new DataSet();
					string Wstr = string.Empty;
					DataSet ds_header = new DataSet();

					// If CType(gvwReportType.Rows(ECRF_CRF_Version_History).FindControl("chkSelect"), HtmlInputCheckBox).Checked = True Then

					//ds_header = CType(Me.ViewState(vs_View_getWorkspaceDetailForHdr), DataSet)
					//Project = ds_header.Tables(0).Rows(0)("vProjectNo").ToString().Split(":")
					//ProjectNo = Project(0).ToString
					//Dim strLen As Int32 = Project(0).ToString.LastIndexOf("-")

					//If Me.ViewState(IsProjectCT) AndAlso strLen > 5 Then
					//    ProjectNo = Project(0).Substring(0, strLen)
					//    strLen = strLen + 1
					//    SiteId = Project(0).Substring(strLen)
					//End If

					wstr2 = "vWorkSpaceId = '" + this.HProjectId.Value.Trim().ToString() + "'";
					objHelp.Timeout = -1;
					if (!objHelp.getworkspacemst(wstr2, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref dsWorkSpaceId, ref eStr_Retu))
					{
						throw new Exception("Error While Geting Whole Detail Of CRF Version");
					}

					if (dsWorkSpaceId == null)
					{
						return false;
					}

					if (dsWorkSpaceId.Tables.Count == 0)
					{
						return false;
					}

					if (dsWorkSpaceId.Tables[0].Rows.Count > 0)
					{

						object WorkspaceId = string.Empty;
						if (string.IsNullOrEmpty(dsWorkSpaceId.Tables[0].Rows[0]["vParentWorkSpaceId"].ToString()))
						{
							WorkspaceId = dsWorkSpaceId.Tables[0].Rows[0]["vWorkSpaceId"].ToString();
						}
						else
						{
							WorkspaceId = dsWorkSpaceId.Tables[0].Rows[0]["vParentWorkSpaceId"].ToString();
						}

						if (!string.IsNullOrEmpty(WorkspaceId.ToString()))
						{
							Wstr = WorkspaceId.ToString() + "##" + "1";

							if (!objHelp.Proc_cdc_dbo_CRFVersionMst_CT(Wstr, ref dsCRFVersionReport, ref eStr_Retu))
							{
								throw new Exception("Error While Geting Whole Detail Of CRF Version");
							}

							dtCRFVersionReport = dsCRFVersionReport.Tables[0];
						}

					}
					// End If


					// If CType(gvwReportType.Rows(ECRF_CRF_Version_History).FindControl("chkSelect"), HtmlInputCheckBox).Checked = True Or SubjectId.Trim() = "" Then
					if (dtCRFVersionReport.Rows.Count > 0)
					{

						PlaceMedEx.Controls.Add(new LiteralControl("<Table style=\" Width:100%; Font -family :'Times New Roman' !important;\">"));

						PlaceMedEx.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + "eCRF Version history Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always\">")); //008ecd''redish orange for parent activity
						PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
						PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
						PlaceMedEx.Controls.Add(new LiteralControl(Convert.ToString("eCRF Version history Report")));
						PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
						PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));

						PlaceMedEx.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;

						PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;page-break-inside:avoid;\">")); //Added on 30-01-2010 to fix the size of display

						PlaceMedEx.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:White;background-color:White;font-family:Verdana,Arial,Helvetica,sans-serif;font-size:0.9em;height:30px;page-break-inside:avoid;\">"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Sr No.</th>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Versio No.</th>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Status</th>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Remark</th>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Version Date</th>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Modify By</th>"));
						PlaceMedEx.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;\">Modify On</th>"));

						PlaceMedEx.Controls.Add(new LiteralControl("</tr>"));

						for (int Count_dt = 0; Count_dt < dtCRFVersionReport.Rows.Count; Count_dt++)
						{

							if ((Count_dt + 1) % 2 == 0)
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Verdana,Arial,Helvetica,sans-serif;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
							}
							else
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Verdana,Arial,Helvetica,sans-serif;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
							}

							PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + (Count_dt + 1).ToString() + "</td>"));
							PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFVersionReport.Rows[Count_dt]["nVersionNo"].ToString() + "</td>"));
							PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + ((dtCRFVersionReport.Rows[Count_dt]["cFreezeStatus"].ToString().ToUpper().ToString() == "F") ? "Freeze" : "UnFreeze") + "</td>"));
							PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFVersionReport.Rows[Count_dt]["vRemark"].ToString() + "</td>"));

							if (string.IsNullOrEmpty(dtCRFVersionReport.Rows[Count_dt]["dVersiondate"].ToString()))
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + "" + "</td>"));
							}
							else
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + Convert.ToString(DateTime.Parse(dtCRFVersionReport.Rows[Count_dt]["dVersiondate"].ToString()).ToString("dd-MMM-yyyy")) + "</td>"));
							}

							PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFVersionReport.Rows[Count_dt]["vFirstName"].ToString() + "</td>"));

							if (string.IsNullOrEmpty(dtCRFVersionReport.Rows[Count_dt]["dModifyOn"].ToString()))
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + "" + "</td>"));
							}
							else
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + Convert.ToString(DateTime.Parse(dtCRFVersionReport.Rows[Count_dt]["dModifyOn"].ToString()).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset) + "</td>"));
							}

							PlaceMedEx.Controls.Add(new LiteralControl("</tr>"));

						}

						PlaceMedEx.Controls.Add(new LiteralControl("</table>"));
						PlaceMedEx.Controls.Add(new LiteralControl("</td>"));
						PlaceMedEx.Controls.Add(new LiteralControl("</tr>"));

					}

				}
			}

			// End If

			//*********************************************************************************************************************************************************
			//****************************************************** CRF Version history end *****************************************************************************
			//*********************************************************************************************************************************************************


			Prev_SubjectId = Convert.ToString(dr_Subject["vSubjectId"]).Trim();
			if (this.RBLselect.SelectedValue == "0")
			{
				PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
				HFHeaderLabel.Value = RenderControl(PlaceMedEx);
			}
			return true;
		}
		catch (Exception ex)
		{
			return false;
		}
	}

	private bool MSRPreview(DataRow dr_subject)
	{
		DataTable dtSubject = new DataTable();
		DataTable dt_group = new DataTable();
		DataTable dt_subgroup = new DataTable();
		DataTable dt_medex = new DataTable();
		DataTable dt_group1 = new DataTable();
		DataTable dt_MedexScreeningHdrDtl = null;
		object SubjId = "" ;
        object SubNo = "";
        object Initials = "";
        dynamic Gender = "";
        object ScreeningHdrNo = "";
        object wstr = "";
		string estr = "";
		DataView dvmsr = null;
		DataView dvmsrgroup = null;
		DataView dvmedex = null;
		DataView dvmsrsubgroup = null;
		object objelement = null;

		try
		{

			dtSubject = (DataTable)this.ViewState[vs_View_WorkspaceSubjectMst];

			if (dtSubject == null)
			{
				return true;
			}

			if (dtSubject.Rows.Count == 0)
			{
				return true;
			}

			dtSubject.DefaultView.RowFilter = "vSubjectId='" + dr_subject["vSubjectId"].ToString() + "'";

			foreach (DataRow dr in dtSubject.DefaultView.ToTable().Rows)
			{

				if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
				{
					SubjId = dr["vPatientId"].ToString();
				}
				else
				{
					SubjId = dr["vSubjectId"].ToString();
				}
				SubNo = dr["vMySubjectNo"].ToString();
				Initials = dr["vInitials"].ToString();
				if (!(dr["nMedexScreeningHdrNo"] == System.DBNull.Value))
				{
					ScreeningHdrNo = dr["nMedexScreeningHdrNo"].ToString();
				}
				if (!(dr["cSex"] == System.DBNull.Value))
				{
					Gender = dr["cSex"].ToString();
				}
				if (ScreeningHdrNo == null)
				{
					this.objCommon.ShowAlert("No Screening Assingment has been done for Subject " + SubjId.ToString(), this.Page);
					return true;
				}
				dt_MedexScreeningHdrDtl = (DataTable)this.Session[vs_dsMsr];
				dvmsr = dt_MedexScreeningHdrDtl.Copy().DefaultView;
				dvmsr.Sort = "ScreeningType,iSeqNo asc";
				if (Gender.ToUpper.Trim() == "M")
				{
					dvmsr.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjId.ToString() + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo.ToString() + " and vMedexGroupcode not in ('00037','00009')";
				}
				else
				{
					dvmsr.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjId.ToString() + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo.ToString() + " and vMedexGroupcode  <> '00009'";
				}

				if (dvmsr.ToTable().Rows.Count > 0)
				{

					PlaceMedEx.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFFC66; page-break-inside:avoid; font-family:'Times New Roman' !important;  font-size:12px; font-weight:bold;\">"));
					PlaceMedEx.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !important;  font-size:12px; font-weight:bold;\" colspan=\"2\" >Medical Screening Record Form : " + SubjId.ToString() + " </td>"));
					PlaceMedEx.Controls.Add(new LiteralControl("</tr>"));
					PlaceMedEx.Controls.Add(new LiteralControl("<tr>"));
					PlaceMedEx.Controls.Add(new LiteralControl("<td>"));
					PlaceMedEx.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important;  font-size:12px; border-collapse: collapse !Important;\">"));
					dt_group = dvmsr.ToTable().Copy().DefaultView.ToTable(true, "vMedExGroupDesc,vMedExGroupCode".Split(','));
					foreach (DataRow dr_group in dt_group.Rows)
					{

						dvmsrgroup = dvmsr.ToTable().Copy().DefaultView;
						dvmsrgroup.RowFilter = "vMedExGroupCode = '" + dr_group["vMedExGroupCode"].ToString() + "'";

						if (dvmsrgroup.ToTable().Rows.Count > 0)
						{
							dt_group1 = dvmsrgroup.ToTable();
							PlaceMedEx.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"3\" data-bookmark-text=\"Screening Review\">"));
							PlaceMedEx.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px; font-weight:bold;\" colspan=\"2\" >" + dr_group["vMedExGroupDesc"].ToString() + "</td>"));
							PlaceMedEx.Controls.Add(new LiteralControl("</tr>"));
							dvmsrsubgroup = dt_group1.DefaultView;
							dt_subgroup = dvmsrsubgroup.ToTable(true, "vMedExSubGroupDesc,vMedExSubGroupCode".Split(','));
							foreach (DataRow drsubgroup in dt_subgroup.Rows)
							{
								PlaceMedEx.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"3\" data-bookmark-text=\"Screening Review\">"));
								PlaceMedEx.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; color:#FFFFFF; font-family:'Times New Roman' !Important; font-size:12px; font-weight:normal !important;\" colspan=\"2\" >" + drsubgroup["vMedExSubGroupDesc"].ToString() + "</td>"));
								PlaceMedEx.Controls.Add(new LiteralControl("</tr>"));
								dvmedex = dvmsr.ToTable().Copy().DefaultView;
								dvmedex.RowFilter = "vMedExGroupCode = '" + dr_group["vMedExGroupCode"].ToString() + "' AND vMedExSubGroupCode='" + drsubgroup["vMedExSubGroupCode"].ToString() + "'";
								if (dvmedex.ToTable().Rows.Count > 0)
								{

									foreach (DataRow drmedex in dvmedex.ToTable().Rows)
									{
										PlaceMedEx.Controls.Add(new LiteralControl("<tr ALIGN=LEFT style=\"page-break-inside:avoid;font-family:'Times New Roman' !Important; font-size:12px;\">"));


										if (Convert.ToString(drmedex["vMedExType"]).Trim().ToUpper() != "LABEL")
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Td width=\"60%\" style=\" font-family:'Times New Roman' !Important; font-size:12px; font-weight:bold; vertical-align:middle; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;
											PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
											PlaceMedEx.Controls.Add(GetlableWithHistory(Convert.ToString(drmedex["vMedExDesc"].ToString() + ": "), Convert.ToString(drmedex["vMedExGroupCode"]), Convert.ToString(drmedex["vMedExSubGroupCode"]), drmedex["vMedExGroupCode"].ToString() + drmedex["vMedExSubGroupCode"].ToString() + drmedex["vMedExCode"].ToString() + "R" + SubjId.ToString() + "SubId" + drmedex["iSeqNo"].ToString() + drmedex["vMedExCode"]));
											PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
											PlaceMedEx.Controls.Add(new LiteralControl("<Td width=\"40%\" style=\"vertical-align:middle; border: solid 1px gray !important; font-family:'Times New Roman' !Important;  font-size:12px; \" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
											PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;"));
										}
										else
										{
											PlaceMedEx.Controls.Add(new LiteralControl("<Td colspan=\"2\" width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important;  font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
										}

										objelement = GetObject(Convert.ToString(drmedex["vMedExType"]), Convert.ToString(drmedex["vMedExCode"].ToString() + "R" + SubjId.ToString() + "MSRPRINT"), ((drmedex["vDefaultValue"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vDefaultValue"])), ((drmedex["vMedExValues"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vMedExValues"])), ((drmedex["vRefTable"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vRefTable"])), ((drmedex["vRefColumn"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vRefColumn"])));
										PlaceMedEx.Controls.Add((System.Web.UI.Control)objelement);
										PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
										PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
									}
								}
							}
						}
					}
					PlaceMedEx.Controls.Add(new LiteralControl("</Table>"));
					PlaceMedEx.Controls.Add(new LiteralControl("</Td>"));
					PlaceMedEx.Controls.Add(new LiteralControl("</Tr>"));
				}
			}
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While MSRPreview.", ex);
			return false;
		}
	}

#endregion

#region Getlable

	private Label Getlable(string vlabelName, string Id, string vFieldType = "")
	{
		Label tempGetlable = null;
		Label lab = null;

		try
		{
			lab = new Label();
			lab.ID = "Lab" + Id;
			lab.Text = vlabelName.Trim();
			lab.ForeColor = System.Drawing.Color.FromName("Navy");
			//lab.Font.Size = 9
			//lab.Font.Bold = True
			//lab.Font.Name = "Georgia"
			lab.Style.Add("font-family", "'Times New Roman' !Important");
			lab.Style.Add("font-size", "12px !Important");
			lab.Style.Add("font-weight", "bold !Important");
			if (vFieldType.ToUpper().Trim() == "IMPORT")
			{
				lab.Visible = false;
			}
			lab.EnableViewState = false;
			tempGetlable = lab;
			lab.Dispose();
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error while calling Getlable..", ex);
		}
		return tempGetlable;
	}
	private Label GetlableUOM(string vlabelName, string Id, string vFieldType = "")
	{
		Label tempGetlableUOM = null;
		Label lab = null;

		try
		{
			lab = new Label();
			lab.ID = "Lab" + Id;
			lab.Text = vlabelName.Trim();
			//lab.ForeColor = System.Drawing.Color.FromName("Navy")
			//lab.Font.Size = 9
			//lab.Font.Bold = True
			//lab.Font.Name = "Georgia"
			lab.Style.Add("font-family", "'Times New Roman' !Important");
			lab.Style.Add("font-size", "12px !Important");
			lab.Style.Add("font-weight", "bold !Important");
			if (vFieldType.ToUpper().Trim() == "IMPORT")
			{
				lab.Visible = false;
			}
			lab.EnableViewState = false;
			tempGetlableUOM = lab;
			lab.Dispose();
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error while calling Getlable..", ex);
		}
		return tempGetlableUOM;
	}

	private Label GetlableForDatatype(string vlabelName, string Id, string vFieldType = "")
	{
		Label tempGetlableForDatatype = null;
		Label lab = null;

		try
		{
			lab = new Label();
			lab.ID = "Lab" + Id;
			lab.Text = vlabelName.Trim();
			lab.ForeColor = System.Drawing.Color.FromName("Black");
			lab.Font.Size = 9;
			lab.Font.Bold = false;
			lab.Font.Name = "Times New Roman";
			//lab.Style.Add("font-family", "'Times New Roman' !Important")
			//lab.Style.Add("font-size", "10px !Important")
			if (vFieldType.ToUpper().Trim() == "IMPORT")
			{
				lab.Visible = false;
			}
			lab.EnableViewState = false;
			tempGetlableForDatatype = lab;
			lab.Dispose();
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error while calling Getlable..", ex);
		}
		return tempGetlableForDatatype;
	}


	private Label GetlableForSubGroup(string vlabelName, string Id, string vFieldType = "")
	{
		Label tempGetlableForSubGroup = null;
		Label lab = new Label();
		lab.ID = "Lab" + Id;
		lab.Text = vlabelName.Trim();
		lab.SkinID = "lblDisplay";
		lab.ForeColor = System.Drawing.Color.FromName("Navy");
		lab.Style.Add("font-family", "'Times New Roman' !Important");
		lab.Style.Add("font-size", "12px !Important");
		lab.Style.Add("font-weight", "bold !Important");
		if (vFieldType.ToUpper().Trim() == "IMPORT")
		{
			lab.Visible = false;
		}
		lab.Width = new Unit ("800px");
		lab.Style.Add("word-wrap", "break-word");
		lab.Style.Add("white-space", "");
		lab.EnableViewState = false;
		tempGetlableForSubGroup = lab;
		lab.Dispose();
		return tempGetlableForSubGroup;
	}

	private Label GetlableWithHistory(string vlabelName, string MedExGroupCode, string MedExSubGroupCode, string MedExCode)
	{
		Label tempGetlableWithHistory = null;
		Label lnk = new Label();
		lnk.ID = "Lnk" + MedExCode;
		lnk.Text = vlabelName.Trim();
		lnk.SkinID = "LabelDisplay";
		lnk.Style.Add("word-wrap", "break-word");
		lnk.Style.Add("white-space", "");
		lnk.Style.Add("font-family", "'Times New Roman' !Important");
		lnk.Style.Add("font-size", "12px !Important");
		//lnk.Style.Add("font-weight", "bold !Important")
		lnk.EnableViewState = false;
		tempGetlableWithHistory = lnk;
		lnk.Dispose();
		return tempGetlableWithHistory;
	}

	private Label GetCDISC(string vCDISCValues, string MedExGroupCode, string MedExSubGroupCode, string MedExCode)
	{
		Label tempGetCDISC = null;
		Label lnk = new Label();
		lnk.ID = "Lnkcdisc" + MedExCode;

		lnk.Text = " [" + vCDISCValues.Trim() + "]";
		if (lnk.Text != " []")
		{
			lnk.SkinID = "LabelDisplay";
			//'lnk.BackColor = Color.Yellow
			lnk.BorderColor = Color.Black;
			//'lnk.BorderWidth = 2
			//'lnk.BorderStyle = BorderStyle.Solid
			lnk.ForeColor = Color.Black;
		}
		lnk.Style.Add("word-wrap", "break-word");
		lnk.Style.Add("white-space", "");
		lnk.Style.Add("font-family", "'Times New Roman' !Important");
		lnk.Style.Add("font-size", "12px !Important");
		//'lnk.Style.Add("font-weight", "bold !Important")
		lnk.EnableViewState = false;
		tempGetCDISC = lnk;
		lnk.Dispose();
		return tempGetCDISC;
	}

	private Label GetMedExGroupCDISC(string vCDISCValues, string MedExGroupCode, string MedExSubGroupCode, string MedExCode)
	{
		Label tempGetMedExGroupCDISC = null;
		Label lnk = new Label();
		lnk.ID = "Lnkcdisc" + MedExGroupCode + MedExSubGroupCode + MedExCode;

		lnk.Text = "  [DOMAIN:" + vCDISCValues.Trim() + "]";
		if (lnk.Text != " []")
		{
			lnk.SkinID = "LabelDisplay";
			//'lnk.BackColor = Color.Yellow
			lnk.BorderColor = Color.Black;
			//'lnk.BorderWidth = 2
			//'lnk.BorderStyle = BorderStyle.Solid
			lnk.ForeColor = Color.Black;
		}
		lnk.Style.Add("word-wrap", "break-word");
		lnk.Style.Add("white-space", "");
		lnk.Style.Add("font-family", "'Times New Roman' !Important");
		lnk.Style.Add("font-size", "12px !Important");
		//'lnk.Style.Add("font-weight", "bold !Important")
		lnk.EnableViewState = false;
		tempGetMedExGroupCDISC = lnk;
		lnk.Dispose();
		return tempGetMedExGroupCDISC;
	}

#endregion

#region GetButtons

	private bool GetButtons(string BtnName, string Id)
	{
		Button Btn = null;
		int index = 0;
		string[] StrGroupCode_arry = null;
		string[] StrGroupDesc_arry = null;
		try
		{
			StrGroupCode_arry = Id.Split(',');
			StrGroupDesc_arry = BtnName.Split(',');
			for (index = 0; index < StrGroupCode_arry.Length; index++)
			{
				Btn = new Button();
				Btn.ID = "Btn" + StrGroupCode_arry[index];
				Btn.Text = " " + StrGroupDesc_arry[index].Trim() + " ";

				if (StrGroupDesc_arry[index].Trim().Length > 30)
				{
					Btn.Text = " " + StrGroupDesc_arry[index].Substring(0, 30).Trim() + "... ";
				}

				Btn.ToolTip = StrGroupDesc_arry[index].Trim();
				Btn.CssClass = "buttonForTabActive";

				if (index == 0)
				{
					Btn.CssClass = "buttonForTabInActive";
				}

				Btn.OnClientClick = "return DisplayDiv('" + StrGroupCode_arry[index] + "','" + Id + "');";
				PlaceMedEx.Controls.Add(Btn);
				PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
				PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;"));
			}
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "", ex);
		}
//INSTANT C# NOTE: Inserted the following 'return' since all code paths must return a value in C#:
		return false;
	}



#endregion

#region GetObject

	private object GetObject(string vFieldType, string Id, string vMedExValues, string dtValues, string RefTable = "", string RefColumn = "")
	{
		object tempGetObject = null;
		TextBox txt = null;
		DropDownList ddl = null;
		FileUpload FileBro = null;
		RadioButtonList RBL = null;
		CheckBoxList CBL = null;
		Label lbl = null;

		switch (vFieldType.ToUpper().Trim())
		{
			case "TEXTBOX":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{

					lbl = new Label();
					lbl.ID = "txt" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txt" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")

					//lbl.Text = WrapString(dtValues.Trim(), 45)
					lbl.Text = dtValues.Trim();
				}
				lbl.Enabled = false;
				lbl.EnableViewState = false;
				tempGetObject = lbl;
				break;
			}
			case "COMBOBOX":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					string[] Arrvalue = null;
					int i = 0;
					DataSet ds_ddl = new DataSet();
					string estr = "";
					ddl = new DropDownList();
					ddl.ID = Id;
					ddl.Style.Add("font-size", "12px !Important");
					ddl.Attributes.Add("size", Convert.ToString(vMedExValues.Split(',').Length - 1));
					//ddl.CssClass = "dropDownList"
					ddl.EnableViewState = false;
					if (!string.IsNullOrEmpty(RefTable.Trim()))
					{
						if (!this.objHelp.GetFieldsOfTable(RefTable.Trim(), RefColumn.Trim(), "", ref ds_ddl, ref estr))
						{
							this.objCommon.ShowAlert(estr, this.Page);
							return null;
						}
						ds_ddl.Tables[0].DefaultView.Sort = RefColumn;
						ddl.DataSource = ds_ddl.Tables[0].DefaultView.ToTable();
						ddl.DataTextField = RefColumn;
						ddl.DataValueField = RefColumn;
						ddl.DataBind();
					}
					else
					{
						Arrvalue = vMedExValues.Split(',');
						for (i = 1; i < Arrvalue.Length; i++)
						{
							if (i == Arrvalue.Length - 1)
							{
								ddl.Items.Add(new System.Web.UI.WebControls.ListItem(Arrvalue[i].Trim(), Arrvalue[i].Trim()));
							}
							else
							{
								ddl.Items.Add(new System.Web.UI.WebControls.ListItem(Arrvalue[i].Trim() + ",", Arrvalue[i].Trim() + ","));
							}
							ddl.Items[i - 1].Attributes.Add("title", Arrvalue[i].Trim());
						}
						if (!(string.IsNullOrEmpty(dtValues)))
						{
							ddl.SelectedValue = dtValues.Trim();
							ddl.Attributes.Add("title", dtValues);
						}
					}

					if (this.RBLselect.SelectedValue.Trim() == "0")
					{
						ddl.Enabled = true;
					}
					else
					{
						ddl.Style.Add("background-image", "");
						ddl.Enabled = false;
					}

					tempGetObject = ddl;

					//Comment by nipun khant for populated dropdownlist
					//lbl = New Label
					//lbl.ID = "ddl" + Id
					//lbl.Style.Add("word-wrap", "break-word")
					//lbl.Style.Add("white-space", "none")
					//lbl.Style.Add("font-family", "'Times New Roman' !Important")
					//lbl.Style.Add("font-size", "16px !Important")
					//'lbl.Style.Add("font-weight", "bold !Important")
					//lbl.Text = dtValues.Trim()
					//lbl.EnableViewState = False
					//GetObject = lbl
				}
				else
				{
					lbl = new Label();
					lbl.ID = "ddl" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "RADIO":
			{
				string[] Arrvalue = null;
				int i = 0;
				DataSet ds_Radio = new DataSet();
				string estr = "";
				RBL = new RadioButtonList();
				RBL.ID = "rdo" + Id;

				RBL.Style.Add("font-family", "'Times New Roman' !Important");
				RBL.Style.Add("font-size", "12px !Important");
				//RBL.Style.Add("font-weight", "bold !Important")
				RBL.EnableViewState = false;
				if (!string.IsNullOrEmpty(RefTable.Trim()))
				{
					if (!this.objHelp.GetFieldsOfTable(RefTable.Trim(), RefColumn.Trim(), "", ref ds_Radio, ref estr))
					{
						this.objCommon.ShowAlert(estr, this.Page);
						return null;
					}
					ds_Radio.Tables[0].DefaultView.Sort = RefColumn;
					RBL.DataSource = ds_Radio.Tables[0].DefaultView.ToTable();
					RBL.DataTextField = RefColumn;
					RBL.DataValueField = RefColumn;
					RBL.DataBind();
				}
				else
				{
					Arrvalue = vMedExValues.Split(',');
					for (i = 0; i < Arrvalue.Length; i++)
					{
						RBL.Items.Add(new System.Web.UI.WebControls.ListItem(Arrvalue[i].Trim(), Arrvalue[i].Trim().ToUpper()));
					}
					if (!(string.IsNullOrEmpty(dtValues)))
					{
						RBL.SelectedValue = dtValues.Trim().ToUpper();
					}
				}
				RBL.RepeatDirection = RepeatDirection.Horizontal;
				RBL.RepeatColumns = 3;
				if (this.RBLselect.SelectedValue.Trim() == "0")
				{
					RBL.Enabled = true;
				}
				else
				{
					RBL.Enabled = false;
				}

				tempGetObject = RBL;

				break;
			}
			case "CHECKBOX":
			{
				string[] Arrvalue = null;
				string[] Defvalue = null;
				int i = 0;
				DataSet ds_Check = new DataSet();
				string estr = "";
				CBL = new CheckBoxList();
				CBL.ID = "chk" + Id;
				CBL.Style.Add("font-family", "'Times New Roman' !Important");
				CBL.Style.Add("font-size", "12px !Important");
				//CBL.Style.Add("font-weight", "bold !Important")
				CBL.EnableViewState = false;
				if (!string.IsNullOrEmpty(RefTable.Trim()))
				{
					if (!this.objHelp.GetFieldsOfTable(RefTable.Trim(), RefColumn.Trim(), "", ref ds_Check, ref estr))
					{
						this.objCommon.ShowAlert(estr, this.Page);
						return null;
					}
					ds_Check.Tables[0].DefaultView.Sort = RefColumn;
					CBL.DataSource = ds_Check.Tables[0].DefaultView.ToTable();
					CBL.DataTextField = RefColumn;
					CBL.DataValueField = RefColumn;
					CBL.DataBind();
				}
				else
				{
					Arrvalue = vMedExValues.Split(',');
					for (i = 0; i < Arrvalue.Length; i++)
					{
						CBL.Items.Add(new System.Web.UI.WebControls.ListItem(Arrvalue[i].Trim(), Arrvalue[i].Trim()));
					}
				}
				CBL.ClearSelection();
				if (!(string.IsNullOrEmpty(dtValues)))
				{
					Defvalue = dtValues.Split(',');
					for (i = 0; i < Defvalue.Length; i++)
					{
						foreach (System.Web.UI.WebControls.ListItem item in CBL.Items)
						{
							if (item.Value.Trim().ToUpper() == Defvalue[i].Trim().ToUpper())
							{
								item.Selected = true;
								break;
							}
						}
					}
				}
				CBL.RepeatDirection = RepeatDirection.Horizontal;
				CBL.RepeatColumns = 3;
				if (this.RBLselect.SelectedValue.Trim() == "0")
				{
					CBL.Enabled = true;
				}
				else
				{
					CBL.Enabled = false;
				}
				tempGetObject = CBL;

				break;
			}
			case "FILE":
			{
				FileBro = new FileUpload();
				FileBro.ID = "FU" + Id;
				//FileBro.CssClass = "textBox"
				FileBro.Style.Add("font-family", "'Times New Roman' !Important");
				FileBro.Style.Add("font-size", "12px !Important");
				//FileBro.Style.Add("font-weight", "bold !Important")
				FileBro.EnableViewState = false;
				if (Id != "fusponsorlogo")
				{
					FileBro.Enabled = false;
				}
				FileBro.Attributes.Add("class", "textboxFileUpload");
				tempGetObject = FileBro;

				break;
			}
			case "TEXTAREA":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					lbl = new Label();
					lbl.ID = "txta" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txta" + Id;
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					//lbl.Text = WrapString(dtValues.Trim(), 45)
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "DATETIME":
			case "STANDARDDATE":
			case "STANDARDDATETIME":
			{


				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					lbl = new Label();
					lbl.ID = "txtd" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txtd" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "TIME":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					lbl = new Label();
					lbl.ID = "txtt" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txtt" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}


				break;
			}
			case "ASYNCDATETIME":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					lbl = new Label();
					lbl.ID = "txtd" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txtd" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "ASYNCTIME":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					lbl = new Label();
					lbl.ID = "txtt" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txtt" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "IMPORT":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					lbl = new Label();
					lbl.ID = "txti" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txti" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "COMBOGLOBALDICTIONARY":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					txt = new TextBox();
					txt.ID = Id;
					//txt.CssClass = "textBox"
					txt.Style.Add("font-family", "'Times New Roman' !Important");
					txt.Style.Add("font-size", "12px !Important");
					//txt.Style.Add("font-weight", "bold !Important")
					txt.Text = dtValues;
					txt.Enabled = false;
					txt.Attributes.Add("title", dtValues);
					txt.EnableViewState = false;
					tempGetObject = txt;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txtc" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					string str = string.Empty;
					int Count = dtValues.Trim().Length;
					var strsplit = dtValues.Trim().Split("##"[0]);
					if (strsplit.Length == 0)
					{
						str = dtValues.Trim();
					}
					else
					{
						for (int i = 0; i < strsplit.Length; i++)
						{
							if (strsplit[i] != "")
							{
								if (i == strsplit.Length - 1)
								{
									str += strsplit[i] + " ";
								}
								else
								{
									str += strsplit[i] + "## ";
								}
							}
						}
					}

					lbl.Text = str;
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "FORMULA":
			{

				if (Convert.ToString(this.Session[VS_BlankCRF]) == "YES")
				{
					txt = new TextBox();
					txt.ID = Id;
					//txt.CssClass = "textBox"
					txt.Style.Add("font-family", "'Times New Roman' !Important");
					txt.Style.Add("font-size", "12px !Important");
					//txt.Style.Add("font-weight", "bold !Important")
					txt.Text = dtValues;
					txt.Attributes.Add("title", dtValues);
					txt.Enabled = false;
					txt.EnableViewState = false;
					tempGetObject = txt;
				}
				else
				{
					lbl = new Label();
					lbl.ID = "txtf" + Id;
					lbl.Style.Add("word-wrap", "break-word");
					lbl.Style.Add("white-space", "none");
					lbl.Style.Add("font-family", "'Times New Roman' !Important");
					lbl.Style.Add("font-size", "12px !Important");
					//lbl.Style.Add("font-weight", "bold !Important")
					lbl.Text = dtValues.Trim();
					lbl.EnableViewState = false;
					tempGetObject = lbl;
				}

				break;
			}
			case "LABEL":
			{
				lbl = new Label();
				lbl.ID = "lbl" + Id;
				lbl.CssClass = "Label";
				lbl.Style.Add("word-wrap", "break-word");
				lbl.Style.Add("white-space", "none");
				lbl.Style.Add("font-family", "'Times New Roman' !Important");
				lbl.Style.Add("font-size", "12px !Important");
				//lbl.Style.Add("font-weight", "bold !Important")
				lbl.Text = vMedExValues.Trim();
				lbl.EnableViewState = false;
				tempGetObject = lbl;
				break;
			}
			case "CRFTERM":
			{
				lbl = new Label();
				lbl.ID = "txtc" + Id;
				lbl.Style.Add("word-wrap", "break-word");
				lbl.Style.Add("word-break", "break-all");
				lbl.Style.Add("white-space", "none");
				lbl.Style.Add("font-family", "'Times New Roman' !Important");
				lbl.Style.Add("font-size", "12px !Important");
				//lbl.Style.Add("font-weight", "bold !Important")
				lbl.Style.Add("Width", "95%");
				lbl.Text = dtValues;
				lbl.EnableViewState = false;
				tempGetObject = lbl;
				//lbl = New Label
				//lbl.ID = Id
				//lbl.CssClass = "Label"
				//lbl.Style.Add("font-family", "'Times New Roman' !Important")
				//lbl.Style.Add("white-space", "none")
				//lbl.Style.Add("font-size", "16px !Important")
				//lbl.Style.Add("font-weight", "bold !Important")
				//lbl.Style.Add("word-wrap", "break-word")
				//lbl.Style.Add("border", "Solid 1px")
				//lbl.Text = dtValues
				//lbl.EnableViewState = False
				//GetObject = lbl

				//txt = New TextBox
				//txt.ID = Id
				//txt.TextMode = TextBoxMode.MultiLine
				//txt.CssClass = "textBox"
				//txt.Style.Add("font-family", "'Times New Roman' !Important")
				//txt.Style.Add("font-size", "16px !Important")
				//txt.Style.Add("font-weight", "bold !Important")
				//txt.Style.Add("Width", "95%")
				//'txt.Style.Add("word-wrap", "break-word")
				//txt.Text = dtValues
				//txt.EnableViewState = False
				//GetObject = txt

				break;
			}
			default:
			{
				return null;
			}
		}
		return tempGetObject;
	}

#endregion

#region Button Events

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub BtnGeneratePdf_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnGeneratePdf.Click
	protected void BtnGeneratePdf_Click(object sender, System.EventArgs e)
	{
		string htmlcontent = string.Empty;
		string headercontent = string.Empty;
		Document d1 = null;
		string data = string.Empty;
		ArrayList stylesheetarraylist = new ArrayList();
		System.Drawing.Font watermarkTextFont = null;
		TextElement watermarkTextElement = null;
		string strProfileStatus = string.Empty;
		string wStr = string.Empty;
		string eStr = string.Empty;
		System.Drawing.Font pdfFont = null;
		DataSet ds_subject = new DataSet();
		DataSet ds_header = new DataSet();
		DataSet ds_SubSample = new DataSet();
		DataTable dt_subjectMain = new DataTable();
		DataView dv_subjectmain = null;
		string ScreeningHdrNo = string.Empty;
		string SubjId = "";
		string SubNo = "";
		string Initials = "";
		int NodeID = 0;
		string Gender = string.Empty;
		int indexrpt = 0;
		string StrRptNo = null;
		string project = null;
		string ProjectNo = null;
		string SiteId = null;
		string[] projects = null;
		string SubjectNo = null;
		string SubjectInitial = null;
		StrRptNo = "";
		SiteId = "";
		SubjectNo = "_";
		SubjectInitial = "_";
		object dt_subjectcopy = new DataTable();
		string strMappingRequired = "";
		string strdatetime = "";
		string[] DocumentsArray = null;
		string[] DocumentsArray1 = null;
		FileInfo fInfo = null;
		FileInfo fInfo1 = null;
		int ilabreport = 1;
		string strfilelogopath = "";
		string strsavelogopath = "";
		Document d2 = null;
		string SubIDForLab = string.Empty;
		string[] DocumentsArrayForMissingSubject = null;
		string[] DocumentsArrayZipFiles = null;
		int ExecuteDataOnlyonce = 0;
		int ExecuteDataOnlyonceMSR = 0;
		try
		{

			strdatetime = DateTime.Now.Ticks.ToString();
			this.ViewState[vs_sponsorlogofilepath] = "";
			if (fusponsorlogo.HasFile == true)
			{
				strfilelogopath = System.IO.Path.GetFileName(fusponsorlogo.PostedFile.FileName);
				strfilelogopath = DateTime.Now.Ticks.ToString() + "." + strfilelogopath.Split('.')[strfilelogopath.Split('.').Length - 1];
				strsavelogopath = Server.MapPath(ConfigurationManager.AppSettings["LogoFilePath"].ToString()) + "\\" + strfilelogopath;
				fusponsorlogo.PostedFile.SaveAs(strsavelogopath);
				this.ViewState[vs_sponsorlogofilepath] = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/")) + "/" + ConfigurationManager.AppSettings["LogoFilePath"].ToString() + "/" + strfilelogopath;
			}

			if (this.ddlActivityType.SelectedIndex == 2 && !string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()))
			{
				wStr = " vWorkspaceid = '" + this.HProjectId.Value.ToString() + "' And iMySubjectNo <> 0 And iPeriod = 1 and cstatusindi <> 'D' order by vMySubjectNo";

				if (!objHelp.GetViewWorkspaceSubjectMst(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_subject, ref eStr))
				{
					throw new Exception("Error While Getting Data From View_WorkspaceSubjectMst");
				}

				dt_subjectMain = ds_subject.Tables[0].DefaultView.ToTable(true, "vSubjectId,vSubjectIdForLab,vInitials,iMySubjectNO,vMySubjectNo,vWorkSpaceSubjectID,nMedexScreeningHdrNo,cSex,vProjectNo,vWorkSpaceDesc,cRejectionFlag,vPatientID".Split(','));
				dt_subjectcopy = dt_subjectMain.Copy();
				dv_subjectmain = dt_subjectMain.DefaultView;
				dv_subjectmain.RowFilter = "vSubjectId in (" + this.hdnSubSelection.Value.ToString() + ")";

				foreach (DataRow dr in dv_subjectmain.ToTable().Rows)
				{
					try
					{

						ExecuteDataOnlyonce = 0;
						ExecuteDataOnlyonceMSR = 0;
						SubjId = dr["vSubjectId"].ToString();

						SubNo = dr["vMySubjectNo"].ToString();
						Initials = dr["vInitials"].ToString();
						if (!(dr["nMedexScreeningHdrNo"] == System.DBNull.Value))
						{
							ScreeningHdrNo = dr["nMedexScreeningHdrNo"].ToString();
						}
						if (!(dr["cSex"] == System.DBNull.Value))
						{
							Gender = dr["cSex"].ToString();
						}
						foreach (GridViewRow row in gvwReportType.Rows)
						{
							if (row.RowType == DataControlRowType.DataRow)
							{
								if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
								{

									indexrpt += 1;

									if ((indexrpt + 1) < 10)
									{
										StrRptNo = "0" + Convert.ToString(indexrpt + 1);
									}

									if ((row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "1" || row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "12" ||  row.Cells[GVR_ReportId].Text.Split('#')[0] == "13" || row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "14" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "11" || row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "16") && ExecuteDataOnlyonceMSR == 0) //CRFReport
									{

										if (!MsrReport(SubjId, ScreeningHdrNo, Gender, StrRptNo, strdatetime, SubNo, Initials))
										{
											throw new Exception("MsrReport");
										}
										ExecuteDataOnlyonceMSR = 1;

									}
									else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "2")
									{

										SubjId = dr["vSubjectId"].ToString();
										SubIDForLab = dr["vSubjectIdForLab"].ToString();
										wStr = "vworkspaceID ='" + this.HProjectId.Value.Trim() + "' and vSubjectID = '" + SubjId + "' and iperiod =1 ";

										if (!objHelp.view_WorkspaceSubjectMstDetail(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_SubSample, ref eStr))
										{
											throw new Exception("Error While Getting Data From View_WorkspaceSubjectMst");
										}

										if (ds_SubSample.Tables[0].Rows.Count > 0)
										{
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of ds_SubSample.Tables(0).Rows.Count for every iteration:
											int tempVar = ds_SubSample.Tables[0].Rows.Count;
											for (int IndexSample = 0; IndexSample < tempVar; IndexSample++)
											{
												if ((indexrpt + 1) < 10)
												{
													StrRptNo = "0" + Convert.ToString(indexrpt + 1);
												}
												else
												{
													StrRptNo = Convert.ToString(indexrpt + 1);
												}

												if (!LabReport(Convert.ToInt32(ds_SubSample.Tables[0].Rows[IndexSample]["nSampleID"]), StrRptNo + "." + Convert.ToString(IndexSample + ilabreport), strdatetime, SubIDForLab))
												{
													throw new Exception("LabReport");
												}
												ilabreport = ilabreport + 1;

											}
										}
										SubjId = dr["vSubjectId"].ToString();

									}
									else if ((row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "3" || row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "4" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "5" || row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "6" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "7" || row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "8") && ExecuteDataOnlyonce == 0) //CRFReport
									{

										if ((indexrpt + 1) < 10)
										{
											StrRptNo = "0" + Convert.ToString(indexrpt + 1);
										}
										else
										{
											StrRptNo = Convert.ToString(indexrpt + 1);
										}
										if (!CRFReport(StrRptNo, SubjId, strdatetime, SubNo, Initials))
										{
											throw new Exception("CRFReport");
										}
										ExecuteDataOnlyonce = 1;

									}
									else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "9") //ECG
									{

										if ((indexrpt + 1) < 10)
										{
											StrRptNo = "0" + Convert.ToString(indexrpt + 1);
										}
										else
										{
											StrRptNo = Convert.ToString(indexrpt + 1);
										}
										if (!ECG(SubjId, ScreeningHdrNo, Gender, SubNo, Initials, strdatetime, StrRptNo))
										{
											throw new Exception("ECG");
										}
									}
									else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "10") //XRAY
									{

										if ((indexrpt + 1) < 10)
										{
											StrRptNo = "0" + Convert.ToString(indexrpt + 1);
										}
										else
										{
											StrRptNo = Convert.ToString(indexrpt + 1);
										}
										if (!XRAY(SubjId, ScreeningHdrNo, Gender, SubNo, Initials, strdatetime, StrRptNo))
										{
											throw new Exception("XRAY");
										}
									}
									else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[1].ToString() != "0")
									{
										if ((indexrpt + 1) < 10)
										{
											StrRptNo = "0" + Convert.ToString(indexrpt + 1);
										}
										else
										{
											StrRptNo = Convert.ToString(indexrpt + 1);
										}
										NodeID = Convert.ToInt32(row.Cells[GVR_ReportId].Text.ToString().Split('#')[1]);
										SubIDForLab = dr["vSubjectIdForLab"].ToString();
										if (!ProjectSpecificLabRpt(SubIDForLab, NodeID, StrRptNo, strdatetime))
										{
											throw new Exception("ProjectSpecificLabRpt");
										}
									}
								}
							}
						}
						if (!MergePdf(SubNo, strdatetime, Initials))
						{
							return;
						}
					}
					catch (Exception ex)
					{
						if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\RptMerge"))
						{
							DocumentsArrayForMissingSubject = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\RptMerge");
							if (DocumentsArrayForMissingSubject.Length > 0)
							{
								for (var i = 0; i < DocumentsArrayForMissingSubject.Length; i++)
								{
									fInfo = new FileInfo(DocumentsArrayForMissingSubject[i]);
									if (fInfo.Exists)
									{
										fInfo.Delete();
									}
								}
							}
						}
						this.ShowErrorMessage(ex.Message.ToString(), "Dossier File Not Generated For '" + SubNo + "'", ex);
					}
				}
				if (!DownloadZip(strdatetime))
				{
					return;
				}




			}
			else if (this.ddlActivityType.SelectedIndex == 1 || this.ddlActivityType.SelectedIndex == 2 || string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()))
			{


				if (string.IsNullOrEmpty(this.HFHeaderLabel.Value.ToString().Trim()))
				{
					return;
				}

				HtmlToPdfConverter pdfconverter = new HtmlToPdfConverter();
				pdfconverter.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
				pdfconverter.PdfDocumentOptions.AvoidImageBreak = true;
				pdfconverter.PdfDocumentOptions.AvoidTextBreak = false;
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.A4;
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.Letter;
				}
				pdfconverter.PdfDocumentOptions.EmbedFonts = true;
				pdfconverter.PdfDocumentOptions.JpegCompressionEnabled = true;
				pdfconverter.PdfDocumentOptions.JpegCompressionLevel = 0;
				pdfconverter.PdfDocumentOptions.PdfCompressionLevel = PdfCompressionLevel.Best;
				pdfconverter.PdfDocumentOptions.LeftMargin = 72;
				pdfconverter.PdfDocumentOptions.RightMargin = 27;
				pdfconverter.PdfDocumentOptions.TopMargin = 27;
				pdfconverter.PdfDocumentOptions.BottomMargin = 5;
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					pdfconverter.HtmlViewerWidth = 662; //'Previous 750, 647
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					pdfconverter.HtmlViewerWidth = 684; //'Previous 750, 647
				}
				pdfconverter.PdfDocumentOptions.FitWidth = false;
				pdfconverter.PdfDocumentOptions.StretchToFit = true;
				pdfconverter.PdfBookmarkOptions.AllowDefaultTitle = true;
				pdfconverter.PdfBookmarkOptions.AutoBookmarksEnabled = true;
				pdfFont = new System.Drawing.Font("Times New Roman", 12, FontStyle.Bold, GraphicsUnit.Point);

				pdfconverter.PdfDocumentOptions.ShowHeader = true;

				string Path = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/"));
				Path = Path + "/images/lambda_logo.jpg";

				//=======================Header
				ds_header = (DataSet)this.ViewState[vs_View_getWorkspaceDetailForHdr];
				projects = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString().Split(':');
				Int32 strLen = projects[0].ToString().LastIndexOf("-");
				ProjectNo = projects[0].ToString();

				if (Convert.ToBoolean(this.ViewState[IsProjectCT]) && strLen > 5)
				{
					ProjectNo = projects[0].Substring(0, strLen);
					strLen = strLen + 1;
					SiteId = projects[0].Substring(strLen);
				}
				headercontent += "<html><head></head><body>";
				headercontent += "<table style=\"margin-top: 2px; margin: auto; border: solid 1px black; width: 100%; font-family:'Times New Roman'; font-size:12px; \"align=\"left\">";
				headercontent += "<tr style=\" \">";
				headercontent += "<td valign=\"top\">";
				headercontent += "<table style=\"font-family: 'Times New Roman'; font-size:12px; \">";
				headercontent += "<tr style=\" \">";
				headercontent += "<td colspan=\"4\">";
				headercontent += "<Label  for \"" + ConfigurationManager.AppSettings["Client"].ToString() + "\">" + ConfigurationManager.AppSettings["Client"].ToString() + "</asp:Label>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				headercontent += "<td colspan=\"4\">";
				headercontent += "Sponsor Name:<Label  for \"" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "\">" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "</asp:Label>";
				headercontent += "</td>";
				headercontent += "</tr >";
				headercontent += "<tr style=\" \">";
				headercontent += "<td align=\"right\" colspan=\"4\" >";
				headercontent += "<h4>";
				headercontent += "CASE REPORT FORM</h4>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				headercontent += "<td align=\"right\">Project No:</td>";
				headercontent += "<td style=\"border: thin solid #000000;\">";
				headercontent += "<Label  for \"" + ProjectNo + "\">" + ProjectNo + "</asp:Label>";
				headercontent += "</td>";
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == true)
				{
					if (!string.IsNullOrEmpty(SiteId.Trim()))
					{
						headercontent += "<td align=\"right\">Site Id:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SiteId + "\">" + SiteId + "</asp:Label>";
						headercontent += "</td>";
					}
				}
				if (this.chkprotocolno.Checked == false)
				{
					if (ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim().Length > 0)
					{
						headercontent += "<td align=\"right\">Protocol No:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "\">" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "</asp:Label>";
						headercontent += "</td>";
					}
				}
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
				{
					if (this.ddlActivityType.SelectedIndex == 2)
					{
						headercontent += "<td align=\"right\">Subject No:</td>";
						headercontent += "<td style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
						headercontent += "</td>";
						if (this.chkinitial.Checked == false)
						{
							headercontent += "<td align=\"right\">Subject Initials:</td>";
							headercontent += "<td  style=\"border: thin solid #000000;\">";
							headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
							headercontent += "</td>";
						}
					}
				}
				else
				{
					if (this.ddlActivityType.SelectedIndex == 2)
					{
						headercontent += "<td align=\"right\">Subject No:</td>";
						headercontent += "<td style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
						headercontent += "</td>";
						if (this.chkinitial.Checked == false)
						{
							headercontent += "<td align=\"right\">Subject Initials:</td>";
							headercontent += "<td  style=\"border: thin solid #000000;\">";
							headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
							headercontent += "</td>";
						}
					}
				}
				headercontent += "</tr>";
				headercontent += "</table>";
				headercontent += "</td>";
				if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
				{
					headercontent += "<td valign=\"middle\">";
					headercontent += "<img id=ctl00_CPHLAMBDA_ImgsponsorLogo alt=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\" src=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
					headercontent += "</td>";
				}
				headercontent += "<td valign=\"middle\">";
				headercontent += "<img id=ctl00_CPHLAMBDA_ImgLogo alt=\"" + Path.ToString() + "\" src=\"" + Path.ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "</table>";
				headercontent += "</body></html>";
				//=============================

				pdfconverter.PdfHeaderOptions.HeaderHeight = 125;
				pdfconverter.PdfDocumentOptions.ShowFooter = true;
				pdfconverter.PdfFooterOptions.FooterHeight = 41; //Previous 50

				d2 = pdfconverter.ConvertHtmlToPdfDocumentObject(this.HFHeaderLabel.Value.ToString(), string.Empty);
				byte[] bytes = null;
				//bytes = pdfconverter.ConvertHtml(Me.HFHeaderLabel.Value.ToString(), String.Empty)
				d2.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\Report\\BlankPage.pdf");
				d2.AutoCloseAppendedDocs = true;
				d2.Close();
				d2 = null;
				bytes = System.IO.File.ReadAllBytes(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\Report\\BlankPage.pdf");

				//Dim fInfo As FileInfo = Nothing
				fInfo = new FileInfo(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\Report\\BlankPage.pdf");
				if (fInfo.Exists)
				{
					fInfo.Delete();
				}

				string DocRemove = string.Empty;
				if (!FindBlankPage(ref DocRemove, bytes))
				{
					objCommon.ShowAlert("Error While Removing Blank Page.Please Generate Report Again! ", this.Page);
//INSTANT C# WARNING: 'Exit Try' statements have no equivalent in C#, so it has been replaced with a 'goto' statement:
//ORIGINAL LINE: Exit Try
					goto ExitLabel1;
				}
				bytes = null;

				HtmlToPdfElement Header1 = new HtmlToPdfElement(headercontent, string.Empty);
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					Header1.HtmlViewerWidth = 662; //'Previous 750, 647
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					Header1.HtmlViewerWidth = 684; //'Previous 750, 647
				}
				Header1.FitWidth = false;
				pdfconverter.PdfHeaderOptions.AddElement(Header1);

				pdfconverter.TableOfContentsOptions.AutoTocItemsEnabled = true;
				string level1TextStyle = "font-family:'Times New Roman'; font-size:16px; text-decoration: underline;";
				pdfconverter.TableOfContentsOptions.SetItemStyle(1, level1TextStyle);

				string level1PageNumberStyle = "padding-right:3px; font-family:'Times New Roman'; font-size:16px; text-decoration: underline; font-weight:bold";
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(1, level1PageNumberStyle);

				if (!string.IsNullOrEmpty(hdnSubSelection.Value.Trim()))
				{
					pdfconverter.PdfFooterOptions.AddElement(new TextElement(0, 15, "[Authenticated By:" + (Session[VS_AuthenticatedBy] == null ? null : Convert.ToString(Session[VS_AuthenticatedBy])) + "]", pdfFont));
					pdfconverter.PdfFooterOptions.AddElement(new TextElement(0, 28, "[Authenticated On:" + (Session[VS_AuthenticatedOn] == null ? null : Convert.ToString(Session[VS_AuthenticatedOn])) + "]", pdfFont));
				}

				pdfconverter.PdfFooterOptions.PageNumberingStartIndex = 0;
				pdfconverter.PdfFooterOptions.AddElement(new LineElement(0, 0, pdfconverter.PdfDocumentOptions.PdfPageSize.Width - pdfconverter.PdfDocumentOptions.LeftMargin - pdfconverter.PdfDocumentOptions.RightMargin, 0));
				TextElement footerText = new TextElement(0, 1, "*This is an electronically authenticated report.                                            Page &p; of &P;                       ", new Font(new FontFamily("Times New Roman"), 12, GraphicsUnit.Point));
				footerText.TextAlign = HorizontalTextAlign.Right;
				footerText.ForeColor = Color.Navy;
				footerText.EmbedSysFont = true;
				pdfconverter.PdfFooterOptions.AddElement(footerText);

				htmlcontent = this.HFHeaderLabel.Value.ToString();
				BtnGeneratePdf.Enabled = false;

				d1 = pdfconverter.ConvertHtmlToPdfDocumentObject(htmlcontent, string.Empty);
				if (this.ddlPrinttype.SelectedValue.ToUpper() == "DRAFT")
				{
					watermarkTextFont = new System.Drawing.Font("Times New Roman", 75, FontStyle.Bold, GraphicsUnit.Point);
					watermarkTextElement = new TextElement(50, 250, strProfileStatus + " Draft Copy", watermarkTextFont);
					watermarkTextElement.ForeColor = System.Drawing.Color.Blue;
					watermarkTextElement.Opacity = 20;
					watermarkTextElement.TextAngle = 45;
					foreach (Winnovative.PdfPage PdfPage in d1.Pages)
					{
						PdfPage.AddElement(watermarkTextElement);
					}
				}

				string[] DocRemove_arry = null;
				if (DocRemove.Length > 0)
				{
					DocRemove_arry = DocRemove.Substring(0, DocRemove.Length - 1).Split(',');
					for (int i = DocRemove_arry.Length - 1; i >= 0; i--)
					{
						d1.Pages.Remove(Convert.ToInt32(DocRemove_arry[i]));
					}
				}

				project = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString();
				d1.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\Report\\02.pdf");
				d1.AutoCloseAppendedDocs = true;
				d1.Close();
				d1 = null;

				if (ddlActivityType.SelectedIndex == 1)
				{
					if (!this.CreateTOC("Generic_Forms_" + project, strdatetime, ""))
					{
						return;
					}
				}
				else
				{
					if (!this.CreateTOC(project, strdatetime, ""))
					{
						return;
					}
				}

				System.IO.FileInfo file = null;

				if (ddlActivityType.SelectedIndex == 1)
				{
					file = new System.IO.FileInfo(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\FinalReportLinear\\" + "Generic_Forms_" + project.ToString() + ".pdf");
				}
				else
				{
					file = new System.IO.FileInfo(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\FinalReportLinear\\" + project + ".pdf");
				}

				System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
				response.Clear();
				response.ContentType = "application/pdf";
				response.AddHeader("content-disposition", "attachment; filename=" + file.Name + "; size=" + file.Length.ToString());
				response.Flush();
				response.TransmitFile(file.FullName);
				response.Flush();
				response.End();

			}

		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message.ToString(), "............BtnGeneratePdf_Click", ex);
		}
		finally
		{
			if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
			{
				fInfo = new FileInfo(strsavelogopath);
				if (fInfo.Exists)
				{
					fInfo.Delete();
				}
			}

			if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime))
			{
				if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\FinalReport"))
				{
					DocumentsArray = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\FinalReport");
					if (DocumentsArray.Length > 0)
					{
						for (var i = 0; i < DocumentsArray.Length; i++)
						{
							fInfo = new FileInfo(DocumentsArray[i]);
							if (fInfo.Exists)
							{
								fInfo.Delete();
							}
						}
					}
				}

				if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\FinalReportLinear"))
				{
					DocumentsArray = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\FinalReportLinear");
					if (DocumentsArray.Length > 0)
					{
						for (var i = 0; i < DocumentsArray.Length; i++)
						{
							fInfo = new FileInfo(DocumentsArray[i]);
							if (fInfo.Exists)
							{
								fInfo.Delete();
							}
						}
					}
				}

				if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\Report"))
				{
					DocumentsArray1 = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\Report");
					if (DocumentsArray1.Length > 0)
					{
						for (var j = 0; j < DocumentsArray1.Length; j++)
						{
							fInfo1 = new FileInfo(DocumentsArray1[j]);
							if (fInfo1.Exists)
							{
								fInfo1.Delete();
							}
						}
					}
				}

				if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\RptMerge"))
				{
					DocumentsArrayForMissingSubject = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\RptMerge");
					if (DocumentsArrayForMissingSubject.Length > 0)
					{
						for (var i = 0; i < DocumentsArrayForMissingSubject.Length; i++)
						{
							fInfo = new FileInfo(DocumentsArrayForMissingSubject[i]);
							if (fInfo.Exists)
							{
								fInfo.Delete();
							}
						}
					}
				}
				if (Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\ZipFiles"))
				{
					DocumentsArrayZipFiles = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strdatetime + "\\ZipFiles");
					if (DocumentsArrayZipFiles.Length > 0)
					{
						for (var i = 0; i < DocumentsArrayZipFiles.Length; i++)
						{
							fInfo = new FileInfo(DocumentsArrayZipFiles[i]);
							if (fInfo.Exists)
							{
								fInfo.Delete();
							}
						}
					}
				}
			}
			this.ViewState[vs_sponsorlogofilepath] = "";
		}
		ExitLabel1: ;
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub btnGo_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGo.Click
	protected void btnGo_Click(object sender, System.EventArgs e)
	{
		DataSet ds_Activity = new DataSet();
		DataSet ds_Report = new DataSet();
		string wstr = "";
		string estr = "";
		DataSet ds_subject = new DataSet();
		DataTable dt_subjectMain = new DataTable();
		string SubjId = "";
		string strMappingRequired = "";
		string strReport = "";

		try
		{

			this.Session[VS_dtMedEx_Fill] = null;
			this.Session[VS_BlankCRF] = "";
			this.Session[vs_dsMsr] = null;
			this.ViewState[vs_strReporttype] = "";
			this.ViewState[VS_ECGXRAY] = null; //ECG XRAY
			if (this.ddlActivityType.SelectedIndex == 2)
			{
				if (!string.IsNullOrEmpty(this.hdnSubSelection.Value.ToString()))
				{

					wstr = " vWorkspaceid = '" + this.HProjectId.Value.ToString() + "' And iMySubjectNo <> 0 And iPeriod = 1 and cstatusindi <> 'D' order by vMySubjectNo";
					if (!objHelp.GetViewWorkspaceSubjectMst(wstr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_subject, ref estr))
					{
						throw new Exception("Error While Getting Data From View_WorkspaceSubjectMst");
					}
					dt_subjectMain = ds_subject.Tables[0].DefaultView.ToTable(true, "vSubjectId,vInitials,iMySubjectNO,vMySubjectNo,vWorkSpaceSubjectID,nMedexScreeningHdrNo,cSex,vProjectNo,vWorkSpaceDesc,cRejectionFlag,vPatientID".Split(','));
					if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
					{
						foreach (System.Data.DataRow dr in dt_subjectMain.Rows)
						{
							if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
							{
								SubjId = dt_subjectMain.Rows[0]["vPatientId"].ToString();
								if (string.IsNullOrEmpty(SubjId.Trim()) || SubjId.Trim().Length < 6)
								{
									strMappingRequired += dr["vSubjectId"].ToString() + "\r\n";
								}
							}
						}
						if (!string.IsNullOrEmpty(strMappingRequired) && Convert.ToBoolean(this.ViewState[IsProjectCT]))
						{
							strMappingRequired = "Mapping of These Subject-Id required for Lab Data!" + "\r\n" + strMappingRequired + "\r\n";
							ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "show", "ShowConfirmation (" + strMappingRequired + ");", true);
						}
					}

				}
				this.ViewState[vs_View_WorkspaceSubjectMst] = dt_subjectMain.Copy();
				foreach (GridViewRow row in gvwReportType.Rows)
				{
					if (row.RowType == DataControlRowType.DataRow)
					{
						if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
						{
							//If row.Cells(GVR_ReportId).Text.ToString().Split("#")(0) = "1" Then      
							//ElseIf row.Cells(GVR_ReportId).Text.ToString().Split("#")(0) = "7" Then
							//    strReport += "SEC Report" + ","
							//End If

							if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "1")
							{
								strReport += "MSR" + ",";
							}
							else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "3")
							{
								strReport += "CRF" + ",";
							}
							else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "4")
							{
								strReport += "eCRF Status History Report" + ",";
							}
							else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "5")
							{
								strReport += "eCRF Data Change Status Report" + ",";
							}
							else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "6")
							{
								strReport += "DCF Report" + ",";
							}
							else if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "7")
							{
								strReport += "SEC Report" + ",";
							}
						}
					}
				}
				if (strReport.Contains(","))
				{
					strReport = strReport.Substring(0, strReport.LastIndexOf(","));
					this.ViewState[vs_strReporttype] = strReport;
				}

			}
			if (!this.GenCall())
			{
				return;
			}

			this.ddlSubject.Enabled = false;

			if (this.RBLselect.SelectedValue.Trim() == "1")
			{
				this.BtnGeneratePdf.Style.Add("display", "none");
				this.BtnGeneratePdf.Enabled = true;
				this.HeaderLabel.Style.Add("display", "block");
			}
			else
			{
				this.HeaderLabel.Style.Add("display", "none");
				this.BtnGeneratePdf.Style.Add("display", "none");
				this.BtnGeneratePdf_Click(sender, e);
			}

		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message, "Error While btnGo_Click. ", ex);
		}
	}

	protected void btnSetProject_Click(object sender, System.EventArgs e)
	{
		string Wstr = string.Empty;
		string[] ActivityparamArry = new string[2];
		DataTable dt_WorkSpaceActivity = new DataTable();
		DataTable dt_WorkSpaceNodes = new DataTable();
		DataTable dt_WorkSpaceNodeDetail = new DataTable();
		DataSet ds_CRFVersionDetail = null;
		DataSet ds_ParentWorkspace = null;
		DataSet ds_Editchecks = null;
		DataSet ds_CrfHdr = null;
		DataSet ds_project = null;
		DataSet ds_Check = null;
		DataSet ds_WorkspaceNodeDetail = null;
		DataView dv_ParentGrid = new DataView();

		try
		{
			this.divActivity.Style.Add("Display", "none");
			this.divReport.Style.Add("Display", "none");
			this.lockdtl.Style.Add("Display", "");
			this.dvheadershow.Style.Add("Display", "none");
			ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "ActivityLocked", "fnSubjectSelection();", true);
			this.ViewState[IsProjectLock] = false;
			this.hdnLock.Value = false.ToString();
			this.ViewState[IsProjectCT] = false;
			this.chkDataType.Checked = false;
			this.chkSubactivityWise.Checked = false;
			Wstr = "vWorkspaceId = '" + this.HProjectId.Value.Trim() + "' And cStatusIndi <> 'D' Order by iTranNo desc";
			if (!this.objHelp.GetCRFLockDtl(Wstr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_Check, ref eStr_Retu))
			{
				throw new Exception(eStr_Retu);
			}

			Wstr = "vWorkspaceId = '" + this.HProjectId.Value.Trim() + "' And cStatusIndi <> 'D'";
			if (!objHelp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", "*", Wstr, ref ds_project, ref eStr_Retu))
			{
				throw new Exception("Error while getting Header information. " + eStr_Retu);
			}

			if (ds_project == null || ds_project.Tables.Count == 0 || ds_project.Tables[0] == null || ds_project.Tables[0].Rows.Count == 0)
			{
				return;
			}

			this.ViewState[vs_View_getWorkspaceDetailForHdr] = ds_project.Copy();
			this.ViewState[IsProjectCT] = (Convert.ToString(ds_project.Tables[0].Rows[0]["vProjectTypeCode"]) == "0014") ? true : false;
			this.lockdtl.Style.Add("display", "");
			if (ds_Check.Tables[0].Rows.Count > 0)
			{

				if (Convert.ToString(ds_Check.Tables[0].Rows[0]["cLockFlag"]).Trim().ToUpper() == "L")
				{
					ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "ActivityLocked", "$(document).ready(function(){pageLoad(); alert('Project Is Locked')});", true);
					ImageLockUnlock.Attributes.Add("src", "images/Freeze.jpg");
					this.ViewState[IsProjectLock] = true;
					this.hdnLock.Value = true.ToString();
					this.ddlPrinttype.Enabled = true;
					this.ddlPrinttype.SelectedIndex = 0;
				}
				else
				{
					ImageLockUnlock.Attributes.Add("src", "images/UnFreeze.jpg");
					this.ViewState[IsProjectLock] = false;
					this.hdnLock.Value = false.ToString();
					this.ddlPrinttype.Enabled = true;
					this.ddlPrinttype.SelectedIndex = 0;
				}
			}
			else
			{
				ImageLockUnlock.Attributes.Add("src", "images/UnFreeze.jpg");

				this.ViewState[IsProjectLock] = false;
				this.hdnLock.Value = false.ToString();
				this.ddlPrinttype.Enabled = true;
				this.ddlPrinttype.SelectedIndex = 0;
			}

			if (!FillPeriod(this.HProjectId.Value, this.ddlPeriod))
			{
				this.ShowErrorMessage("Problem While getting periods for this project", "");
			}

			this.ddlActivityType.Enabled = true;
			this.ddlActivityType.SelectedIndex = 0;
			this.ddlSubject.Items.Clear();
			this.BtnGeneratePdf.Style.Add("display", "none");

			if (!FillReportType())
			{
				return;
			}

		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message, "Error While btnSetProject_Click. ", ex);
		}
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCancel.Click
	protected void btnCancel_Click(object sender, System.EventArgs e)
	{
		this.ResetPage();
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub btnExit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnExit.Click
	protected void btnExit_Click(object sender, System.EventArgs e)
	{
		this.Response.Redirect(System.Configuration.ConfigurationManager.AppSettings["MainPage"] + "frmMainPage.aspx");
	}

#endregion

#region Fill Functions

	private bool FillSubjects()
	{
		string eStr = string.Empty;
		DataSet ds_Subjects = new DataSet();
		string wStr = string.Empty;
		DataView dvData = null;

		try
		{
			if (ddlActivityType.SelectedIndex == 1)
			{
				this.ddlSubject.Items.Insert(0, "0000");
			}
			else
			{
				wStr = "iPeriod=1 and vWorkspaceId = '" + this.HProjectId.Value.Trim() + "' And cStatusIndi <> 'D' order by iMysubjectNo";
				if (!this.objHelp.GetViewWorkspaceSubjectMst(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_Subjects, ref eStr))
				{
					throw new Exception(eStr);
				}
				if (ds_Subjects.Tables[0] != null)
				{

					foreach (DataRow dr in ds_Subjects.Tables[0].Rows)
					{
						dr["FieldToDisplay"] = Convert.ToString(dr["vMySubjectNo"]).Trim() + " (" + Convert.ToString(dr["vInitials"]).Trim() + ")";
					}
					ds_Subjects.AcceptChanges();

					dvData = ds_Subjects.Tables[0].DefaultView;
					dvData.Sort = "iMysubjectNo";

					this.ddlSubject.DataSource = dvData;
					this.ddlSubject.DataTextField = "FieldToDisplay";
					this.ddlSubject.DataValueField = "vSubjectId";
					this.ddlSubject.DataBind();

				}
				for (int count = 0; count < ddlSubject.Items.Count; count++)
				{
					ddlSubject.Items[count].Attributes.Add("title", ddlSubject.Items[count].Text);
				}

			}
			return true;
		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message, "Error While Filling Subjects. ", ex);
			return false;
		}
		finally
		{
			ds_Subjects.Dispose();
		}

	}

	private bool FillPeriod(string VWorkspaceId, DropDownList dropToFill)
	{
		bool tempFillPeriod = false;
		string wStr = "";
		DataSet dsPeriod = new DataSet();
		int iPeriodNumbers = 0;
		try
		{
			if (string.IsNullOrEmpty(VWorkspaceId))
			{
				this.ShowErrorMessage("Problem While Getting vWorkspaceId", "");
				return false;
			}

			wStr = "vWorkspaceId = '" + this.HProjectId.Value.Trim() + "'";
			if (!objHelp.GetWorkspaceProtocolDetail(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref dsPeriod, ref eStr_Retu))
			{
				this.ShowErrorMessage(eStr_Retu, "");
				return tempFillPeriod;
			}

			dropToFill.Items.Clear();
			if (dsPeriod.Tables[0].Rows.Count > 0 && dsPeriod.Tables[0].Rows[0]["iNoOfPeriods"].ToString() != System.DBNull.Value.ToString())
			{
				iPeriodNumbers = Convert.ToInt32(dsPeriod.Tables[0].Rows[0]["iNoOfPeriods"]);
			}

			if (iPeriodNumbers > 0)
			{
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of dsPeriod.Tables(0).Rows(0).Item("iNoOfPeriods") for every iteration:
				int tempVar = Convert.ToInt32(dsPeriod.Tables[0].Rows[0]["iNoOfPeriods"]);
				for (int count = 1; count <= tempVar; count++)
				{
					dropToFill.Items.Add(count.ToString());
				}
			}

			if (dropToFill.Items.Count <= 0)
			{
				dropToFill.Items.Add(Convert.ToString(0));
			}

			if (this.ddlPeriod.Items.Count > 0)
			{
				this.ddlPeriod.Items.Insert(0, "All");
			}
			tempFillPeriod = true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "...FillPeriod()", ex);
		}
		return tempFillPeriod;
	}

	private bool FillReportType()
	{
		DataTable dt_Reports = new DataTable();
		DataTable dt_report = new DataTable();
		try
		{
			if (!GetReportType(ref dt_Reports))
			{
				return false;
			}
			dt_Reports.DefaultView.Sort = "iSeqNo asc";
			dt_Reports.DefaultView.ToTable();
			this.gvwReportType.DataSource = dt_Reports.DefaultView.ToTable();
			this.gvwReportType.DataBind();
			this.ViewState[vs_reporttype] = dt_Reports.DefaultView.ToTable();
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.ToString(), "....FillReportType()", ex);
			return false;
		}
	}

	public bool fillcheckboxlist()
	{
		string wstr_AllActivities = string.Empty;
		string estr = string.Empty;
		DataSet ds_AllActivities = new DataSet();
		DataView dv_AllActivities = new DataView();
		string iPeriod = " AND iPeriod in(";

		try
		{
			if (Convert.ToBoolean(this.ViewState[IsProjectLock]) == true && ddlActivityType.Items[2].Selected)
			{
				this.ddlPeriod.SelectedIndex = 0;
				this.ddlPeriod.Enabled = false;
				for (int i = 1; i < this.ddlPeriod.Items.Count; i++)
				{
					iPeriod += i.ToString() + ",";
				}
				iPeriod = iPeriod.Substring(0, iPeriod.LastIndexOf(",")) + ")";
			}
			else
			{
				if (this.ddlPeriod.SelectedIndex == 0)
				{
					for (int i = 1; i <= this.ddlPeriod.Items.Count; i++)
					{
						iPeriod += i.ToString() + ",";
					}
					iPeriod = iPeriod.Substring(0, iPeriod.LastIndexOf(",")) + ")";
				}
				else
				{
					iPeriod += this.ddlPeriod.Text.ToString() + ")";
				}
			}
			//*************added for subject specific or generic Activities
			if (ddlActivityType.Items[1].Selected)
			{
				wstr_AllActivities = "vWorkSpaceId='" + this.HProjectId.Value.Trim() + "'" + iPeriod + "And cSubjectWiseFlag<>'Y' And cstatusIndi <> 'D' And IsNull(vTemplateId,'') <> '0001'   Order by iPeriod ,iNodeid"; //And ccloneFlag='H'" OR  vActivityId in ('1100','1037','1088')"
			}
			else if (ddlActivityType.Items[2].Selected)
			{
				wstr_AllActivities = "vWorkSpaceId='" + this.HProjectId.Value.Trim() + "'" + iPeriod + "And cSubjectWiseFlag='Y' And cstatusIndi <> 'D' And IsNull(vTemplateId,'') <> '0001' Order by iPeriod ,iNodeid"; //And ccloneFlag='H'" OR  vActivityId in ('1100','1037','1088')"
			}
			else if (ddlActivityType.Items[0].Selected)
			{
				return false;
			}

			if (!objHelp.GetViewWorkSpaceNodeDetail(wstr_AllActivities, ref ds_AllActivities, ref estr))
			{
				this.objCommon.ShowAlert("Error while getting data from workspacenodedetail", this.Page);
				return false;
			}

			ds_AllActivities.Tables[0].Columns.Add("ChildActivityWithParent&Period");
			ds_AllActivities.AcceptChanges();

			foreach (DataRow dr in ds_AllActivities.Tables[0].Rows)
			{
				dr["ChildActivityWithParent&Period"] = dr["vNodeDisplayName"].ToString() + " (Period - " + Convert.ToString(dr["iPeriod"]) + ")";
				if (Convert.ToInt32(dr["iParentNodeId"]) > 1)
				{
					dr["ChildActivityWithParent&Period"] = dr["vNodeDisplayName"].ToString() + " (" + dr["ParentActivityName"].ToString() + ") (Period - " + Convert.ToString(dr["iPeriod"]) + ")";
				}
			}
			ds_AllActivities.AcceptChanges();

			dv_AllActivities = ds_AllActivities.Tables[0].DefaultView;
			dv_AllActivities.ToTable().AcceptChanges();
			dv_AllActivities.Sort = "iNodeId";

			this.gvwActivity.DataSource = dv_AllActivities;
			this.gvwActivity.DataBind();

			return true;

		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While Filling Activities. ", ex);
			return false;
		}
		finally
		{
			ds_AllActivities.Dispose();
			dv_AllActivities.Dispose();
		}

	}

	public bool fillActivityGrid()
	{
		string wstr_AllActivities = string.Empty;
		string estr = string.Empty;
		DataSet ds_AllActivities = new DataSet();
		DataView dv_AllActivities = new DataView();
		string iPeriod = " AND iPeriod in(";

		try
		{
			if (this.ddlPeriod.SelectedIndex == 0)
			{
				for (int i = 1; i <= this.ddlPeriod.Items.Count; i++)
				{
					iPeriod += i.ToString() + ",";
				}
				iPeriod = iPeriod.Substring(0, iPeriod.LastIndexOf(",")) + ")";
			}
			else
			{
				iPeriod += this.ddlPeriod.Text.ToString() + ")";
			}
			//End If
			//*************added for subject specific or generic Activities
			if (ddlActivityType.Items[1].Selected)
			{
				wstr_AllActivities = "vWorkSpaceId='" + this.HProjectId.Value.Trim() + "'" + iPeriod + "And cSubjectWiseFlag<>'Y' And cstatusIndi <> 'D' And IsNull(vTemplateId,'') <> '0001'   Order by iPeriod ,iNodeid"; //And ccloneFlag='H'" OR  vActivityId in ('1100','1037','1088')"
			}
			else if (ddlActivityType.Items[2].Selected)
			{
				wstr_AllActivities = "vWorkSpaceId='" + this.HProjectId.Value.Trim() + "'" + iPeriod + "And cSubjectWiseFlag='Y' And cstatusIndi <> 'D' And IsNull(vTemplateId,'') <> '0001' Order by iPeriod ,iNodeid"; //And ccloneFlag='H'" OR  vActivityId in ('1100','1037','1088')"
			}

			if (!objHelp.GetViewWorkSpaceNodeDetail(wstr_AllActivities, ref ds_AllActivities, ref estr))
			{
				this.objCommon.ShowAlert("Error while getting data from workspacenodedetail", this.Page);
				return false;
			}

			ds_AllActivities.Tables[0].Columns.Add("ChildActivityWithParent&Period");
			ds_AllActivities.AcceptChanges();

			foreach (DataRow dr in ds_AllActivities.Tables[0].Rows)
			{
				dr["ChildActivityWithParent&Period"] = dr["vNodeDisplayName"].ToString() + " (Period - " + Convert.ToString(dr["iPeriod"]) + ")";
				if (Convert.ToInt32(dr["iParentNodeId"]) > 1)
				{
					dr["ChildActivityWithParent&Period"] = dr["vNodeDisplayName"].ToString() + " (" + dr["ParentActivityName"].ToString() + ") (Period - " + Convert.ToString(dr["iPeriod"]) + ")";
				}
			}
			ds_AllActivities.AcceptChanges();

			dv_AllActivities = ds_AllActivities.Tables[0].DefaultView;
			dv_AllActivities.ToTable().AcceptChanges();
			dv_AllActivities.Sort = "iNodeId";
			this.ViewState[VS_Activity] = dv_AllActivities.ToTable();
			this.gvwActivity.DataSource = dv_AllActivities;
			this.gvwActivity.DataBind();

			return true;

		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While Filling Activities. ", ex);
			return false;
		}
		finally
		{
			ds_AllActivities.Dispose();
			dv_AllActivities.Dispose();
		}
	}

	public bool GetBlankpage(ref Document d1, Document d2)
	{
		byte[] bytes = null;
		string DocRemove = string.Empty;
		string[] DocRemove_arry = null;
		try
		{
			bytes = d2.Save();
			iTextSharp.text.pdf.PdfReader oreader = new iTextSharp.text.pdf.PdfReader(bytes);

			using (MemoryStream stream = new MemoryStream())
			{
				iTextSharp.text.pdf.PdfReader reader = new iTextSharp.text.pdf.PdfReader(bytes);
				bytes = null;
				using (iTextSharp.text.pdf.PdfStamper stamper = new iTextSharp.text.pdf.PdfStamper(reader, stream))
				{
					for (int i = 1; i <= reader.NumberOfPages; i++)
					{
						object sOut = "";
						iTextSharp.text.pdf.parser.LocationTextExtractionStrategy its = new iTextSharp.text.pdf.parser.LocationTextExtractionStrategy();
						sOut = iTextSharp.text.pdf.parser.PdfTextExtractor.GetTextFromPage(oreader, i, its);
						if (Convert.ToString(sOut) == "")
						{
							DocRemove += (i - 1).ToString() + ",";
						}
					}
				}
				stream.Dispose();
			}

			if (DocRemove.Length > 0)
			{
				DocRemove_arry = DocRemove.Substring(0, DocRemove.Length - 1).Split(',');
				for (int i = DocRemove_arry.Length - 1; i >= 0; i--)
				{
					d1.Pages.Remove(Convert.ToInt32(DocRemove_arry[i]));
				}
			}
			return true;

		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While Get Blank Page! ", ex);
			return false;
		}
		finally
		{
		}
	}

	public bool FindBlankPage(ref string DocRemove, byte[] bytes)
	{
		try
		{
			iTextSharp.text.pdf.PdfReader oreader = new iTextSharp.text.pdf.PdfReader(bytes);
			using (MemoryStream stream = new MemoryStream())
			{
				iTextSharp.text.pdf.PdfReader reader = new iTextSharp.text.pdf.PdfReader(bytes);
				bytes = null;
				for (int i = 1; i <= reader.NumberOfPages; i++)
				{
					object sOut = "";
					iTextSharp.text.pdf.parser.LocationTextExtractionStrategy its = new iTextSharp.text.pdf.parser.LocationTextExtractionStrategy();
					sOut = iTextSharp.text.pdf.parser.PdfTextExtractor.GetTextFromPage(oreader, i, its);
					if (Convert.ToString(sOut) == "")
					{
						DocRemove += (i - 1).ToString() + ",";
					}
				}
				stream.Dispose();
			}
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While Get Blank Page! ", ex);
			return false;
		}
		finally
		{
		}
	}

#endregion

#region DropDown Selected Index Changed

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub ddlActivityType_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ddlActivityType.SelectedIndexChanged
	protected void ddlActivityType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		try
		{
			this.ddlPeriod.Enabled = true;
			this.ddlSubject.Enabled = true;
			this.ddlSubject.Items.Clear();
			if (!(ddlActivityType.SelectedIndex == 0))
			{
				this.dvheadershow.Style.Add("display", "");
				if (!this.fillActivityGrid())
				{
					return;
				}

				if (!this.FillSubjects())
				{
					return;
				}

				if (ddlActivityType.SelectedIndex == 2)
				{
					this.divActivity.Style.Add("Display", "");
					this.gvwActivity.Columns[GVA_Rearrange].Visible = false;
					this.divReport.Style.Add("Display", "");
				}
				else
				{
					this.divActivity.Style.Add("Display", "");
					this.gvwActivity.Columns[GVA_Rearrange].Visible = true;
					this.divReport.Style.Add("Display", "none");
				}
				this.dvheadershow.Style.Add("Display", "nonoe");
				if (this.RBLselect.SelectedValue.Trim() == "0")
				{
					if (this.ddlActivityType.SelectedIndex == 2)
					{
						this.dvheadershow.Style.Add("Display", "");
					}
				}
			}
			else
			{
				this.divActivity.Style.Add("Display", "none");
				this.divReport.Style.Add("Display", "none");
				this.dvheadershow.Style.Add("display", "none");
			}

			this.BtnGeneratePdf.Style.Add("display", "none");
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error while ddlActivityType_SelectedIndexChanged", ex);
		}
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub ddlPeriod_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ddlPeriod.SelectedIndexChanged
	protected void ddlPeriod_SelectedIndexChanged(object sender, EventArgs e)
	{
		try
		{
			this.BtnGeneratePdf.Style.Add("Display", "none");

			if (this.ddlActivityType.SelectedIndex != 0)
			{
				fillActivityGrid();
			}
		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message, ".....ddlPeriod_SelectedIndexChanged", ex);
		}
	}

#endregion

#region Grid Events

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub gvwReportType_RowCommand(sender As Object, e As GridViewCommandEventArgs) Handles gvwReportType.RowCommand
	protected void gvwReportType_RowCommand(object sender, GridViewCommandEventArgs e)
	{
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub gvwReportType_RowCreated(sender As Object, e As GridViewRowEventArgs) Handles gvwReportType.RowCreated
	protected void gvwReportType_RowCreated(object sender, GridViewRowEventArgs e)
	{
		e.Row.Cells[GVR_NodeID].Style.Add("Display", "none");
		e.Row.Cells[GVR_ReportId].Style.Add("Display", "none");
		e.Row.Cells[GVR_ReportType].Style.Add("Display", "none");
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub gvwReportType_RowDataBound(sender As Object, e As GridViewRowEventArgs) Handles gvwReportType.RowDataBound
	protected void gvwReportType_RowDataBound(object sender, GridViewRowEventArgs e)
	{
		if (e.Row.RowType == DataControlRowType.DataRow)
		{
			e.Row.CssClass = "SaveReport";
			e.Row.Cells[GVR_SRNo].Text = (e.Row.RowIndex + 1).ToString();
		}
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub gvwActivity_RowCommand(sender As Object, e As GridViewCommandEventArgs) Handles gvwActivity.RowCommand
	protected void gvwActivity_RowCommand(object sender, GridViewCommandEventArgs e)
	{
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub gvwActivity_RowCreated(sender As Object, e As GridViewRowEventArgs) Handles gvwActivity.RowCreated
	protected void gvwActivity_RowCreated(object sender, GridViewRowEventArgs e)
	{

		e.Row.Cells[GVA_NodeID].Style.Add("Display", "none");

	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub gvwActivity_RowDataBound(sender As Object, e As GridViewRowEventArgs) Handles gvwActivity.RowDataBound
	protected void gvwActivity_RowDataBound(object sender, GridViewRowEventArgs e)
	{
		if (e.Row.RowType == DataControlRowType.DataRow)
		{
			e.Row.CssClass = "SaveActivity";
			e.Row.Cells[GVA_SRNo].Text = (e.Row.RowIndex + 1).ToString();
		}
	}

#endregion

#region Get Functions For CRF
	private DataTable CRFReportStatusHistoryReport(string rptno, string SubjectId, string foldername, string SubjectNo, string SubjectInitial)
	{

		string wstr_FetchDetails = string.Empty;
		DataTable dtCRFWorkFlowHistory = new DataTable();
		DataSet ds_CRFWorkFlowHistory = new DataSet();

		//Added by Kruti Salot
		// Below Code to fetch Data for ECRF Status History

		wstr_FetchDetails = "vWorkSpaceId = '" + this.HProjectId.Value.Trim() + "'";
		wstr_FetchDetails += " And vSubjectId in ('" + SubjectId + "')";
		wstr_FetchDetails += " Order by iTranNo";

		if (!this.objHelp.View_CRFWorkFlowDtl(wstr_FetchDetails, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_CRFWorkFlowHistory, ref eStr_Retu))
		{
			throw new Exception(eStr_Retu);
		}

		if (ds_CRFWorkFlowHistory != null)
		{
			if (ds_CRFWorkFlowHistory.Tables.Count > 0)
			{
				dtCRFWorkFlowHistory = ds_CRFWorkFlowHistory.Tables[0];
			}
		}

		return dtCRFWorkFlowHistory;
		//End by Kruti Salot
	}
	private DataTable CRFReportDatachangeHistoryReport(string rptno, string SubjectId, string foldername, string SubjectNo, string SubjectInitial)
	{

		string wstr_FetchDetails = string.Empty;
		DataTable dtCRFWorkFlowHistory = new DataTable();
		DataSet ds_CRFDataChangeHistory = new DataSet();
		DataTable dtCRFDataChangeHistory = new DataTable();

		//Added by Kruti Salot
		// Below Code to fetch Data for ECRF Data Change Status History

		wstr_FetchDetails = "vWorkSpaceId = '" + this.HProjectId.Value.Trim() + "'";
		wstr_FetchDetails += " And vSubjectId in ('" + SubjectId + "')";
		wstr_FetchDetails = wstr_FetchDetails + " Order by [Period],iNodeNo,[iNodeId],vMedExGroupCode,vMedExSubGroupCode,iSeqNo,[Repeat No],vActivityId,vSubjectId,[Attribute Name],[Transaction No],[Modify On]";

		this.objHelp.Timeout = 300000;
		if (!objHelp.GetFieldsOfTable("View_CRFDetailedReport_WithAuditTrail", "*", wstr_FetchDetails, ref ds_CRFDataChangeHistory, ref eStr_Retu))
		{
			throw new Exception(eStr_Retu);
		}


		if (ds_CRFDataChangeHistory != null)
		{
			if (ds_CRFDataChangeHistory.Tables.Count > 0)
			{
				dtCRFDataChangeHistory = ds_CRFDataChangeHistory.Tables[0];
			}
		}

		return dtCRFDataChangeHistory;
		//End by Kruti Salot

	}
	private DataTable CRFVersionHistoryReport(string rptno, string SubjectId, string foldername, string SubjectNo, string SubjectInitial)
	{
		string wstr2 = string.Empty;
		DataTable dtCRFWorkFlowHistory = new DataTable();
		DataSet dsCRFVersionReport = new DataSet();
		DataSet dsWorkSpaceId = new DataSet();
		DataTable dtCRFVersionReport = new DataTable();
		string Wstr = string.Empty;

		//Added by Kruti Salot 
		// Below Code to fetch data for CRF History Version Report

		wstr2 = "vWorkSpaceId = '" + this.HProjectId.Value.Trim().ToString() + "'";
		objHelp.Timeout = -1;
		if (!objHelp.getworkspacemst(wstr2, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref dsWorkSpaceId, ref eStr_Retu))
		{
			throw new Exception("Error While Geting Whole Detail Of CRF Version");
		}

		if (dsWorkSpaceId == null)
		{
			return null;
		}

		if (dsWorkSpaceId.Tables.Count == 0)
		{
			return null;
		}

		if (dsWorkSpaceId.Tables[0].Rows.Count > 0)
		{

			object WorkspaceId = string.Empty;
			if (string.IsNullOrEmpty(dsWorkSpaceId.Tables[0].Rows[0]["vParentWorkSpaceId"].ToString()))
			{
				WorkspaceId = dsWorkSpaceId.Tables[0].Rows[0]["vWorkSpaceId"].ToString();
			}
			else
			{
				WorkspaceId = dsWorkSpaceId.Tables[0].Rows[0]["vParentWorkSpaceId"].ToString();
			}

			if (!string.IsNullOrEmpty(WorkspaceId.ToString()))
			{
				Wstr = WorkspaceId.ToString() + "##" + "1";

				if (!objHelp.Proc_cdc_dbo_CRFVersionMst_CT(Wstr, ref dsCRFVersionReport, ref eStr_Retu))
				{
					throw new Exception("Error While Geting Whole Detail Of CRF Version");
				}


				if (dsCRFVersionReport != null)
				{
					if (dsCRFVersionReport.Tables.Count > 0)
					{
						dtCRFVersionReport = dsCRFVersionReport.Tables[0];
					}
				}

			}

		}

		return dtCRFVersionReport;
	}
	private DataTable ODMStatusReport(string rptno, string SubjectId, string foldername, string SubjectNo, string SubjectInitial)
	{
		string wstr_FetchDetails = string.Empty;
		DataTable dtCRFWorkFlowHistory = new DataTable();
		DataSet ds_ODMStatusReport = new DataSet();
		DataTable dtODMStatusReport = new DataTable();

		//Added by Kruti Salot
		// Below Code to fetch Data for ODM status Report

		wstr_FetchDetails = "" + this.HProjectId.Value.Trim().ToString() + "##" + SubjectId.ToString() + "##Y####" + DateTime.Today.Date.AddDays(1).ToString("dd-MMM-yyyy").ToString() + "##########-1##";
		ds_ODMStatusReport = objHelp.ProcedureExecute("Proc_ODMSTATUSREPORT", wstr_FetchDetails);


		if (ds_ODMStatusReport != null)
		{
			if (ds_ODMStatusReport.Tables.Count > 0)
			{
				dtODMStatusReport = ds_ODMStatusReport.Tables[0];
			}
		}

		//End Kruti
		return dtODMStatusReport;
	}
	private DataTable DCFReport(string rptno, string SubjectId, string foldername, string SubjectNo, string SubjectInitial)
	{
		string wstr_FetchDetails = string.Empty;
		DataTable dtCRFWorkFlowHistory = new DataTable();
		DataSet dsDCFStatusReport = new DataSet();
		DataTable dtDCFStatusReport = new DataTable();

		//Added by Kruti Salot
		// Below Code to fetch Data for DCF status Report

		wstr_FetchDetails = "" + this.HProjectId.Value.Trim().ToString() + "##" + SubjectId.ToString() + "##Y####" + DateTime.Today.Date.AddDays(1).ToString("dd-MMM-yyyy").ToString() + "##########-1####";
		dsDCFStatusReport = objHelp.ProcedureExecute("Proc_DiscrepancyStatusReport", wstr_FetchDetails);

		if (dsDCFStatusReport != null)
		{
			if (dsDCFStatusReport.Tables.Count > 0)
			{
				dtDCFStatusReport = dsDCFStatusReport.Tables[0];
			}
		}

		return dtDCFStatusReport;
		//End Kruti
	}


#endregion

#region GET Functions for MSR
	private DataTable MSRReportVersionHistoryReport(string SubjectId)
	{

		string Wstr = string.Empty;
		DataSet dsMSRVersionReport = new DataSet();
		string wstr_FetchDetails = string.Empty;
		DataTable dtMSRVersionReport_Proc_Specific = new DataTable();
		DataTable dtMSRVersionReport = new DataTable();
		DataTable dtMSRVersionReport_Generic_Specific = new DataTable();
		DataTable dt_Final = new DataTable();
		DataView dvMSRVersionReport_Proc_Specific = new DataView();
		DataView dvMSRVersionReport_Generic_Specific = new DataView();
		DataSet dsMSRVersionReport_Proc_Specific = new DataSet();
		DataSet dsMSRVersionReport_Generic_Specific = new DataSet();
		string Columns = "CreatedDate,nVersionNo,cFreezeStatus,STATUS,dVersiondate,vFirstName,vRemark,dModifyOn,History_No";
		int IS_VersionFound = 0;

		// Below Code to fetch Generic screening Version Master 

		Wstr = SubjectId.ToString() + "##" + this.HProjectId.Value.Trim().ToString();
		dsMSRVersionReport_Generic_Specific = objHelp.ProcedureExecute("Proc_GetMSRVersionMst_Generic_Dossier_Report", Wstr);

		if (dsMSRVersionReport_Generic_Specific != null)
		{
			if (dsMSRVersionReport_Generic_Specific.Tables.Count > 0)
			{
				if (dsMSRVersionReport_Generic_Specific.Tables[0].Rows.Count > 0)
				{
					dvMSRVersionReport_Generic_Specific = dsMSRVersionReport_Generic_Specific.Tables[0].Copy().DefaultView.ToTable(true, Columns.ToString().Split(',')).DefaultView;
					dtMSRVersionReport_Generic_Specific = dvMSRVersionReport_Generic_Specific.ToTable();
					dtMSRVersionReport.Merge(dtMSRVersionReport_Generic_Specific);
					IS_VersionFound += 1;
				}
			}
		}

		// Below Code to fetch Project Specific screening Version Master       

		if (IS_VersionFound == 0) // If for Specific Project,
		{
			Wstr = SubjectId.ToString() + "##" + this.HProjectId.Value.Trim().ToString();
			dsMSRVersionReport_Proc_Specific = objHelp.ProcedureExecute("Proc_GetMSRVersionMst_ProjSpecific_Dossier_Report", Wstr);

			if (dsMSRVersionReport_Proc_Specific != null)
			{
				if (dsMSRVersionReport_Proc_Specific.Tables.Count > 0)
				{
					if (dsMSRVersionReport_Proc_Specific.Tables[0].Rows.Count > 0)
					{
						dvMSRVersionReport_Proc_Specific = dsMSRVersionReport_Proc_Specific.Tables[0].Copy().DefaultView.ToTable(true, Columns.ToString().Split(',')).DefaultView;
						dtMSRVersionReport_Proc_Specific = dvMSRVersionReport_Proc_Specific.ToTable();
						dtMSRVersionReport.Merge(dtMSRVersionReport_Proc_Specific);
						IS_VersionFound += 1;
					}
				}
			}
		}

		if (IS_VersionFound == 0)
		{
			return null;
		}
		else
		{
			return dtMSRVersionReport;
		}

		return dtMSRVersionReport;
	}
	private DataTable MSRDCFReport(string SubjectId)
	{
		try
		{
			string wstr_FetchDetails = string.Empty;
			DataTable dtMSRDCFReport_Proc_Specific = new DataTable();
			DataTable dtMSRDCFReport = new DataTable();
			DataTable dtMSRDCFReport_Generic_Specific = new DataTable();
			DataTable dt_Final = new DataTable();
			DataView dvMSRDCFReport_Proc_Specific = new DataView();
			DataView dvMSRDCFReport_Generic_Specific = new DataView();
			DataSet dsMSRDCFReport_Proc_Specific = new DataSet();
			DataSet dsMSRDCFReport_Generic_Specific = new DataSet();

			string Columns = "nScreeningDCFNo,vProjectNo,GroupName,vSubjectId,ScreenDate,Attribute,vDiscrepancy,cDcfType,Query,STATUS,DCFCreatedby,DCFCreatedDate,ModifyValue,ModifyDate,ModifyBy,ModifyRemarks,DCFRemarks,DCFUpdatedOn,DataEntryBy,vMedExGroupCode,iDCFBy,DCFWORKFLOW,DCFUserType,dScreenDate";
			int IS_DCFFound = 0;

			// Below Code to fetch Generic screening DCF 
			wstr_FetchDetails = "" + SubjectId.ToString() + "######0##0##0##0##00000000##";
			dsMSRDCFReport_Generic_Specific = objHelp.ProcedureExecute("Proc_ScreeningDCFReport", wstr_FetchDetails);

			if (dsMSRDCFReport_Generic_Specific != null)
			{
				if (dsMSRDCFReport_Generic_Specific.Tables.Count > 0)
				{
					if (dsMSRDCFReport_Generic_Specific.Tables[0].Rows.Count > 0)
					{
						dvMSRDCFReport_Generic_Specific = dsMSRDCFReport_Generic_Specific.Tables[0].Copy().DefaultView.ToTable(true, Columns.ToString().Split(',')).DefaultView;
						dtMSRDCFReport_Generic_Specific = dvMSRDCFReport_Generic_Specific.ToTable();
						dtMSRDCFReport.Merge(dtMSRDCFReport_Generic_Specific);
						IS_DCFFound += 1;
					}
				}
			}

			// Below Code to fetch Project Specific screening DCF 

			if (IS_DCFFound == 0)
			{
				wstr_FetchDetails = "" + SubjectId.ToString() + "######0##0##0##0##" + this.HProjectId.Value.Trim().ToString() + "##";
				dsMSRDCFReport_Proc_Specific = objHelp.ProcedureExecute("Proc_ProjectScreeningDCFReport", wstr_FetchDetails);

				if (dsMSRDCFReport_Proc_Specific != null)
				{
					if (dsMSRDCFReport_Proc_Specific.Tables.Count > 0)
					{
						if (dsMSRDCFReport_Proc_Specific.Tables[0].Rows.Count > 0)
						{
							dvMSRDCFReport_Proc_Specific = dsMSRDCFReport_Proc_Specific.Tables[0].Copy().DefaultView.ToTable(true, Columns.ToString().Split(',')).DefaultView;
							dtMSRDCFReport_Proc_Specific = dvMSRDCFReport_Proc_Specific.ToTable();
							dtMSRDCFReport.Merge(dtMSRDCFReport_Proc_Specific);
							IS_DCFFound += 1;
						}
					}
				}

			}

			if (IS_DCFFound == 0)
			{
				return null;
			}
			else
			{
				return dtMSRDCFReport;
			}
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....MSRDCFReport", ex);
		}

//INSTANT C# NOTE: Inserted the following 'return' since all code paths must return a value in C#:
		return null;
	}
	private DataTable MSRAdditionalDetailsReport(string SubjectId)
	{
		string wstr_FetchDetails = string.Empty;
		DataSet ds_Additionaldata = new DataSet();
		DataTable dt_AdditionalTestdata = new DataTable();

		// Below Condition will be uncommented in 7.2 Version
		//wstr_FetchDetails = "SELECT *  FROM  View_Get_AdditionalTest_Details_For_Dossier_Report WHERE vWorkspaceid='" + Me.HProjectId.Value.Trim().ToString + "' And vSubjectId='" + SubjectId + "' And cStatusindi <> 'D' AND vMedexType<>'Import' ORDER BY ScreeningType,iSeqno,vMedExGroupCode"

		//ds_Additionaldata = objHelp.GetResultSet(wstr_FetchDetails, "View_Get_AdditionalTest_Details_For_Dossier_Report")

		//If Not ds_Additionaldata Is Nothing Then
		//    If ds_Additionaldata.Tables.Count > 0 Then
		//        If ds_Additionaldata.Tables(0).Rows.Count > 0 Then
		//            Return ds_Additionaldata.Tables(0)
		//        End If
		//    End If
		//End If

		return null;

	}
	private DataTable MSRReviewHistoryReport(string SubjectId)
	{

		string wstr_FetchDetails = string.Empty;
		DataTable dtMSRReviewReport_Proc_Specific = new DataTable();
		DataTable dtMSRReviewReport = new DataTable();
		DataTable dtMSRReviewReport_Generic_Specific = new DataTable();
		DataTable dt_Final = new DataTable();
		DataView dvMSRReviewReport_Proc_Specific = new DataView();
		DataView dvMSRReviewReport_Generic_Specific = new DataView();
		DataSet dsMSRReviewHistoryReport_Proc_Specific = new DataSet();
		DataSet dsMSRReviewHistoryReport_Generic_Specific = new DataSet();

		string Columns = "nScreeningDCFNo,vProjectNo,GroupName,vSubjectId,ScreenDate,Attribute,vDiscrepancy,cDcfType,Query,STATUS,DCFCreatedby,DCFCreatedDate,ModifyValue,ModifyDate,ModifyBy,ModifyRemarks,DCFRemarks,DCFUpdatedOn,DataEntryBy,vMedExGroupCode,iDCFBy,DCFWORKFLOW,DCFUserType,dScreenDate";
		int IS_ReviewFound = 0;

		// Below Code to fetch Generic screening Review History Report 
		wstr_FetchDetails = "SELECT vMedExCode,vMedExDesc,vMedExGroupCode,vMedExGroupDesc,vMedExSubGroupCode,vMedExSubGroupDesc,vMedExType,vUOM,vMedExValues,vDefaultValue," + " vMedExResult  FROM  View_Get_MSRReviewHistory_Generic_Dossier_Report  WHERE vMedExGroupDesc  = 'Screening Review' And  vWorkspaceid='" + this.HProjectId.Value.Trim().ToString() + "' And vSubjectId='" + SubjectId + "' And cStatusindi <> 'D' AND vMedexType<>'Import' ORDER BY ScreeningType,iSeqno,vMedExGroupCode";

		dsMSRReviewHistoryReport_Generic_Specific = objHelp.GetResultSet(wstr_FetchDetails, "View_Get_MSRReviewHistory_Generic_Dossier_Report");
		if (dsMSRReviewHistoryReport_Generic_Specific != null)
		{
			if (dsMSRReviewHistoryReport_Generic_Specific.Tables.Count > 0)
			{
				if (dsMSRReviewHistoryReport_Generic_Specific.Tables[0].Rows.Count > 0)
				{
					dtMSRReviewReport.Merge(dsMSRReviewHistoryReport_Generic_Specific.Tables[0]);
					IS_ReviewFound += 1;
				}
			}
		}

		// Below Code to fetch Project Specific screening Review History 
		if (IS_ReviewFound == 0)
		{
			wstr_FetchDetails = " SELECT vMedExCode,vMedExDesc,vMedExGroupCode,vMedExGroupDesc,vMedExSubGroupCode,vMedExSubGroupDesc,vMedExType,vUOM,vMedExValues,vDefaultValue,vMedExResult " + " FROM  View_Get_MSRReviewHistory_ProjSpecific_Dossier_Report  WHERE vMedExGroupDesc  = 'Screening Review' And vWorkspaceid='" + this.HProjectId.Value.Trim().ToString() + "' And vSubjectId='" + SubjectId.ToString() + "' And cStatusindi <> 'D'" + " AND vMedexType<>'Import'" + " ORDER BY ScreeningType,iSeqno,vMedExGroupCode";

			dsMSRReviewHistoryReport_Proc_Specific = objHelp.GetResultSet(wstr_FetchDetails, "View_Get_MSRReviewHistory_ProjSpecific_Dossier_Report");

			if (dsMSRReviewHistoryReport_Proc_Specific != null)
			{
				if (dsMSRReviewHistoryReport_Proc_Specific.Tables.Count > 0)
				{
					if (dsMSRReviewHistoryReport_Proc_Specific.Tables[0].Rows.Count > 0)
					{
						dtMSRReviewReport.Merge(dsMSRReviewHistoryReport_Proc_Specific.Tables[0]);
						IS_ReviewFound += 1;
					}
				}
			}
		}

		if (IS_ReviewFound == 0)
		{
			return null;
		}
		else
		{
			return dtMSRReviewReport;
		}

	}

#endregion

#region Report for PDF

	private bool MsrReport(string SubjectId, string ScreeningHdrNo, string Sex, string RptNo, string foldername, string SubjectNo, string SubjectInitial)
	{
		var wStr = "";
		var ProjectNo = "";
		var SiteId = "";
		object strProfileStatus = "";
		string headercontent = string.Empty;
		string eStr = string.Empty;
		DataSet ds_header = new DataSet();
		object objelement = null;
		PlaceHolder PlaceHolder_msrPrint = new PlaceHolder();
		System.Drawing.Font watermarkTextFont = null;
		TextElement watermarkTextElement = null;
		string[] Project = null;
		System.Drawing.Font pdfFont = null;
		Document d1 = null;
		DataView dvmsr = null;
		DataView dvmsrgroup = null;
		DataView dvmedex = null;
		DataView dvmsrsubgroup = null;
		DataTable dt_group = new DataTable();
		DataTable dt_MedexScreeningHdrDtl = new DataTable();
		DataTable dt_screening = new DataTable();
		DataTable dt_group1 = new DataTable();
		DataTable dt_subgroup = new DataTable();
		DataTable dtMSRVersionReport = new DataTable();
		DataTable dtMSRDCFReport = new DataTable();
		DataTable dtMSRDataHistoryReport = new DataTable();
		DataTable dtMSRAdditionalDetailsReport = new DataTable();
		Document d2 = null;
		DataView dvmsr_Addtional_data = new DataView();
		DataView dvmsr_Addtional_data_Review_history = new DataView();
		DataTable dt_screening_addtional_Data = new DataTable();
		DataTable dt_screening_addtional_Data_Review_History = new DataTable();
		int IS_MSR_Data_To_Be_bind = 0;

		try
		{
			if (string.IsNullOrEmpty(ScreeningHdrNo))
			{
				this.objCommon.ShowAlert("No Screening Assingment has been done for Subject " + SubjectId, this.Page);
				return true;
			}


			dt_MedexScreeningHdrDtl = (DataTable)this.Session[vs_dsMsr];
			if (dt_MedexScreeningHdrDtl != null)
			{
				dvmsr = dt_MedexScreeningHdrDtl.Copy().DefaultView;
				dvmsr.Sort = "ScreeningType,iSeqNo asc";

				if (Sex.ToUpper().Trim() == "M")
				{
					dvmsr.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjectId + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo + "   And vMedexGroupcode not in ('00037','00009')";
				}
				else
				{
					dvmsr.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjectId + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo + "   And vMedexGroupcode  <> '00009'";
				}

				dt_screening = dvmsr.ToTable().Copy();
			}


			dtMSRVersionReport = MSRReportVersionHistoryReport(SubjectId);
			dtMSRDCFReport = MSRDCFReport(SubjectId);
			dtMSRDataHistoryReport = MSRReviewHistoryReport(SubjectId);
			dtMSRAdditionalDetailsReport = MSRAdditionalDetailsReport(SubjectId);

			if (dtMSRAdditionalDetailsReport != null)
			{

				//------------------------------ Additional Data --------------------------------------------------------------------------------------------------

				dvmsr_Addtional_data = dtMSRAdditionalDetailsReport.Copy().DefaultView;
				dvmsr_Addtional_data.Sort = "ScreeningType,iSeqNo asc";

				if (Sex.ToUpper().Trim() == "M")
				{
					dvmsr_Addtional_data.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjectId + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo + " and  vMedExGroupDesc  <> 'Screening Review'  And vMedexGroupcode not in ('00037','00009')";
				}
				else
				{
					dvmsr_Addtional_data.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjectId + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo + " and  vMedExGroupDesc  <> 'Screening Review'  And vMedexGroupcode  <> '00009'";
				}

				dt_screening_addtional_Data = dvmsr_Addtional_data.ToTable().Copy();

				//------------------------------ Additional Data Review History --------------------------------------------------------------------------------------------------

				dvmsr_Addtional_data_Review_history = dtMSRAdditionalDetailsReport.Copy().DefaultView;
				dvmsr_Addtional_data_Review_history.Sort = "ScreeningType,iSeqNo asc";

				if (Sex.ToUpper().Trim() == "M")
				{
					dvmsr_Addtional_data_Review_history.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjectId + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo + " and  vMedExGroupDesc  = 'Screening Review'  And vMedexGroupcode not in ('00037','00009')";
				}
				else
				{
					dvmsr_Addtional_data_Review_history.RowFilter = "vWorkSpaceId = '" + this.HProjectId.Value.ToString() + "' and vSubjectId = '" + SubjectId + "' and nMedexScreeningHdrNo = " + ScreeningHdrNo + " and  vMedExGroupDesc  = 'Screening Review'  And vMedexGroupcode  <> '00009'";
				}

				dt_screening_addtional_Data_Review_History = dvmsr_Addtional_data_Review_history.ToTable().Copy();

				//---------------------------------------------------------------------------------------------------------------------------------------------------
			}

			int TotalCRFCount = 0;

			foreach (GridViewRow row in gvwReportType.Rows)
			{

				if (row.RowType == DataControlRowType.DataRow)
				{

					if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
					{

						if (TotalCRFCount == 0 && (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "1" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "12" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "13"))
						{

							TotalCRFCount += 1;
							foreach (GridViewRow row1 in gvwReportType.Rows)
							{

								if (row1.RowType == DataControlRowType.DataRow)
								{

									if (((HtmlInputCheckBox)row1.FindControl("chkSelect")).Checked)
									{

										if (row1.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "1")
										{

											if (dt_screening.Rows.Count > 0)
											{
												IS_MSR_Data_To_Be_bind += 1;
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" style=\"Font -family :'Times New Roman' !important; font-size:12px !important;\" >"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr ALIGN=LEFT width=\"100%\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"MSR\">"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td style=\"display:none;font-family:'Times New Roman'; font-size:12px;\">MSR"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</td>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">"));
												dt_group = dt_screening.Copy().DefaultView.ToTable(true, "vMedExGroupDesc,vMedExGroupCode".Split(','));

												foreach (DataRow dr_group in dt_group.Rows)
												{

													dvmsrgroup = dvmsr.ToTable().Copy().DefaultView;
													dvmsrgroup.RowFilter = "vMedExGroupCode = '" + dr_group["vMedExGroupCode"].ToString() + "'";

													if (dvmsrgroup.ToTable().Rows.Count > 0)
													{

														dt_group1 = dvmsrgroup.ToTable();
														PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"2\" data-bookmark-text=\"" + dr_group["vMedExGroupDesc"].ToString() + "\">"));
														PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px; font-weight:bold;\" colspan=\"2\" >" + dr_group["vMedExGroupDesc"].ToString() + "</td>"));
														PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
														dvmsrsubgroup = dt_group1.DefaultView;
														dt_subgroup = dvmsrsubgroup.ToTable(true, "vMedExSubGroupDesc,vMedExSubGroupCode".Split(','));

														foreach (DataRow drsubgroup in dt_subgroup.Rows)
														{

															PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; \" data-bookmark-enabled=\"true\" data-bookmark-level=\"3\" data-bookmark-text=\"" + drsubgroup["vMedExSubGroupDesc"].ToString() + "\">"));
															PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; color:#FFFFFF; font-family:'Times New Roman' !Important; font-size:12px; \" colspan=\"2\" >" + drsubgroup["vMedExSubGroupDesc"].ToString() + "</td>"));
															PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
															dvmedex = dvmsr.ToTable().Copy().DefaultView;
															dvmedex.RowFilter = "vMedExGroupCode = '" + dr_group["vMedExGroupCode"].ToString() + "' AND vMedExSubGroupCode='" + drsubgroup["vMedExSubGroupCode"].ToString() + "'";

															if (dvmedex.ToTable().Rows.Count > 0)
															{

																foreach (DataRow drmedex in dvmedex.ToTable().Rows)
																{

																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr ALIGN=LEFT style=\"page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; \">"));

																	if (Convert.ToString(drmedex["vMedExType"]).Trim().ToUpper() != "LABEL")
																	{
																		PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td width=\"60%\" style=\" font-family:'Times New Roman' !Important; font-size:12px; vertical-align:middle; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;
																		PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;"));
																		PlaceHolder_msrPrint.Controls.Add(GetlableWithHistory(Convert.ToString(drmedex["vMedExDesc"].ToString() + ": "), Convert.ToString(drmedex["vMedExGroupCode"]), Convert.ToString(drmedex["vMedExSubGroupCode"]), drmedex["vMedExGroupCode"].ToString() + drmedex["vMedExSubGroupCode"].ToString() + drmedex["vMedExCode"].ToString() + "R" + SubjectId.ToString() + "SubId" + drmedex["iSeqNo"].ToString() + drmedex["vMedExCode"]));
																		PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
																		PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important;  font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
																		PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;&nbsp;"));
																	}
																	else
																	{
																		// As Per Discussion with Shailendrabhai.
																		PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td colspan=\"2\" width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important;  font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
																	}

																	objelement = GetObject(Convert.ToString(drmedex["vMedExType"]), Convert.ToString(drmedex["vMedExCode"].ToString() + "R" + SubjectId + "MSRPRINT"), ((drmedex["vDefaultValue"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vDefaultValue"])), ((drmedex["vMedExValues"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vMedExValues"])), ((drmedex["vRefTable"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vRefTable"])), ((drmedex["vRefColumn"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vRefColumn"])));

																	PlaceHolder_msrPrint.Controls.Add((System.Web.UI.Control)objelement);
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
																}
															}
														}
													}
												}
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Table>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Table>"));
											}
										}

										//If row1.Cells(GVR_ReportId).Text.ToString().Split("#")(0) = 12 Then

										//    If Not dtMSRDataHistoryReport Is Nothing Then

										//        If dtMSRDataHistoryReport.Rows.Count > 0 Then
										//            IS_MSR_Data_To_Be_bind += 1
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<Table style="" Width:100%; Font -family :'Times New Roman' !important;"">"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<Tr data-bookmark-enabled=""true"" data-bookmark-level=""2"" data-bookmark-text=""" + "MSR Review history Report" + """ width=""100%"" ALIGN=LEFT style=""BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always"">")) '008ecd''redish orange for parent activity
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<Td style=""vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; color:#FFFFFF;font-weight:bold; "">")) 'white-space: nowrap; 
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("&nbsp;"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl(Convert.ToString("MSR Review history Report")))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("</Td>"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("</Tr>"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<Tr ALIGN=LEFT>"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<Td style=""vertical-align:top;"">")) 'white-space: nowrap;
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<Table width=""100%"" cellspacing='0' style=""font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;page-break-inside:avoid;"">")) 'Added on 30-01-2010 to fix the size of display
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<tr width=""100%""  align=""center"" style=""color:black;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;"">"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:5%;"">Sr No.</th>"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:5%;"">Screening Review</th>"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:10%;"">Value</th>"))
										//            'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:20%;"">Remark</th>"))
										//            'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:20%;"">Version Date</th>"))
										//            'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:20%;"">Modify By</th>"))
										//            'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:20%;"">Modify On</th>"))
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("</tr>"))
										//            For Count_dt As Integer = 0 To dtMSRDataHistoryReport.Rows.Count - 1
										//                If ((Count_dt + 1) Mod 2 = 0) Then
										//                    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<tr  width=""100%""  style="" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;"">"))
										//                Else
										//                    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<tr  width=""100%""  style="" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;"">"))
										//                End If
										//                PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;"">" + (Count_dt + 1).ToString + "</td>"))
										//                PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;"">" + dtMSRDataHistoryReport.Rows(Count_dt).Item("vMedExDesc").ToString + "</td>"))
										//                PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;"">" + dtMSRDataHistoryReport.Rows(Count_dt).Item("vMedExResult").ToString + "</td>"))
										//                'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:10%;"">" + IIf(dtMSRVersionReport.Rows(Count_dt).Item("cFreezeStatus").ToString.ToUpper.ToString() = "F", "Freeze", "UnFreeze") + "</td>"))
										//                'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;"">" + dtMSRVersionReport.Rows(Count_dt).Item("vRemark").ToString + "</td>"))
										//                'If dtMSRVersionReport.Rows(Count_dt).Item("dVersiondate").ToString = "" Then
										//                '    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;"">" + "" + "</td>"))
										//                'Else
										//                '    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;"">" + Convert.ToString(CDate(dtMSRVersionReport.Rows(Count_dt).Item("dVersiondate").ToString).ToString("dd-MMM-yyyy")) + "</td>"))
										//                'End If
										//                'PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;"">" + dtMSRVersionReport.Rows(Count_dt).Item("vFirstName").ToString + "</td>"))
										//                'If dtMSRVersionReport.Rows(Count_dt).Item("dModifyOn").ToString = "" Then
										//                '    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;"">" + "" + "</td>"))
										//                'Else
										//                '    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;"">" + Convert.ToString(CDate(dtMSRVersionReport.Rows(Count_dt).Item("dModifyOn").ToString).ToString("dd-MMM-yyyy HH:mm") + strServerOffset) + "</td>"))
										//                'End If
										//                PlaceHolder_msrPrint.Controls.Add(New LiteralControl("</tr>"))
										//            Next
										//            PlaceHolder_msrPrint.Controls.Add(New LiteralControl("</table>"))


										//        End If
										//    End If
										//End If

									}
								}
							}

						}

						//*********************************************************************************************************************************************************
						//*********************************************************************************************************************************************************
						//****************************************************** MSR Version History Start *****************************************************************************
						//*********************************************************************************************************************************************************


						if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "11")
						{

							if (dtMSRVersionReport != null)
							{

								if (dtMSRVersionReport.Rows.Count > 0)
								{
									IS_MSR_Data_To_Be_bind += 1;
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table style=\" Width:100%; Font -family :'Times New Roman' !important;\">"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"2\" data-bookmark-text=\"" + "MSR Version history Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always\">")); //008ecd''redish orange for parent activity
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; color:#FFFFFF;font-weight:bold; \">")); //white-space: nowrap;
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl(Convert.ToString("MSR Version history Report")));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;page-break-inside:avoid;\">")); //Added on 30-01-2010 to fix the size of display
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:black;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;\">"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Sr No.</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Version No.</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">Status</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Remark</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Version Date</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Modify By</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Modify On</th>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
									for (int Count_dt = 0; Count_dt < dtMSRVersionReport.Rows.Count; Count_dt++)
									{
										if ((Count_dt + 1) % 2 == 0)
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
										}
										else
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
										}
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + (Count_dt + 1).ToString() + "</td>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + dtMSRVersionReport.Rows[Count_dt]["nVersionNo"].ToString() + "</td>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:10%;\">" + ((dtMSRVersionReport.Rows[Count_dt]["cFreezeStatus"].ToString().ToUpper().ToString() == "F") ? "Freeze" : "UnFreeze") + "</td>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + dtMSRVersionReport.Rows[Count_dt]["vRemark"].ToString() + "</td>"));
										if (string.IsNullOrEmpty(dtMSRVersionReport.Rows[Count_dt]["dVersiondate"].ToString()))
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + "" + "</td>"));
										}
										else
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + Convert.ToString(DateTime.Parse(dtMSRVersionReport.Rows[Count_dt]["dVersiondate"].ToString()).ToString("dd-MMM-yyyy")) + "</td>"));
										}
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + dtMSRVersionReport.Rows[Count_dt]["vFirstName"].ToString() + "</td>"));
										if (string.IsNullOrEmpty(dtMSRVersionReport.Rows[Count_dt]["dModifyOn"].ToString()))
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + "" + "</td>"));
										}
										else
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + Convert.ToString(DateTime.Parse(dtMSRVersionReport.Rows[Count_dt]["dModifyOn"].ToString()).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset) + "</td>"));
										}
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
									}
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</table>"));

									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
									PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Table>"));
								}
							}
						}

						//*********************************************************************************************************************************************************
						//*********************************************************************************************************************************************************
						//****************************************************** MSR DCF Status Report Start *****************************************************************************
						//*********************************************************************************************************************************************************
						if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "14")
						{
							if (dtMSRDCFReport != null)
							{


								if (dtMSRDCFReport.Rows.Count > 0)
								{
									IS_MSR_Data_To_Be_bind += 1;
									//dtMSRDCFReport.DefaultView.RowFilter = "vWorkSpaceId ='" + Me.HProjectId.Value.Trim() + "'   " + _
									//                                            " And SubjectId = '" + SubjectId.ToString + "'"
									if (dtMSRDCFReport.DefaultView.ToTable().Rows.Count > 0)
									{
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table style=\" Width:100%; Font -family :'Times New Roman' !important;\">"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"2\" data-bookmark-text=\"" + "MSR DCF Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always;page-break-inside:avoid;\">")); //008ecd''redish orange for parent activity
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; color:#FFFFFF;font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl(Convert.ToString("MSR DCF Report")));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:black;background-color:White;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;page-break-inside:avoid;\">"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:1%;\">Sr No.</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:2%;\">Group Name</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:2%;\">Screening Date</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Attribute</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:8%;\">Discrepancy on Value</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">DCF Type</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:21%;\">Query</th>"));
										//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:10%;"">Modified Value</th>"))
										//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:10%;"">Modification Remarks</th>"))
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">DCF Remarks</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Created By</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Created Date</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">Status</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:8%;\">Modified By</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">Modified Date</th>"));
										//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:5%;"">Data entry By Value</th>"))
										//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:5%;"">Data Entry On</th>"))


										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
										for (int Count_dt = 0; Count_dt < dtMSRDCFReport.DefaultView.ToTable().Rows.Count; Count_dt++)
										{
											if ((Count_dt + 1) % 2 == 0)
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											else
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:1%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:1%;\">" + (Count_dt + 1).ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:2%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["GroupName"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:2%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["ScreenDate"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:3%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["Attribute"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["vDiscrepancy"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:8%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["cDcfType"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["Query"].ToString() + "</td>"));
											//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;"">" + dtMSRDCFReport.DefaultView.ToTable.Rows(Count_dt).Item("ModifyValue").ToString + "</td>"))
											//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;"">" + dtMSRDCFReport.DefaultView.ToTable.Rows(Count_dt).Item("ModifyRemarks").ToString + "</td>"))
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:21%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:21%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["DCFRemarks"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["DCFCreatedby"].ToString() + "</td>"));
											if (string.IsNullOrEmpty(dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["DCFCreatedDate"].ToString()))
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + "" + "</td>"));
											}
											else
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + Convert.ToString(dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["DCFCreatedDate"].ToString()) + "</td>"));
											}
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["Status"].ToString() + "</td>"));

											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["ModifyBy"].ToString() + "</td>"));

											if (string.IsNullOrEmpty(dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["ModifyDate"].ToString()))
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;\">" + "" + "</td>"));
											}
											else
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;\">" + Convert.ToString(dtMSRDCFReport.DefaultView.ToTable().Rows[Count_dt]["ModifyDate"].ToString()) + "</td>"));
											}

											//PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;"">" + dtMSRDCFReport.DefaultView.ToTable.Rows(Count_dt).Item("DataEntryBy").ToString + "</td>"))

											//If dtMSRDCFReport.DefaultView.ToTable.Rows(Count_dt).Item("DCFUpdatedOn").ToString = "" Then
											//    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;"">" + "" + "</td>"))
											//Else
											//    PlaceHolder_msrPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;"">" + Convert.ToString(dtMSRDCFReport.DefaultView.ToTable.Rows(Count_dt).Item("DCFUpdatedOn").ToString) + "</td>"))
											//End If

											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
										}
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</table>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Table>"));
									}
								}
							}

						}
						//*********************************************************************************************************************************************************
						//****************************************************** DCF Status Report end *****************************************************************************
						//*********************************************************************************************************************************************************

						//*********************************************************************************************************************************************************
						//*********************************************************************************************************************************************************
						//****************************************************** MSR ADDITIONAL Report Start *****************************************************************************
						//*********************************************************************************************************************************************************
						if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "16")
						{
							if (dt_screening_addtional_Data != null)
							{
								if (dt_screening_addtional_Data.Rows.Count > 0)
								{
									IS_MSR_Data_To_Be_bind += 1;
									if (dt_screening_addtional_Data.DefaultView.ToTable().Rows.Count > 0)
									{
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table style=\" Width:100%; Font -family :'Times New Roman' !important;\">"));

										if (dt_screening_addtional_Data.Rows.Count > 0)
										{
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" style=\"Font -family :'Times New Roman' !important; font-size:12px !important;\" >"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + "MSR Additional Test Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always;page-break-inside:avoid;\">"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td style=\"display:none;font-family:'Times New Roman'; font-size:12px;\">MSR Additional Test Report"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">"));
											dt_group = dt_screening_addtional_Data.Copy().DefaultView.ToTable(true, "vMedExGroupDesc,vMedExGroupCode".Split(','));

											foreach (DataRow dr_group in dt_group.Rows)
											{

												dvmsrgroup = dvmsr_Addtional_data.ToTable().Copy().DefaultView;
												dvmsrgroup.RowFilter = "vMedExGroupCode = '" + dr_group["vMedExGroupCode"].ToString() + "'";

												if (dvmsrgroup.ToTable().Rows.Count > 0)
												{

													dt_group1 = dvmsrgroup.ToTable();
													PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; font-weight:bold;\" data-bookmark-enabled=\"true\" data-bookmark-level=\"2\" data-bookmark-text=\"" + dr_group["vMedExGroupDesc"].ToString() + "\">"));
													PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px; font-weight:bold;\" colspan=\"2\" >" + dr_group["vMedExGroupDesc"].ToString() + "</td>"));
													PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
													dvmsrsubgroup = dt_group1.DefaultView;
													dt_subgroup = dvmsrsubgroup.ToTable(true, "vMedExSubGroupDesc,vMedExSubGroupCode".Split(','));

													foreach (DataRow drsubgroup in dt_subgroup.Rows)
													{

														PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; \" data-bookmark-enabled=\"true\" data-bookmark-level=\"3\" data-bookmark-text=\"" + drsubgroup["vMedExSubGroupDesc"].ToString() + "\">"));
														PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td style=\"vertical-align:middle; color:#FFFFFF; font-family:'Times New Roman' !Important; font-size:12px; \" colspan=\"2\" >" + drsubgroup["vMedExSubGroupDesc"].ToString() + "</td>"));
														PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
														dvmedex = dvmsr_Addtional_data.ToTable().Copy().DefaultView;
														dvmedex.RowFilter = "vMedExGroupCode = '" + dr_group["vMedExGroupCode"].ToString() + "' AND vMedExSubGroupCode='" + drsubgroup["vMedExSubGroupCode"].ToString() + "'";

														if (dvmedex.ToTable().Rows.Count > 0)
														{

															foreach (DataRow drmedex in dvmedex.ToTable().Rows)
															{

																PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr ALIGN=LEFT style=\"page-break-inside:avoid;font-family:'Times New Roman' !Important;  font-size:12px; \">"));

																if (Convert.ToString(drmedex["vMedExType"]).Trim().ToUpper() != "LABEL")
																{
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td width=\"60%\" style=\" font-family:'Times New Roman' !Important; font-size:12px; vertical-align:middle; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;"));
																	PlaceHolder_msrPrint.Controls.Add(GetlableWithHistory(Convert.ToString(drmedex["vMedExDesc"].ToString() + ": "), Convert.ToString(drmedex["vMedExGroupCode"]), Convert.ToString(drmedex["vMedExSubGroupCode"]), drmedex["vMedExGroupCode"].ToString() + drmedex["vMedExSubGroupCode"].ToString() + drmedex["vMedExCode"].ToString() + "R" + SubjectId.ToString() + "SubId" + drmedex["iSeqNo"].ToString() + drmedex["vMedExCode"]));
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important;  font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;&nbsp;"));
																}
																else
																{
																	PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td colspan=\"2\" width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important;  font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
																}

																objelement = GetObject(Convert.ToString(drmedex["vMedExType"]), Convert.ToString(drmedex["vMedExCode"].ToString() + "R" + SubjectId + "MSRPRINT"), ((drmedex["vDefaultValue"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vDefaultValue"])), ((drmedex["vMedExValues"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vMedExValues"])), ((drmedex["vRefTable"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vRefTable"])), ((drmedex["vRefColumn"] == System.DBNull.Value) ? "" : Convert.ToString(drmedex["vRefColumn"])));

																PlaceHolder_msrPrint.Controls.Add((System.Web.UI.Control)objelement);
																PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
																PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
															}
														}
													}
												}
											}
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Table>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Table>"));
										}

										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</table>"));

									}
								}
								if (dt_screening_addtional_Data_Review_History != null)
								{
									if (dt_screening_addtional_Data_Review_History.Rows.Count > 0)
									{
										IS_MSR_Data_To_Be_bind += 1;
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table style=\" Width:100%; Font -family :'Times New Roman' !important;\">"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"2\" data-bookmark-text=\"" + "MSR Review history Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always\">")); //008ecd''redish orange for parent activity
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; color:#FFFFFF;font-weight:bold; \">")); //white-space: nowrap;
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("&nbsp;"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl(Convert.ToString("MSR Review history Report")));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Td>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</Tr>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;page-break-inside:avoid;\">")); //Added on 30-01-2010 to fix the size of display
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:black;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;\">"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Sr No.</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Screening Review</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">Value</th>"));
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
										for (int Count_dt = 0; Count_dt < dvmsr_Addtional_data_Review_history.ToTable().Rows.Count; Count_dt++)
										{
											if ((Count_dt + 1) % 2 == 0)
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											else
											{
												PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + (Count_dt + 1).ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + dvmsr_Addtional_data_Review_history.ToTable().Rows[Count_dt]["vMedExDesc"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + dvmsr_Addtional_data_Review_history.ToTable().Rows[Count_dt]["vMedExResult"].ToString() + "</td>"));
											PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</tr>"));
										}
										PlaceHolder_msrPrint.Controls.Add(new LiteralControl("</table>"));


									}
								}
							}

						}
						//*********************************************************************************************************************************************************
						//****************************************************** additional Report end *****************************************************************************
						//*********************************************************************************************************************************************************


					}
				}
			}

			if (dt_screening.Rows.Count > 0 || IS_MSR_Data_To_Be_bind > 0)
			{

				string html1 = RenderControl(PlaceHolder_msrPrint);
				ds_header = (DataSet)this.ViewState[vs_View_getWorkspaceDetailForHdr];

				string Path = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/"));
				Path = Path + "/images/lambda_logo.jpg";

				Project = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString().Split(':');
				Int32 strLen = Project[0].ToString().LastIndexOf("-");
				ProjectNo = Project[0].ToString();

				if (Convert.ToBoolean(this.ViewState[IsProjectCT]) && strLen > 5)
				{
					ProjectNo = Project[0].Substring(0, strLen);
					strLen = strLen + 1;
					SiteId = Project[0].Substring(strLen);
				}
				headercontent += "<html><head></head><body>";
				headercontent += "<table style=\"margin-top: 2px; margin: auto; border: solid 1px black; width: 100%; font-family: 'Times New Roman'; font-size:12px; \"align=\"left\">";
				headercontent += "<tr style=\" \">";
				headercontent += "<td valign=\"top\">";
				headercontent += "<table style=\"font-family: 'Times New Roman'; font-size:12px; \">";
				headercontent += "<tr style=\" \">";
				headercontent += "<td colspan=\"4\">";
				headercontent += "<Label  for \"" + ConfigurationManager.AppSettings["Client"].ToString() + "\">" + ConfigurationManager.AppSettings["Client"].ToString() + "</asp:Label>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				headercontent += "<td colspan=\"4\">";
				headercontent += "Sponsor Name:<Label  for \"" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "\">" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "</asp:Label>";
				headercontent += "</td>";
				headercontent += "</tr >";
				headercontent += "<tr style=\" \">";
				headercontent += "<td align=\"right\" colspan=\"4\" >";
				headercontent += "<h4>";
				headercontent += "MEDICAL SCREENING RECORD FORM</h4>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				headercontent += "<td align=\"right\">Project No:</td>";
				headercontent += "<td style=\"border: thin solid #000000;\">";
				headercontent += "<Label  for \"" + ProjectNo.ToString() + "\">" + ProjectNo.ToString() + "</asp:Label>";
				headercontent += "</td>";
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == true)
				{
					headercontent += "<td align=\"right\">Site Id:</td>";
					headercontent += "<td  style=\"border: thin solid #000000;\">";
					headercontent += "<Label  for \"" + SiteId.ToString() + "\">" + SiteId.ToString() + "</asp:Label>";
					headercontent += "</td>";
				}

				if (this.chkprotocolno.Checked == false)
				{
					if (ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim().Length > 0)
					{
						headercontent += "<td align=\"right\">Protocol No:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "\">" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "</asp:Label>";
						headercontent += "</td>";
					}
				}

				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
				{
					headercontent += "<td align=\"right\">Subject No:</td>";
					headercontent += "<td style=\"border: thin solid #000000;\">";
					headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
					headercontent += "</td>";

					if (this.chkinitial.Checked == false)
					{
						headercontent += "<td align=\"right\">Subject Initials:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
						headercontent += "</td>";
					}

				}
				else
				{
					headercontent += "<td align=\"right\">Subject No:</td>";
					headercontent += "<td style=\"border: thin solid #000000;\">";
					headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
					headercontent += "</td>";
					if (this.chkinitial.Checked == false)
					{
						headercontent += "<td align=\"right\">Subject Initials:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
						headercontent += "</td>";
					}
				}
				headercontent += "</tr>";
				headercontent += "</table>";
				headercontent += "</td>";

				if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
				{
					headercontent += "<td valign=\"middle\">";
					headercontent += "<img id=ctl00_CPHLAMBDA_ImgsponsorLogo alt=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\" src=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
					headercontent += "</td>";
				}

				headercontent += "<td valign=\"middle\">";
				headercontent += "<img id=ctl00_CPHLAMBDA_ImgLogo alt=\"" + Path.ToString() + "\" src=\"" + Path.ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "</table>";
				headercontent += "</body></html>";
				//=========================================================================
				pdfFont = new System.Drawing.Font("Times New Roman", 12, FontStyle.Bold, GraphicsUnit.Point);

				//======================================htmltopdf======================================
				HtmlToPdfConverter pdfconverter = new HtmlToPdfConverter();
				pdfconverter.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
				pdfconverter.PdfDocumentOptions.AvoidImageBreak = true;
				pdfconverter.PdfDocumentOptions.AvoidTextBreak = false;
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.A4;
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.Letter;
				}
				pdfconverter.PdfDocumentOptions.PdfPageOrientation = PdfPageOrientation.Portrait;
				pdfconverter.PdfDocumentOptions.ShowHeader = true;
				pdfconverter.PdfDocumentOptions.ShowFooter = true;
				pdfconverter.PdfHeaderOptions.HeaderHeight = 125;
				pdfconverter.PdfFooterOptions.FooterHeight = 41;
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					pdfconverter.HtmlViewerWidth = 662; //'Previous 750, 647
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					pdfconverter.HtmlViewerWidth = 684; //'Previous 750, 647
				}
				pdfconverter.PdfDocumentOptions.FitWidth = false;
				pdfconverter.PdfDocumentOptions.EmbedFonts = true;
				pdfconverter.PdfDocumentOptions.JpegCompressionEnabled = true;
				pdfconverter.PdfDocumentOptions.JpegCompressionLevel = 0;
				pdfconverter.PdfDocumentOptions.PdfCompressionLevel = PdfCompressionLevel.Best;
				pdfconverter.PdfDocumentOptions.StretchToFit = true;
				pdfconverter.PdfDocumentOptions.LeftMargin = 72;
				pdfconverter.PdfDocumentOptions.RightMargin = 27;
				pdfconverter.PdfDocumentOptions.TopMargin = 27;
				pdfconverter.PdfDocumentOptions.BottomMargin = 5;
				string level1TextStyle = "font-family:'Times New Roman'; font-size:16px; text-decoration: underline;";
				pdfconverter.TableOfContentsOptions.SetItemStyle(1, level1TextStyle);
				pdfconverter.TableOfContentsOptions.SetItemStyle(2, level1TextStyle);
				pdfconverter.TableOfContentsOptions.SetItemStyle(3, level1TextStyle);
				pdfconverter.TableOfContentsOptions.AutoTocItemsEnabled = false;

				string level1PageNumberStyle = "padding-right:3px; font-family:'Times New Roman'; font-size:16px; text-decoration: underline; font-weight:bold";
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(1, level1PageNumberStyle);
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(2, level1PageNumberStyle);
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(3, level1PageNumberStyle);

				d2 = pdfconverter.ConvertHtmlToPdfDocumentObject(html1, string.Empty);
				byte[] bytes = null;
				//bytes = pdfconverter.ConvertHtml(Me.HFHeaderLabel.Value.ToString(), String.Empty)
				d2.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\BlankPage.pdf");
				d2.AutoCloseAppendedDocs = true;
				d2.Close();
				d2 = null;
				bytes = System.IO.File.ReadAllBytes(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\BlankPage.pdf");

				FileInfo fInfo = new FileInfo(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\BlankPage.pdf");
				if (fInfo.Exists)
				{
					fInfo.Delete();
				}

				string DocRemove = string.Empty;
				if (!FindBlankPage(ref DocRemove, bytes))
				{
					objCommon.ShowAlert("Error While Removing Blank Page.Please Generate Report Again! ", this.Page);
//INSTANT C# WARNING: 'Exit Try' statements have no equivalent in C#, so it has been replaced with a 'goto' statement:
//ORIGINAL LINE: Exit Try
					//goto ExitLabel1;
                    return false;
                }
				bytes = null;

				pdfconverter.PdfFooterOptions.PageNumberingStartIndex = 0;
				pdfconverter.PdfFooterOptions.AddElement(new LineElement(0, 0, pdfconverter.PdfDocumentOptions.PdfPageSize.Width - pdfconverter.PdfDocumentOptions.LeftMargin - pdfconverter.PdfDocumentOptions.RightMargin, 0));
				TextElement footerText = new TextElement(0, 3, "*This is an electronically authenticated report.                                            Page &p; of &P;                       ", new Font(new FontFamily("Times New Roman"), 12, GraphicsUnit.Point));
				footerText.TextAlign = HorizontalTextAlign.Right;
				footerText.ForeColor = Color.Navy;
				footerText.EmbedSysFont = true;
				HtmlToPdfElement Header1 = new HtmlToPdfElement(headercontent, null);
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					Header1.HtmlViewerWidth = 662; //'Previous 750, 647
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					Header1.HtmlViewerWidth = 684; //'Previous 750, 647
				}
				Header1.FitWidth = false;
				pdfconverter.PdfHeaderOptions.AddElement(Header1);
				pdfconverter.PdfFooterOptions.AddElement(footerText);
				pdfconverter.PdfViewerPreferences.PageLayout = ViewerPageLayout.SinglePage;
				pdfconverter.PdfViewerPreferences.PageMode = ViewerPageMode.UseOutlines;

				d1 = pdfconverter.ConvertHtmlToPdfDocumentObject(html1, string.Empty);
				BtnGeneratePdf.Enabled = false;

				if (this.ddlPrinttype.SelectedValue.ToUpper() == "DRAFT")
				{
					watermarkTextFont = new System.Drawing.Font("Times New Roman", 75, FontStyle.Bold, GraphicsUnit.Point);
					watermarkTextElement = new TextElement(50, 250, strProfileStatus.ToString() + " Draft Copy", watermarkTextFont);
					watermarkTextElement.ForeColor = System.Drawing.Color.Blue;
					watermarkTextElement.Opacity = 20;
					watermarkTextElement.TextAngle = 45;
					foreach (Winnovative.PdfPage PdfPage in d1.Pages)
					{
						PdfPage.AddElement(watermarkTextElement);
					}
				}

				string[] DocRemove_arry = null;
				if (DocRemove.Length > 0)
				{
					DocRemove_arry = DocRemove.Substring(0, DocRemove.Length - 1).Split(',');
					for (int i = DocRemove_arry.Length - 1; i >= 0; i--)
					{
						d1.Pages.Remove(Convert.ToInt32(DocRemove_arry[i]));
					}
				}

				d1.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\" + RptNo + ".pdf");
				d1.AutoCloseAppendedDocs = true;
				d1.Close();
				d1 = null;

			}
			else
			{
				return true;
			}
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....MsrReport", ex);
			return false;
		}
		//ExitLabel1: ;
	}

	private bool LabReport(int nSampleID, string rptNo, string foldername, string vSubjectId)
	{
		DataView Dv_Report = new DataView();
		DataView dv_LabReport = new DataView();
		DataView dv_Revise = new DataView();
		string eStr = "";
		string wStr = "";
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim dr As DataRow
		FileStream fsPhoto = null;
		BinaryReader br = null;
		Bitmap bm = new Bitmap(400, 140);
		Graphics g = null;
		string str = null;
		string BarcodeText = "";
		int xCoOrdinate = 4;
		int yCoOrdinate = 25;
		DataTable dt_Report = new DataTable();
		DataTable dt_BarcodePrint = new DataTable();
		DataSet ds_LabReport = new DataSet();
		DataSet ds_ReviseReport = new DataSet();
		DataSet dsBarcodeImage = new DataSet();
		BarcodeGenerator BarcodeImage = new BarcodeGenerator();
		string strbarcode = "";
		string Visit = "";
		try
		{
			strbarcode = DateTime.Now.ToString("ddMMyyyyhhmmss");
			wStr += " isnull(nSampleID,'') = " + nSampleID;
			if (!objHelp.View_SubjectLabRptDtl(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_LabReport, ref eStr))
			{
				throw new Exception("Error While Getting Data From View_SubjectLabRptDtl" + eStr);
			}

			if (objHelp.GetConnectionString("", ref strConString, ref strErrMsg))
			{
				arrConString = strConString.Split(';');
				foreach (string s in arrConString)
				{
					if (s.ToUpper().Contains("SERVER"))
					{
						strServername = s.Split('=')[1];
					}
					else if (s.ToUpper().Contains("USER ID"))
					{
						strUsername = s.Split('=')[1];
					}
					else if (s.ToUpper().Contains("PASSWORD"))
					{
						strPassword = s.Split('=')[1];
					}
					else if (s.ToUpper().Contains("DATABASE"))
					{
						strDatabasename = s.Split('=')[1];
					}
				}
			}

			ConnInfo = new CrystalDecisions.Shared.ConnectionInfo();
			ConnInfo.UserID = strUsername;
			ConnInfo.DatabaseName = strDatabasename;
			ConnInfo.Password = strPassword;
			ConnInfo.ServerName = strServername;

			wStr = "Select * from RptBarcodeImage where 1=2";
			dsBarcodeImage = objHelp.GetResultSet(wStr, "RptBarcodeImage");

			if (ds_LabReport.Tables[0].Rows.Count > 0)
			{
				ds_LabReport.AcceptChanges();

				Dv_Report = ds_LabReport.Tables[0].DefaultView;
				Visit = Dv_Report.ToTable().Rows[0]["vNodeDisplayName"].ToString();
				dt_Report = Dv_Report.ToTable();

				dt_BarcodePrint = Dv_Report.ToTable(true, "vSampleID");
				if (dt_BarcodePrint.Rows.Count > 0)
				{

					foreach (DataRow dr in dt_BarcodePrint.Rows)
					{
						BarcodeText = Convert.ToString(dr["vSampleID"]);
						//dr("Barcode") = GenerateBarcodeUsingBarcodeImageGenerator(BarcodeText, 5, 5, 470, 90)

						DataRow DrBarcodeImage = dsBarcodeImage.Tables[0].NewRow();

						DrBarcodeImage["vWorkSpaceId"] = HProjectId.Value.Trim();
						DrBarcodeImage["vSubjectId"] = vSubjectId;
						DrBarcodeImage["vFormName"] = strFormName;
						DrBarcodeImage["nSampleId"] = nSampleID;
						DrBarcodeImage["vSampleId"] = BarcodeText;
						DrBarcodeImage["iUserId"] = Session[GeneralModule.S_UserID];
						DrBarcodeImage["BarcodeImage"] = GenerateBarcodeUsingBarcodeImageGenerator(BarcodeText, 5, 5, 470, 90);
						DrBarcodeImage["QRImage"] = Convert.FromBase64String(string.Empty);
						DrBarcodeImage["InitiWorkSpaceBarcode"] = Convert.FromBase64String(string.Empty);
						DrBarcodeImage["BirthDateBarcode"] = Convert.FromBase64String(string.Empty);

						dsBarcodeImage.Tables[0].Rows.Add(DrBarcodeImage);
						dsBarcodeImage.Tables[0].AcceptChanges();
					}

					dv_LabReport = dt_Report.DefaultView;
					dv_LabReport.Sort = "vMedExGroupCode,iseqno";

					if (!objLambda.Insert_Delete_RptBarcodeImage(WS_Lambda.DataObjOpenSaveModeEnum.DataObjOpenMode_Add, dsBarcodeImage, Convert.ToString(this.Session[GeneralModule.S_UserID]), ref eStr))
					{
						this.ShowErrorMessage("", eStr);
						return false;
					}

					if (dv_LabReport.ToTable().Rows.Count > 0)
					{
						rDocument = new ReportDocument();
						rDocument.Load(Server.MapPath("Reports") + "\\RptReviewLabReport.rpt");
						rDocument.SummaryInfo.ReportTitle = "Lab Report  " + "(" + Visit + ")";
					}

					//rDocument.SetDataSource(dv_LabReport.ToTable)
					//rDocument.SummaryInfo.ReportTitle = "Lab Report  " + "(" + Visit + ")"

					RepTbls = rDocument.Database.Tables;
					foreach (CrystalDecisions.CrystalReports.Engine.Table RepTbl in RepTbls)
					{
						TableLogOnInfo RepTblLogonInfo = RepTbl.LogOnInfo;
						RepTblLogonInfo.ConnectionInfo = ConnInfo;
						RepTbl.ApplyLogOnInfo(RepTblLogonInfo);
						RepTbl.Location = strDatabasename + ".dbo." + RepTbl.Location.Substring(RepTbl.Location.LastIndexOf(".") + 1);
					}

					paramField = rDocument.DataDefinition.ParameterFields["@nSampleID"];
					currval.Value = nSampleID;
					currentValues = paramField.CurrentValues;
					currentValues.Add(currval);
					paramField.ApplyCurrentValues(currentValues);

					if (!ExportToPDF(rptNo, 0, foldername, true))
					{
						return false;
					}

					rptNo = Convert.ToString(rptNo.Split('.')[0]) + "." + Convert.ToString(rptNo.Split('.')[1] + 1);

					if (!LabSubReport(dv_LabReport.ToTable().Copy(), rptNo, foldername, nSampleID))
					{
						return false;
					}

					if (!objLambda.Insert_Delete_RptBarcodeImage(WS_Lambda.DataObjOpenSaveModeEnum.DataObjOpenMode_Delete, dsBarcodeImage, Convert.ToString(this.Session[GeneralModule.S_UserID]), ref eStr))
					{
						this.ShowErrorMessage("", eStr);
						return false;
					}

				}
			}
			wStr = " vSubjectId = '" + vSubjectId.ToString() + "' AND nsampleid = " + nSampleID.ToString();
			if (!objHelp.View_SampleMedexRangeDtlForRevise(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_ReviseReport, ref eStr))
			{
				throw new Exception("Error While Getting Data From View_SampleMedexRangeDtlForRevise" + eStr);
			}


			if (ds_ReviseReport.Tables[0].Rows.Count > 0)
			{
				Dv_Report = ds_ReviseReport.Tables[0].DefaultView;
				dt_Report = Dv_Report.ToTable();
				if (dt_Report.Rows.Count > 0)
				{

					BarcodeText = Dv_Report.ToTable().Rows[0]["vSampleID"].ToString();
					foreach (DataRow dr in dt_Report.Rows)
					{
						dr["BarCode"] = GenerateBarcodeUsingBarcodeImageGenerator(BarcodeText, 5, 5, 470, 90);
					}
					dt_Report.AcceptChanges();

					dv_Revise = dt_Report.DefaultView;
					foreach (DataRow dr_vSampleId in dv_Revise.ToTable(true, "vSampleId".Split(',')).Rows)
					{
						dv_Revise = dt_Report.DefaultView;
						dv_Revise.RowFilter = "vSampleId =" + dr_vSampleId["vSampleId"].ToString();
						dv_Revise.Sort = "vSampleId,vMedExGroupCode,iseqno";
						//'***************As per Previous Records***********************

						if (dsBarcodeImage.Tables[0].Rows.Count > 0)
						{
							dsBarcodeImage.Tables[0].Rows.Clear();
						}

						DataRow DrBarcodeImage = dsBarcodeImage.Tables[0].NewRow();

						DrBarcodeImage["vWorkSpaceId"] = HProjectId.Value.Trim();
						DrBarcodeImage["vSubjectId"] = vSubjectId;
						DrBarcodeImage["vFormName"] = strFormName;
						DrBarcodeImage["nSampleId"] = nSampleID;
						DrBarcodeImage["vSampleId"] = BarcodeText;
						DrBarcodeImage["iUserId"] = Session[GeneralModule.S_UserID];
						DrBarcodeImage["BarcodeImage"] = GenerateBarcodeUsingBarcodeImageGenerator(Convert.ToString(dr_vSampleId["vSampleId"]), 5, 5, 470, 90);
						DrBarcodeImage["QRImage"] = Convert.FromBase64String(string.Empty);
						DrBarcodeImage["InitiWorkSpaceBarcode"] = Convert.FromBase64String(string.Empty);
						DrBarcodeImage["BirthDateBarcode"] = Convert.FromBase64String(string.Empty);

						dsBarcodeImage.Tables[0].Rows.Add(DrBarcodeImage);
						dsBarcodeImage.Tables[0].AcceptChanges();

						if (!objLambda.Insert_Delete_RptBarcodeImage(WS_Lambda.DataObjOpenSaveModeEnum.DataObjOpenMode_Add, dsBarcodeImage, Convert.ToString(this.Session[GeneralModule.S_UserID]), ref eStr))
						{
							this.ShowErrorMessage("", eStr);
							return false;
						}

						rDocument = new ReportDocument();
						rDocument.Load(Server.MapPath("Reports") + "\\RptOldLabReport.rpt");
						rDocument.SummaryInfo.ReportTitle = "Revised Lab Report";

						DataTable dtTemp = dv_Revise.ToTable();
						foreach (DataRow drNew in dtTemp.Rows)
						{
							drNew["vSampleId"] = drNew["vSampleId"].ToString().Remove(drNew["vSampleId"].ToString().Length - 1);
						}
						dtTemp.AcceptChanges();
						//rDocument.SetDataSource(dtTemp)

						RepTbls = rDocument.Database.Tables;
						foreach (CrystalDecisions.CrystalReports.Engine.Table RepTbl in RepTbls)
						{
							TableLogOnInfo RepTblLogonInfo = RepTbl.LogOnInfo;
							RepTblLogonInfo.ConnectionInfo = ConnInfo;
							RepTbl.ApplyLogOnInfo(RepTblLogonInfo);
							RepTbl.Location = strDatabasename + ".dbo." + RepTbl.Location.Substring(RepTbl.Location.LastIndexOf(".") + 1);
						}

						paramField = rDocument.DataDefinition.ParameterFields["@nSampleID"];
						currval.Value = nSampleID;
						currentValues = paramField.CurrentValues;
						currentValues.Add(currval);
						paramField.ApplyCurrentValues(currentValues);

						rptNo = Convert.ToString(rptNo.Split('.')[0]) + "." + Convert.ToString(rptNo.Split('.')[1] + 1);
						if (!ExportToPDF(rptNo, 0, foldername, true))
						{
							return false;
						}

						if (!objLambda.Insert_Delete_RptBarcodeImage(WS_Lambda.DataObjOpenSaveModeEnum.DataObjOpenMode_Delete, dsBarcodeImage, Convert.ToString(this.Session[GeneralModule.S_UserID]), ref eStr))
						{
							this.ShowErrorMessage("", eStr);
							return false;
						}
					}
				}
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....LabReport", ex);
			return false;
		}
	}

	private bool LabSubReport(DataTable dt_Subreport, string rptNo, string foldername, int nSampleID)
	{
		DataView dv_checksubreport = null;
		DataView dv_checkdeshdata = null;
		int icount = 0;
		string outOfSummaryMedexCode = string.Empty;
		string[] rptMedexCode = null;
		string outOfSummaryRptMedexCode = string.Empty;
		try
		{

			if (objHelp.GetConnectionString("", ref strConString, ref strErrMsg))
			{
				arrConString = strConString.Split(';');
				foreach (string s in arrConString)
				{
					if (s.ToUpper().Contains("SERVER"))
					{
						strServername = s.Split('=')[1];
					}
					else if (s.ToUpper().Contains("USER ID"))
					{
						strUsername = s.Split('=')[1];
					}
					else if (s.ToUpper().Contains("PASSWORD"))
					{
						strPassword = s.Split('=')[1];
					}
					else if (s.ToUpper().Contains("DATABASE"))
					{
						strDatabasename = s.Split('=')[1];
					}
				}
			}

			ConnInfo = new CrystalDecisions.Shared.ConnectionInfo();
			ConnInfo.UserID = strUsername;
			ConnInfo.DatabaseName = strDatabasename;
			ConnInfo.Password = strPassword;
			ConnInfo.ServerName = strServername;

			dv_checksubreport = dt_Subreport.Copy().DefaultView;

			outOfSummaryMedexCode = Convert.ToString(ConfigurationManager.AppSettings["OutOfSummaryMedexCode"]);
			rptMedexCode = outOfSummaryMedexCode.Split(',');
			foreach (string item in rptMedexCode)
			{
				outOfSummaryRptMedexCode += "'" + item + "'" + ",";
			}

			//dv_checksubreport.RowFilter = " vMedexCode in ('02170','02178','02179','10586','10587')"
			dv_checksubreport.RowFilter = " vMedexCode in (" + outOfSummaryRptMedexCode.Substring(0, outOfSummaryRptMedexCode.Length - 1) + ")";

			if (dv_checksubreport.ToTable().Rows.Count > 0)
			{
				dv_checkdeshdata = dv_checksubreport.ToTable().DefaultView;
				dv_checkdeshdata.RowFilter = " vMedexResult like '%-%'";
				if (dv_checkdeshdata.ToTable().Rows.Count > 0)
				{
					foreach (DataRow dr in dv_checkdeshdata.ToTable().Rows)
					{
						if (NumericHelper.IsNumeric(dr["vMedexResult"].ToString().Split('-')[0]))
						{
							if (string.CompareOrdinal(Convert.ToDecimal(dr["vMedexResult"].ToString().Split('-')[0]).ToString(), Convert.ToString(dr["vLowRange"])) < 0 || string.CompareOrdinal(Convert.ToDecimal(dr["vMedexResult"].ToString().Split('-')[0]).ToString(), Convert.ToString(dr["vHighRange"])) > 0)
							{
								icount = 1;
								break;
							}
							else
							{
								icount = 0;
							}
						}
						if (NumericHelper.IsNumeric(dr["vMedexResult"].ToString().Split('-')[1]))
						{
							if (string.CompareOrdinal(Convert.ToDecimal(dr["vMedexResult"].ToString().Split('-')[1]).ToString(), Convert.ToString(dr["vLowRange"])) < 0 || string.CompareOrdinal(Convert.ToDecimal(dr["vMedexResult"].ToString().Split('-')[1]).ToString(), Convert.ToString(dr["vHighRange"])) > 0)
							{
								icount = 1;
								break;
							}
							else
							{
								icount = 0;
							}
						}
					}
				}
			}

			if (icount == 0)
			{
				dv_checksubreport = dt_Subreport.Copy().DefaultView;
				dv_checksubreport.RowFilter = " Isnull(vMedexResult,'') <> '' OR Isnull(vLowRange,'') <> ''";
				if (dv_checksubreport.ToTable().Rows.Count > 0)
				{

					foreach (DataRow dr in dv_checksubreport.ToTable().Rows)
					{
						if (NumericHelper.IsNumeric(dr["vMedexResult"]) && NumericHelper.IsNumeric(dr["vLowRange"]) && NumericHelper.IsNumeric(dr["vHighRange"]))
						{
							if (Convert.ToDecimal(dr["vMedexResult"]) < Convert.ToDecimal(dr["vLowRange"]) || Convert.ToDecimal(dr["vMedexResult"]) > Convert.ToDecimal(dr["vHighRange"]))
							{
								icount = 1;
								break;
							}
							else
							{
								icount = 0;
							}
						}
					}
				}
			}


			if (icount == 0)
			{
				return true;
			}

			rDocument = new ReportDocument();
			rDocument.Load(Server.MapPath("Reports") + "\\RptReviewLabSubReport.rpt");
			//rDocument.SetDataSource(dt_Subreport.Copy())
			rDocument.SummaryInfo.ReportTitle = "Out of Summary Report";

			RepTbls = rDocument.Database.Tables;
			foreach (CrystalDecisions.CrystalReports.Engine.Table RepTbl in RepTbls)
			{
				TableLogOnInfo RepTblLogonInfo = RepTbl.LogOnInfo;
				RepTblLogonInfo.ConnectionInfo = ConnInfo;
				RepTbl.ApplyLogOnInfo(RepTblLogonInfo);
				RepTbl.Location = strDatabasename + ".dbo." + RepTbl.Location.Substring(RepTbl.Location.LastIndexOf(".") + 1);
			}

			paramField = rDocument.DataDefinition.ParameterFields["@nSampleID"];
			currval.Value = nSampleID;
			currentValues = paramField.CurrentValues;
			currentValues.Add(currval);
			paramField.ApplyCurrentValues(currentValues);

			if (!ExportToPDF(rptNo, 0, foldername, true))
			{
				return false;
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....LabReport", ex);
			return false;
		}
	}

	private bool CRFReport(string rptno, string SubjectId, string foldername, string SubjectNo, string SubjectInitial)
    {
		object Wstr = "";
		dynamic Wstr_nodeid = "";
		object PrevSubGroupCodes = "";
		object headercontent = "";
		object NodeDisplayName = "" ;
		object Prev_SubjectId = "" ;
		object SubjectName = "" ;
		object NodeIds = "" ;
		object strProfileStatus = "" ;
		object SiteId = "" ;
		string ProjectNo = "";
		DataSet ds_CRFHdrDtlSubDtl = new DataSet();
		DataSet ds_header = new DataSet();
		PlaceHolder PlaceHolder_crfPrint = new PlaceHolder();
		PlaceHolder PlaceHolder_ODMPrint = new PlaceHolder();
		DataTable dt = new DataTable();
		DataTable dt_MedExMst = new DataTable();
		DataTable dt_MedexGroup = new DataTable();
		DataTable dtNodeID = new DataTable();
		DataTable dtPeriod = new DataTable();
		DataTable dtParentActivity = new DataTable();
		DataTable dtMain = new DataTable();
		DataTable dtData = new DataTable();
		DataTable dt_Subject = new DataTable();
		DataView dv = new DataView();
		DataView dv_MedexGrp = new DataView();
		DataView dvMain = new DataView();
		DataView dvSort = new DataView();
		DataView dvsubject = new DataView();
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim dr, drGroup As DataRow
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim drGroup As DataRow
		object objelement = null;
        var CntSubGroup = 0;
        object Nodeid = 0;
        var Index = 0;
        var SubjectIndex = 0;
        var MedIndex = 0;
        var Identifier = 0;
        object ParentNodeId = 0;
        object PreviousParentNodeId = 0;
		object Period = 0 ;
		int PreviousPeriod = 0;
		int PreviousNodeID = 1;
		System.Drawing.Font pdfFont = null;
		Document d1 = null;
		System.Drawing.Font watermarkTextFont = null;
		TextElement watermarkTextElement = null;
		string[] Project = null;
		Document d2 = null;
		string Repeatno = string.Empty;
		//Added by Kruti Salot
		DataSet ds_CRFWorkFlowHistory = new DataSet();
		DataTable dtCRFWorkFlowHistory = new DataTable();
		DataSet ds_CRFDataChangeHistory = new DataSet();
		DataTable dtCRFDataChangeHistory = new DataTable();
		DataSet ds_ODMStatusReport = new DataSet();
		DataTable dtODMStatusReport = new DataTable();
		DataSet dsDCFStatusReport = new DataSet();
		DataTable dtDCFStatusReport = new DataTable();
		DataTable dtCRFWorkFlowHistoryDtl = null;
		DataSet dsWorkSpaceId = new DataSet();
		DataSet dsCRFVersionReport = new DataSet();
		DataTable dtCRFVersionReport = new DataTable();
		string wstr_FetchDetails = string.Empty;
		string wstr2 = string.Empty;
		string AuthenticatedOn = null;
		//End by kruti salot
		try
		{
			Wstr = "vWorkSpaceId = '" + this.HProjectId.Value.Trim() + "' And iNodeId in(";
			//If Me.ViewState(IsProjectLock) AndAlso Me.ddlActivityType.SelectedIndex = 2 Then
			//    For Each row As GridViewRow In gvwActivity.Rows
			//        If row.RowType = DataControlRowType.DataRow Then
			//            Wstr_nodeid += row.Cells(GVA_NodeID).Text.ToString() + ","
			//        End If
			//    Next
			//Else
			//    For Each row As GridViewRow In gvwActivity.Rows
			//        If row.RowType = DataControlRowType.DataRow Then
			//            If CType(row.FindControl("chkSelect"), HtmlInputCheckBox).Checked Then
			//                Wstr_nodeid += row.Cells(GVA_NodeID).Text.ToString() + ","
			//            End If
			//        End If
			//    Next
			//End If
			foreach (GridViewRow row in gvwActivity.Rows)
			{
				if (row.RowType == DataControlRowType.DataRow)
				{
					if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
					{
						Wstr_nodeid += row.Cells[GVA_NodeID].Text.ToString() + ",";
					}
				}
			}
			if (Wstr_nodeid.Contains(","))
			{
				Wstr_nodeid = Wstr_nodeid.Substring(0, Wstr_nodeid.LastIndexOf(","));
			}
			Wstr += Wstr_nodeid.ToString() + ")";

			if (string.IsNullOrEmpty(SubjectId.Trim()))
			{
				Wstr += " And vMedExType <> 'Import' ";
				Wstr += " order by iPeriod,iNodeNo,iNodeId,vMedExGroupCode,vMedExSubGroupCode,iSeqNo,RepetitionNo"; //For Lambda
				if (!this.objHelp.View_BlankCRF(Convert.ToString(Wstr), WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_CRFHdrDtlSubDtl, ref eStr_Retu))
				{
					throw new Exception(eStr_Retu);
				}
			}
			else
			{
				Wstr += " ANd cActiveFlag <> 'N' ";
				Wstr += " And vSubjectId in ('" + SubjectId + "')";
				Wstr += " Order by iPeriod,iNodeNo,iNodeId,vMedExGroupCode,vMedExSubGroupCode,iSeqNo,View_CRFHdrDtlSubDtl_Print.iRepeatNo,vActivityId,vSubjectId,vMedExDesc";
				Wstr += " OPTION (MAXDOP 1)";
				objHelp.Timeout = -1;
				if (!this.objHelp.View_CRFHdrDtlSubDtl_Print(Convert.ToString(Wstr), "*,DENSE_RANK() OVER(PARTITION BY nCRFHdrNo,vActivityId,vSubjectId ORDER BY nCRFHdrNo,vActivityId,vSubjectId,iRepeatNo) as [RepetitionNo] ", ref ds_CRFHdrDtlSubDtl, ref eStr_Retu))
				{
					throw new Exception(eStr_Retu);
				}
				objHelp.Timeout = -1;

				dtCRFWorkFlowHistory = CRFReportStatusHistoryReport(rptno, SubjectId, foldername, SubjectNo, SubjectInitial);
				dtCRFDataChangeHistory = CRFReportDatachangeHistoryReport(rptno, SubjectId, foldername, SubjectNo, SubjectInitial);
				dtODMStatusReport = ODMStatusReport(rptno, SubjectId, foldername, SubjectNo, SubjectInitial);
				dtDCFStatusReport = DCFReport(rptno, SubjectId, foldername, SubjectNo, SubjectInitial);
				dtCRFVersionReport = CRFVersionHistoryReport(rptno, SubjectId, foldername, SubjectNo, SubjectInitial);
			}

			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Table>"));

			if (ds_CRFHdrDtlSubDtl.Tables[0].Rows.Count > 1)
			{
				dvsubject = ds_CRFHdrDtlSubDtl.Tables[0].Copy().DefaultView.ToTable(true, "iParentNodeId,ParentActivityName,ParentNodeNo".Split(',')).DefaultView;
				dvsubject.Sort = " iParentNodeId asc";



                //if (dvsubject.ToTable().Rows[0]["iParentNodeId"].ToString() == "1")
                if (dvsubject.ToTable().Rows.Count == 1)
                {
                    if (dvsubject.ToTable().Rows[0]["iParentNodeId"].ToString() == "1")
                    {
                        return true;
                    }

                //return true;
                }

                else if (dvsubject.ToTable().Rows.Count == 0)
                {
                    return true;
                }
                
				dt_Subject = ds_CRFHdrDtlSubDtl.Tables[0].Copy().DefaultView.ToTable(true, "vSubjectId,vSubjectName".Split(','));
				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table style=\" Width:100%; Font -family :'Times New Roman' !important;\">"));

                foreach (DataRow dr_Subject in dt_Subject.Rows)
                {
					SubjectIndex += 1;
					SubjectId = Convert.ToString(dr_Subject["vSubjectId"]).Trim();
					SubjectName = Convert.ToString(dr_Subject["vSubjectName"]).Trim();
					dtPeriod = ds_CRFHdrDtlSubDtl.Tables[0].Copy().DefaultView.ToTable(true, "iPeriod".Split(','));
					Period = 0;
					PreviousPeriod = 0;
					int NoRowCount = 0;

					int TotalCRFCount = 0;

					//******************************************************************************************************************************
					//******************************************************************************************************************************
					//******************************************************************************************************************************
					//******************************************************************************************************************************
					//******************************************************************************************************************************
					//******************************************************************************************************************************
					//******************************************************************************************************************************
					foreach (GridViewRow row in gvwReportType.Rows)
					{

						if (row.RowType == DataControlRowType.DataRow)
						{

							if (((HtmlInputCheckBox)row.FindControl("chkSelect")).Checked)
							{

								//If TotalCRFCount = 0 And (row.Cells(GVR_DisplayName).Text.ToString().Split("#")(0).IndexOf(VAR_ECRF_CRF_Report.ToString) > -1 Or + _
								//      row.Cells(GVR_DisplayName).Text.ToString().Split("#")(0).IndexOf(VAR_ECRF_CRF_Status_History.ToString) > -1 Or + _
								//                 row.Cells(GVR_DisplayName).Text.ToString().Split("#")(0).IndexOf(VAR_ECRF_Data_Change_History.ToString) > -1) Then
								if (TotalCRFCount == 0 && (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "3" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "4" ||  row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "5"))
								{

									TotalCRFCount += 1;
									foreach (DataRow drPeriod in dtPeriod.Rows)
									{
										Period = drPeriod["iPeriod"];
										// PreviousPeriod = drPeriod("iPeriod")
										dvMain = ds_CRFHdrDtlSubDtl.Tables[0].Copy().DefaultView;
										dvMain.RowFilter = "iPeriod = " + Period.ToString();
										dvSort = dvMain.ToTable().Copy().DefaultView.ToTable(true, "iParentNodeId,ParentActivityName,ParentNodeNo".Split(',')).DefaultView;
										dvSort.RowFilter = "isnull(iParentNodeId,0) <> 0";
										dvSort.Sort = "ParentNodeNo asc";
										dtParentActivity = dvSort.ToTable();
										ParentNodeId = 0;
										PreviousParentNodeId = 0;
										foreach (DataRow drParentActivity in dtParentActivity.Rows)
										{
											ParentNodeId = drParentActivity["iParentNodeID"];
											if (Convert.ToInt32(ParentNodeId) == 1)
											{
												continue;
											}
											if (ParentNodeId != PreviousParentNodeId && Convert.ToInt32(ParentNodeId) != 0)
											{
												if (Convert.ToInt32(ParentNodeId) != 1)
												{
													//Code added by Kruti Salot
													if (chkSubactivityWise.Checked == true)
													{
														if (Convert.ToInt32(Period) != PreviousPeriod && NoRowCount == 0)
														{
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; \">")); //008ecd''redish orange for parent activity
														}
														else if (Convert.ToInt32(Period) == PreviousPeriod && NoRowCount != 0)
														{
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; \">")); //008ecd''redish orange for parent activity
														}
														else if (Convert.ToInt32(Period) != PreviousPeriod && NoRowCount != 0)
														{
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always; \">")); //008ecd''redish orange for parent activity
														}
													}
													else
													{
														//  PlaceMedEx.Controls.Add(New LiteralControl("<Tr data-toc-enable=""true"" data-toc-level=""1"" data-bookmark-enabled=""true"" data-bookmark-level=""1"" data-bookmark-text=""" + Convert.ToString(drParentActivity("ParentActivityName")).Trim() + """ width=""100%"" ALIGN=LEFT style=""BACKGROUND-COLOR: #FFB895; page-break-inside:avoid; "">")) '008ecd''redish orange for parent activity
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + Convert.ToString(drParentActivity["ParentActivityName"]).Trim() + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895;  page-break-before:always;\">")); //008ecd''redish orange for parent activity
													}
													// End.
													if (Convert.ToInt32(PreviousParentNodeId) == 0)
													{
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
													}
													else
													{
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
													}
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString(drParentActivity["ParentActivityName"]).Trim()));
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
												}
											}
											PreviousPeriod = Convert.ToInt32(drPeriod["iPeriod"]);
											PreviousParentNodeId = drParentActivity["iParentNodeID"];
											dvMain.RowFilter = "(iPeriod = " + Period.ToString() + " And iNodeId = " + ParentNodeId.ToString() + ") Or (iPeriod = " + Period.ToString() + " And iParentNodeId = " + ParentNodeId.ToString() + ")";
											dtMain = dvMain.ToTable().Copy();
											dvSort = null;
											dvSort = dtMain.Copy().DefaultView.ToTable(true, "iNodeID,vNodeDisplayName,iNodeNo,ParentNodeNo".Split(',')).DefaultView;
											dvSort.Sort = "ParentNodeNo,iNodeNo asc";
											dtNodeID = dvSort.ToTable();
											Nodeid = 0;
											PreviousNodeID = 0;
											foreach (System.Data.DataRow drNode in dtNodeID.Rows)
											{
												//Added by Kruti Salot
												if (chkSubactivityWise.Checked == true)
												{
													if (PreviousNodeID != 0)
													{
														// PlaceMedEx.Controls.Add(New LiteralControl("<Tr data-toc-enable=""true"" data-toc-level=""1"" width=""100%"" ALIGN=LEFT style=""BACKGROUND-COLOR: #FFB895; page-break-before:always; "">")) '008ecd''redish orange for parent activity
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-toc-enable=\"true\" data-toc-level=\"1\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #FFB895; page-break-before:always;\">")); //008ecd''redish orange for parent activity
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman' !Important; font-size:12px;  font-weight:bold;\">")); //white-space: nowrap;
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString(drParentActivity["ParentActivityName"]).Trim()));
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
														PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
													}
													string strPlaceValu = RenderControl(PlaceHolder_crfPrint);
												}
												//End.
												NodeIds += Convert.ToString(drNode["iNodeID"]).Trim() + ",";
												Nodeid = drNode["iNodeID"];
												NodeDisplayName = Convert.ToString(drNode["vNodeDisplayName"]).Trim();
												dv_MedexGrp = dtMain.Copy().DefaultView;
												dv_MedexGrp.RowFilter = "iNodeID = " + Nodeid.ToString(); // + " And vSubjectId = '" + SubjectId + "'"
												DataTable dt_Repeatition = dv_MedexGrp.ToTable(true, "RepetitionNo".Split(','));
												int PreviousRepeatition = 0;
												foreach (DataRow drRepeatition in dt_Repeatition.Rows)
												{
													dv_MedexGrp.RowFilter = "RepetitionNo = " + Convert.ToString(drRepeatition["RepetitionNo"]).ToString();
													//Added by Kruti Salot
													Repeatno = Convert.ToString(drRepeatition["RepetitionNo"]).ToString();
													//end
													dt_MedexGroup = dv_MedexGrp.ToTable(true, "vMedExGroupCode".Split(','));
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
													if (PreviousRepeatition != Convert.ToInt32(drRepeatition["RepetitionNo"]))
													{
														if ((PreviousNodeID != Convert.ToInt32(Nodeid)) || (PreviousNodeID == Convert.ToInt32(Nodeid) && PreviousRepeatition != Convert.ToInt32(drRepeatition["RepetitionNo"])))
														{
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //'blue line of activity
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"2\"  data-bookmark-text=\"" + ((Convert.ToInt32(drRepeatition["RepetitionNo"]) > 1) ? NodeDisplayName.ToString() + " , Repetition-" + Convert.ToString(drRepeatition["RepetitionNo"]) : NodeDisplayName) + "\" width=\"100%\" color:#FFFFFF; ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; page-break-inside:avoid;\">")); //008ecd
															if (Convert.ToInt32(ParentNodeId) == 1)
															{
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;color:#FFFFFF;  width: 80%;\">")); //white-space: nowrap;
															}
															else
															{
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle;color:#FFFFFF;  width: 80%;\">")); //white-space: nowrap;
															}
															dvMain.RowFilter = "iNodeId = " + Nodeid.ToString();
															dtData = dvMain.ToTable();
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
															if (Convert.ToInt32(drRepeatition["RepetitionNo"]) > 1)
															{
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString(NodeDisplayName.ToString() + ", Repetition: " + Convert.ToString(drRepeatition["RepetitionNo"]))));
															}
															else
															{
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString(NodeDisplayName)));
															}
															if (RBLProjecttype.SelectedIndex == 1)
															{
																if (dtData.Rows.Count > 0)
																{
																	if (!string.IsNullOrEmpty(dtData.Rows[0]["vMedExGroupCDISCValue"].ToString()))
																	{
																		PlaceHolder_crfPrint.Controls.Add(GetMedExGroupCDISC(((dtData.Rows[0]["vMedExGroupCDISCValue"] == System.DBNull.Value) ? " " : Convert.ToString(dtData.Rows[0]["vMedExGroupCDISCValue"])), Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]), Convert.ToString(dtData.Rows[0]["vMedExSubGroupCode"]), Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]) + Convert.ToString(dtData.Rows[0]["vMedExSubGroupCode"]) + Convert.ToString(dtData.Rows[0]["vMedExGroupCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
																	}
																}
															}
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
															if (!(Convert.ToInt32(this.Session[GeneralModule.S_ScopeNo]) == GeneralModule.Scope_ClinicalTrial))
															{
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td align=\"right\"  style=\"color:#FFFFFF ;width: 20%\">")); //'style=""vertical-align:right;""
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;Period: "));
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Period.ToString()));
																PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
															}
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>")); //'activty row done
															PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Table>"));
														}
													}
													PreviousRepeatition = Convert.ToInt32(drRepeatition["RepetitionNo"]);
													PreviousNodeID = Convert.ToInt32(drNode["iNodeID"]);
													Index = 0;

													//***************************************************************************************************************
													//***************************************************************************************************************
													//***************************************************************************************************************
													//***************************************************************************************************************

													foreach (GridViewRow row1 in gvwReportType.Rows)
													{
														if (row1.RowType == DataControlRowType.DataRow)
														{
															if (((HtmlInputCheckBox)row1.FindControl("chkSelect")).Checked)
															{

																if (row1.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "3")
																{
																	PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr>"));
																	PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td>"));
																	PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
																	foreach (DataRow drGroup in dt_MedexGroup.Rows)
																	{
																		Index += 1;
																		dt = new DataTable();
																		dt_MedExMst = new DataTable();
																		dt = dtMain.Copy();
																		dv = new DataView();
																		dv = dt.DefaultView;
																		dv.RowFilter = "iNodeID = " + Nodeid.ToString() + " And vMedExGroupCode='" + drGroup["vMedExGroupCode"].ToString().Trim() + "'" + " And vSubjectId = '" + SubjectId + "' And RepetitionNo = " + Convert.ToString(drRepeatition["RepetitionNo"]);
																		dv.Sort = "iSeqNo asc";
																		dt_MedExMst = dv.ToTable();
																		MedIndex = 0;
																		foreach (DataRow dr in dt_MedExMst.Rows)
																		{
																			MedIndex += 1;
																			if (Convert.ToString(PrevSubGroupCodes) == "" || PrevSubGroupCodes != dr["vMedExSubGroupCode"])
																			{
																				if (Convert.ToString(dr["vMedExSubGroupCode"]).Trim() != "0000") //Added for default SubGroup
																				{
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #ffcc66; page-break-inside:avoid;\">")); //ffcc66
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td colspan=\"2\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important; border: solid 1px gray !important; font-size:12px;\">"));
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																					PlaceHolder_crfPrint.Controls.Add(Getlable(dr["vMedExSubGroupDesc"].ToString().Trim(), Convert.ToString(dr["vMedExSubGroupCode"] + CntSubGroup.ToString().Trim() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString())));
																					CntSubGroup += 1;
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																				}
																			}
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT style=\"page-break-inside:avoid;\">"));
																			PrevSubGroupCodes = dr["vMedExSubGroupCode"];
																			if (Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "LABEL")
																			{
																				Identifier += 1;
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td width=\"60%\" style=\"  font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important; \" ALIGN=LEFT>")); //border:1px solid gray;
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																				PlaceHolder_crfPrint.Controls.Add(GetlableWithHistory(Convert.ToString(dr["vMedExDesc"].ToString() + ": "), Convert.ToString(dr["vMedExGroupCode"]), Convert.ToString(dr["vMedExSubGroupCode"]), Convert.ToString(dr["vMedExGroupCode"]) + Convert.ToString(dr["vMedExSubGroupCode"]) + Convert.ToString(dr["vMedExCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
																				if (RBLProjecttype.SelectedIndex == 1)
																				{
																					PlaceHolder_crfPrint.Controls.Add(GetCDISC(((dr["vCDISCValues"] == System.DBNull.Value) ? " " : Convert.ToString(dr["vCDISCValues"])), Convert.ToString(dr["vMedExGroupCode"]), Convert.ToString(dr["vMedExSubGroupCode"]), Convert.ToString(dr["vMedExGroupCode"]) + Convert.ToString(dr["vMedExSubGroupCode"]) + Convert.ToString(dr["vMedExCode"]) + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + Identifier.ToString()));
																				}
																				if (chkDataType.Checked == true)
																				{
																					string[] str = null;
																					if (!(dr["vValidationType"] == System.DBNull.Value) && !string.IsNullOrEmpty(Convert.ToString(dr["vValidationType"]).Trim()))
																					{
																						if (Convert.ToString(dr["vMedExType"]).ToUpper() == "TEXTBOX" || Convert.ToString(dr["vMedExType"]).ToUpper() == "TEXTAREA")
																						{
																							PlaceMedEx.Controls.Add(new LiteralControl("&nbsp;&nbsp;&nbsp;"));
																							str = Convert.ToString(dr["vValidationType"]).Split(',');
																							if ((str.Length == 2 && !string.IsNullOrEmpty(str[1])))
																							{
																								if (Convert.ToString(str[0]).Contains("IN"))
																								{
																									PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("IN", "I") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																								}
																								else if (Convert.ToString(str[0]).Contains("AL"))
																								{
																									PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("AL", "A") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																								}
																								else
																								{
																									PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("AL", "A") + " (" + str[1] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																								}
																							}
																							else if ((str[0] == "NU" && str.Length == 3))
																							{
																								PlaceMedEx.Controls.Add(GetlableForDatatype("[ " + Convert.ToString(str[0]).Replace("NU", "N") + " (" + str[1] + "," + str[2] + ") " + " ]", "ValidationType" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																							}
																							else
																							{
																								//PlaceMedEx.Controls.Add(GetlableForDatatype("[" + Convert.ToString(str(0)).Replace("IN", "I") + "]", "ValidationType" + dr("vMedExCode") + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()))
																							}
																						}
																					}
																				}
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td width=\"40%\" style=\"vertical-align:middle; font-family:'Times New Roman' !Important; font-size:12px; border: solid 1px gray !important;\" ALIGN=LEFT>")); //border:1px solid gray;'white-space: nowrap;
																			}
																			else
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td colspan=\"2\" style=\" !important; vertical-align:middle; border:1px solid gray !Important;\" ALIGN=LEFT>"));
																			}
																			if (Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "LABEL" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "FILE" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "RADIO" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "CHECKBOX" && Convert.ToString(dr["vMedExType"]).Trim().ToUpper() != "COMBOBOX")
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;&nbsp;"));
																			}
																			MainIdentifier += 1;
																			objelement = GetObject(Convert.ToString(dr["vMedExType"]), Convert.ToString(dr["vMedExCode"] + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()), Convert.ToString(dr["vMedExValues"]), ((dr["vDefaultValue"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vDefaultValue"])), ((dr["vRefTable"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vRefTable"])), ((dr["vRefColumn"] == System.DBNull.Value) ? "" : Convert.ToString(dr["vRefColumn"])));
																			PlaceHolder_crfPrint.Controls.Add((System.Web.UI.Control)objelement);
																			if (!(dr["vUOM"] == System.DBNull.Value) && !string.IsNullOrEmpty(Convert.ToString(dr["vUOM"]).Trim()))
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;&nbsp;&nbsp;"));
																				PlaceHolder_crfPrint.Controls.Add(GetlableUOM(Convert.ToString(dr["vUOM"]), "UOM" + dr["vMedExCode"].ToString() + Nodeid.ToString() + "R" + Index.ToString() + SubjectIndex.ToString() + MedIndex.ToString() + MainIdentifier.ToString()));
																			}
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																		}
																	}
																	PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Table>"));
																	PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																	PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																}
																//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("</Td>"))
																//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("</Tr>"))
																//*********************************************************************************************************************************************************
																//****************************************************** ECRF Status History Start *****************************************************************************
																//*********************************************************************************************************************************************************
																if (row1.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "4")
																{
																	//'Added by Kruti Salot
																	//'Code for CRF Status History change
																	if (dtCRFWorkFlowHistory.Rows.Count > 0)
																	{

																		dtCRFWorkFlowHistory.DefaultView.RowFilter = "vWorkSpaceId ='" + this.HProjectId.Value.Trim() + "'   " + " And vSubjectId = '" + SubjectId.ToString() + "'" + " And iNodeId = '" + Nodeid.ToString() + "'" + " And iPeriod = '" + Period.ToString() + "'" + " And iRepeatNo ='" + Repeatno.ToString() + "'";
																		if (dtCRFWorkFlowHistory.DefaultView.ToTable().Rows.Count > 0)
																		{
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr width=\"90%\" ALIGN=LEFT style=\"page-break-inside:avoid;\">"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center;color:#FFFFFF; font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"3\" data-bookmark-text=\"" + "eCRF Status History Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #b7c6e5; page-break-inside:avoid;\">")); //008ecd''redish orange for parent activity
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center;color:#FFFFFF; font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString("eCRF Status History Report")));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:White;background-color:White;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;page-break-inside:avoid;\">"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:gray;width:10%;\">Sr No.</th>"));
																			//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:gray;width:20%;"">Project No.</th>"))
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:gray;width:20%;\">Status</th>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:gray;width:25%;\">Status Changed By</th>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:gray;width:25%;\">Status Changed On</th>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
																			for (int Count_dt = 0; Count_dt < dtCRFWorkFlowHistory.DefaultView.ToTable().Rows.Count; Count_dt++)
																			{
																				if ((Count_dt + 1) % 2 == 0)
																				{
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-word;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
																				}
																				else
																				{
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-word;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
																				}
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + (Count_dt + 1).ToString() + "</td>"));
																				//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:20%; vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;"">" + ProjectNo.ToString + "</td>"))
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:20%; vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFWorkFlowHistory.DefaultView.ToTable().Rows[Count_dt]["Reviewer"].ToString() + "</td>"));
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:25%; vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFWorkFlowHistory.DefaultView.ToTable().Rows[Count_dt]["StatusChangedBy"].ToString() + "</td>"));
																				if (string.IsNullOrEmpty(dtCRFWorkFlowHistory.DefaultView.ToTable().Rows[Count_dt]["dModifyOn"].ToString()))
																				{
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:25%; vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + "" + "</td>"));
																				}
																				else
																				{
																					PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:25%; vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + Convert.ToString(DateTime.Parse(dtCRFWorkFlowHistory.DefaultView.ToTable().Rows[Count_dt]["dModifyOn"].ToString()).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset) + "</td>"));
																				}
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
																			}
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</table>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
																		}
																	}
																}
																//'End By Kruti Salot
																//*********************************************************************************************************************************************************
																//****************************************************** ECRF status History End *****************************************************************************
																//*********************************************************************************************************************************************************
																//*********************************************************************************************************************************************************
																//****************************************************** ECRF Data Change History Start *****************************************************************************
																//*********************************************************************************************************************************************************
																//'Added by Kruti Salot
																//'Code for CRF Data Change History change
																if (row1.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "5")
																{
																	dtCRFDataChangeHistory.DefaultView.RowFilter = "vWorkSpaceId ='" + this.HProjectId.Value.Trim() + "'   " + " And vSubjectId = '" + SubjectId.ToString() + "'" + " And iNodeId = '" + Nodeid.ToString() + "'" + " And [Period]= '" + Period.ToString() + "'" + " And [Repeat No] ='" + Repeatno.ToString() + "'";
																	if (dtCRFDataChangeHistory.DefaultView.ToTable().Rows.Count > 0)
																	{
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr width=\"90%\" ALIGN=LEFT style=\"page-break-inside:avoid;\">"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center;color:#FFFFFF; font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"3\" data-bookmark-text=\"" + "eCRF Data Change Status Report" + "\" width=\"100%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #b7c6e5; page-break-inside:avoid;\">")); //008ecd''redish orange for parent activity
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; color:#FFFFFF;font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString("eCRF Data Change Status Report")));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:White;background-color:White;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;\">"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:5%;\">Sr No.</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:5%;\">Tran. No</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:15%;\">Attribute Name</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:22%;\">Attribute Value</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:19%;\">Modification Remark</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:15%;\">Modify By</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"background-color:gray;font-size:12px;width:19%;\">Modify On</th>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
																		for (int Count_dt = 0; Count_dt < dtCRFDataChangeHistory.DefaultView.ToTable().Rows.Count; Count_dt++)
																		{
																			if ((Count_dt + 1) % 2 == 0)
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
																			}
																			else
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
																			}
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%;vertical-align:middle; horizontal;-align:center; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + (Count_dt + 1).ToString() + "</td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%;vertical-align:middle; horizontal;-align:center; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Transaction No"].ToString() + "</td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%;vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Attribute Name"].ToString() + "</td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:22%;vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Attribute Value"].ToString() + "</td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:19%;vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Modification Remark"].ToString() + "</td>"));
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:15%;vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Modify By"].ToString() + "</td>"));
																			if (string.IsNullOrEmpty(dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Modify On"].ToString()))
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:19%;vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + "" + "</td>"));
																			}
																			else
																			{
																				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:19%;vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;\">" + dtCRFDataChangeHistory.DefaultView.ToTable().Rows[Count_dt]["Modify On"].ToString() + "</td>"));
																			}
																			PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
																		}
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</table>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</td>"));
																		PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
																	}
																}
															}
														}
													}


													//*********************************************************************************************************************************************************
													//****************************************************** ECRF Data Change History End *****************************************************************************
													//*********************************************************************************************************************************************************
												}
											}
											NoRowCount = NoRowCount + 1;
										}
									}
								}
								//*********************************************************************************************************************************************************
								//****************************************************** ODM Status Report Start *****************************************************************************
								//*********************************************************************************************************************************************************
								//If row.Cells(GVR_DisplayName).Text.ToString().Split("#")(0).IndexOf(VAR_ECRF_ODM_status_Report.ToString) > -1 Then
								if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "7")
								{

									dtODMStatusReport.DefaultView.RowFilter = "vWorkSpaceId ='" + this.HProjectId.Value.Trim() + "'   " + " And SubjectId = '" + SubjectId.ToString() + "'";
									if (dtODMStatusReport.DefaultView.ToTable().Rows.Count > 0)
									{

										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + "SEC Report" + "\" width=\"90%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: #008ecd; page-break-inside:avoid;page-break-before:always\">")); //008ecd''redish orange for parent activity
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; color:white;font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString("SEC Report")));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:black;background-color:White;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;\">"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:2%;background-color:lightgray;\">Sr No.</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:5%;background-color:lightgray;\">Repetition No.</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:12%;background-color:lightgray;\">Visit</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:15%;background-color:lightgray;\">Activity</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:15%;background-color:lightgray;\">Attribute</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:10%;background-color:lightgray;\">Old Value</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:10%;background-color:lightgray;\">Modified Value</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:13%;background-color:lightgray;\">Modification Remark</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:10%;background-color:lightgray;\">Modified By</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;width:10%;background-color:lightgray;\">Modified Date</th>"));
										//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""word-break: break-word;background-color:gray;"">Data Entry By</th>"))
										//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""word-break: break-word;background-color:gray;"">DataEntry Date</th>"))
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
										for (int Count_dt = 0; Count_dt < dtODMStatusReport.DefaultView.ToTable().Rows.Count; Count_dt++)
										{
											if ((Count_dt + 1) % 2 == 0)
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											else
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:2%;color:#000;\">" + (Count_dt + 1).ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:5%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["Repeatation"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:12%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["ParentvNodeDisplayName"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:15%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["Activity"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:15%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["Attribute"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:10%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["Value"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:10%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["LastUpdatedValue"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:13%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["vModificationRemark"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:10%;color:#000;\">" + dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["UpdatedBy"].ToString() + "</td>"));
											if (string.IsNullOrEmpty(dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["UpdatedDate"].ToString()))
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:10%;color:#000;\">" + "" + "</td>"));
											}
											else
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px black !important;word-break: break-all;width:10%;color:#000;\">" + Convert.ToString(DateTime.Parse(dtODMStatusReport.DefaultView.ToTable().Rows[Count_dt]["UpdatedDate"].ToString()).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset) + "</td>"));
											}
											// PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;"">" + dtODMStatusReport.DefaultView.ToTable.Rows(Count_dt).Item("DataEntryBy").ToString + "</td>"))
											//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: solid 1px gray !important;word-break: break-all;color:#000;"">" + dtODMStatusReport.DefaultView.ToTable.Rows(Count_dt).Item("DataEntryDate").ToString + "</td>"))
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
										}
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</table>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</td>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));

									}
								}
								//*********************************************************************************************************************************************************
								//****************************************************** ODM Status Report End *****************************************************************************
								//*********************************************************************************************************************************************************
								//*********************************************************************************************************************************************************
								//****************************************************** DCF Status Report Start *****************************************************************************
								//*********************************************************************************************************************************************************
								if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "6")
								{

									if (dtDCFStatusReport.Rows.Count > 0)
									{

										dtDCFStatusReport.DefaultView.RowFilter = "vWorkSpaceId ='" + this.HProjectId.Value.Trim() + "'   " + " And SubjectId = '" + SubjectId.ToString() + "'";
										if (dtDCFStatusReport.DefaultView.ToTable().Rows.Count > 0)
										{

											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + "CRF DCF Report" + "\" width=\"90%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always;page-break-inside:avoid;\">")); //008ecd''redish orange for parent activity
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; color:#FFFFFF;font-family:'Times New Roman'; font-size:12px; font-weight:bold; \">")); //white-space: nowrap;
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString("CRF DCF Report")));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;\">")); //Added on 30-01-2010 to fix the size of display
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:black;background-color:White;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;page-break-inside:avoid;\">"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:1%;\">Sr No.</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:2%;\">Repetition No.</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:2%;\">Visit</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:3%;\">Activity</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Attribute</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:8%;\">Discrepancy on Value</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">DCF Type</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:21%;\">Query</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Created By</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Created Date</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">Status</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Modified Value</th>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Modification Remarks</th>"));
											//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:8%;"">Updated By</th>"))
											//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<th scope=""col"" style=""font-size:12px;background-color:lightgray;width:10%;"">Updated Date</th>"))
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
											for (int Count_dt = 0; Count_dt < dtDCFStatusReport.DefaultView.ToTable().Rows.Count; Count_dt++)
											{
												if ((Count_dt + 1) % 2 == 0)
												{
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
												}
												else
												{
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#fff;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
												}
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px; width:1%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:1%;\">" + (Count_dt + 1).ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:2%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["Repeatation"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:2%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["Visit"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:3%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["Activity"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:5%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["Attribute"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:8%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["DiscrepancyValue"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["DCFType"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:21%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:21%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["Response"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["CreatedBy"].ToString() + "</td>"));
												if (string.IsNullOrEmpty(dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["CreatedDate"].ToString()))
												{
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + "" + "</td>"));
												}
												else
												{
													PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + Convert.ToString(DateTime.Parse(dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["CreatedDate"].ToString()).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset) + "</td>"));
												}
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["Status"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["vDefaultValue"].ToString() + "</td>"));
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:5%;\">" + dtDCFStatusReport.DefaultView.ToTable().Rows[Count_dt]["vModificationRemark"].ToString() + "</td>"));
												//PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:8%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:8%;"">" + dtDCFStatusReport.DefaultView.ToTable.Rows(Count_dt).Item("UpdatedBy").ToString + "</td>"))
												//If dtDCFStatusReport.DefaultView.ToTable.Rows(Count_dt).Item("UpdatedDate").ToString = "" Then
												//    PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;"">" + "" + "</td>"))
												//Else
												//    PlaceHolder_crfPrint.Controls.Add(New LiteralControl("<td  style=""font-family:'Times New Roman' !Important; font-size:12px; width:10%; vertical-align:middle; border: solid 1px black !important;word-break: break-all;color:#000;width:10%;"">" + Convert.ToString(CDate(dtDCFStatusReport.DefaultView.ToTable.Rows(Count_dt).Item("UpdatedDate").ToString).ToString("dd-MMM-yyyy HH:mm") + strServerOffset) + "</td>"))
												//End If
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
											}
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</table>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));

										}
									}

								}
								//*********************************************************************************************************************************************************
								//****************************************************** DCF Status Report end *****************************************************************************
								//*********************************************************************************************************************************************************
								//*********************************************************************************************************************************************************
								//****************************************************** CRF Version history start *****************************************************************************
								//*********************************************************************************************************************************************************
								// If CType(gvwReportType.Rows(ECRF_CRF_Version_History).FindControl("chkSelect"), HtmlInputCheckBox).Checked = True Or SubjectId.Trim() = "" Then
								if (row.Cells[GVR_ReportId].Text.ToString().Split('#')[0] == "8")
								{
									if (dtCRFVersionReport.Rows.Count > 0)
									{

										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"" + "eCRF Version history Report" + "\" width=\"90%\" ALIGN=LEFT style=\"BACKGROUND-COLOR: 008ecd; page-break-inside:avoid;page-break-before:always\">")); //008ecd''redish orange for parent activity
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:middle; text-align: center; font-family:'Times New Roman'; font-size:12px; color:#FFFFFF;font-weight:bold; \">")); //white-space: nowrap;
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("&nbsp;"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl(Convert.ToString("eCRF Version history Report")));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Td>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Tr>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Tr ALIGN=LEFT>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Td style=\"vertical-align:top;\">")); //white-space: nowrap;
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" cellspacing='0' style=\"font-family:'Times New Roman' !Important; font-size:12px; border-collapse: collapse !Important;page-break-inside:avoid;\">")); //Added on 30-01-2010 to fix the size of display
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr width=\"100%\"  align=\"center\" style=\"color:black;font-family:Times New Roman;font-size:0.9em;height:30px;page-break-inside:avoid;\">"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Sr No.</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:5%;\">Version No.</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:10%;\">Status</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Remark</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Version Date</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Modify By</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<th scope=\"col\" style=\"font-size:12px;background-color:lightgray;width:20%;\">Modify On</th>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
										for (int Count_dt = 0; Count_dt < dtCRFVersionReport.Rows.Count; Count_dt++)
										{
											if ((Count_dt + 1) % 2 == 0)
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											else
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<tr  width=\"100%\"  style=\" word-break: break-all;color:#000;background-color:White;font-family:Times New Roman;font-size:10pt;height:20px;page-break-inside:avoid;\">"));
											}
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + (Count_dt + 1).ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  align=\"center\" style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:5%;\">" + dtCRFVersionReport.Rows[Count_dt]["nVersionNo"].ToString() + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:10%;\">" + ((dtCRFVersionReport.Rows[Count_dt]["cFreezeStatus"].ToString().ToUpper().ToString() == "F") ? "Freeze" : "UnFreeze") + "</td>"));
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + dtCRFVersionReport.Rows[Count_dt]["vRemark"].ToString() + "</td>"));
											if (string.IsNullOrEmpty(dtCRFVersionReport.Rows[Count_dt]["dVersiondate"].ToString()))
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + "" + "</td>"));
											}
											else
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + Convert.ToString(DateTime.Parse(dtCRFVersionReport.Rows[Count_dt]["dVersiondate"].ToString()).ToString("dd-MMM-yyyy")) + "</td>"));
											}
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + dtCRFVersionReport.Rows[Count_dt]["vFirstName"].ToString() + "</td>"));
											if (string.IsNullOrEmpty(dtCRFVersionReport.Rows[Count_dt]["dModifyOn"].ToString()))
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + "" + "</td>"));
											}
											else
											{
												PlaceHolder_crfPrint.Controls.Add(new LiteralControl("<td  style=\"font-family:'Times New Roman' !Important; font-size:12px;  vertical-align:middle; border: 1px solid black !important;word-break: break-all;color:#000;width:20%;\">" + Convert.ToString(DateTime.Parse(dtCRFVersionReport.Rows[Count_dt]["dModifyOn"].ToString()).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset) + "</td>"));
											}
											PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));
										}
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</table>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</td>"));
										PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</tr>"));

									}
								}
							}
						}
					}
					//*********************************************************************************************************************************************************
					//****************************************************** CRF Version history end *****************************************************************************
					//*********************************************************************************************************************************************************
					Prev_SubjectId = Convert.ToString(dr_Subject["vSubjectId"]).Trim();
				}

				PlaceHolder_crfPrint.Controls.Add(new LiteralControl("</Table>"));


				string html1 = RenderControl(PlaceHolder_crfPrint);
				ds_header = (DataSet)this.ViewState[vs_View_getWorkspaceDetailForHdr];
				//=====================================Header==========================================
				string Path = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/"));
				Path = Path + "/images/lambda_logo.jpg";
				Project = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString().Split(':');
				Int32 strLen = Project[0].ToString().LastIndexOf("-");
				ProjectNo = Project[0].ToString();
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]) && strLen > 5)
				{
					ProjectNo = Project[0].Substring(0, strLen);
					strLen = strLen + 1;
					SiteId = Project[0].Substring(strLen);
				}
				headercontent += "<html><head></head><body>";
				headercontent += "<table style=\"margin-top: 2px; margin: auto; border: solid 1px black; width: 100%; font-family:'Times New Roman'; font-size:12px; \"align=\"left\">";
				headercontent += "<tr style=\" \">";
				headercontent += "<td valign=\"top\">";
				headercontent += "<table style=\"font-family: 'Times New Roman'; font-size:12px; \">";
				headercontent += "<tr style=\" \">";
				headercontent += "<td colspan=\"4\">";
				headercontent += "<Label  for \"" + ConfigurationManager.AppSettings["Client"].ToString() + "\">" + ConfigurationManager.AppSettings["Client"].ToString() + "</asp:Label>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				headercontent += "<td colspan=\"4\">";
				headercontent += "Sponsor Name:<Label  for \"" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "\">" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "</asp:Label>";
				headercontent += "</td>";
				headercontent += "</tr >";
				headercontent += "<tr style=\" \">";
				headercontent += "<td align=\"right\" colspan=\"4\" >";
				headercontent += "<h4>";
				headercontent += "CASE REPORT FORM</h4>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				headercontent += "<td align=\"right\">Project No:</td>";
				headercontent += "<td style=\"border: thin solid #000000;\">";
				headercontent += "<Label  for \"" + ProjectNo + "\">" + ProjectNo + "</asp:Label>";
				headercontent += "</td>";
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == true)
				{
					headercontent += "<td align=\"right\">Site Id:</td>";
					headercontent += "<td  style=\"border: thin solid #000000;\">";
					headercontent += "<Label  for \"" + SiteId.ToString() + "\">" + SiteId.ToString() + "</asp:Label>";
					headercontent += "</td>";
				}
				if (this.chkprotocolno.Checked == false)
				{
					if (ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim().Length > 0)
					{
						headercontent += "<td align=\"right\">Protocol No:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "\">" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "</asp:Label>";
						headercontent += "</td>";
					}
				}
				headercontent += "</tr>";
				headercontent += "<tr style=\" \">";
				if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
				{
					headercontent += "<td align=\"right\">Subject No:</td>";
					headercontent += "<td style=\"border: thin solid #000000;\">";
					headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
					headercontent += "</td>";
					if (this.chkinitial.Checked == false)
					{
						headercontent += "<td align=\"right\">Subject Initials:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
						headercontent += "</td>";
					}
				}
				else
				{
					headercontent += "<td align=\"right\">Subject No:</td>";
					headercontent += "<td style=\"border: thin solid #000000;\">";
					headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
					headercontent += "</td>";
					if (this.chkinitial.Checked == false)
					{
						headercontent += "<td align=\"right\">Subject Initials:</td>";
						headercontent += "<td  style=\"border: thin solid #000000;\">";
						headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
						headercontent += "</td>";
					}
				}
				headercontent += "</tr>";
				headercontent += "</table>";
				headercontent += "</td>";
				if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
				{
					headercontent += "<td valign=\"middle\">";
					headercontent += "<img id=ctl00_CPHLAMBDA_ImgsponsorLogo alt=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\" src=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
					headercontent += "</td>";
				}
				headercontent += "<td valign=\"middle\">";
				headercontent += "<img id=ctl00_CPHLAMBDA_ImgLogo alt=\"" + Path.ToString() + "\" src=\"" + Path.ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
				headercontent += "</td>";
				headercontent += "</tr>";
				headercontent += "</table>";
				headercontent += "</body></html>";
				//=========================================================================
				pdfFont = new System.Drawing.Font("Times New Roman", 12, FontStyle.Bold, GraphicsUnit.Point);
				//======================================htmltopdf======================================
				HtmlToPdfConverter pdfconverter = new HtmlToPdfConverter();
				pdfconverter.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
				pdfconverter.PdfDocumentOptions.AvoidImageBreak = true;
				pdfconverter.PdfDocumentOptions.AvoidTextBreak = true;
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.A4;
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.Letter;
				}
				pdfconverter.PdfDocumentOptions.PdfPageOrientation = PdfPageOrientation.Portrait;
				pdfconverter.PdfDocumentOptions.ShowHeader = true;
				pdfconverter.PdfDocumentOptions.ShowFooter = true;
				pdfconverter.PdfHeaderOptions.HeaderHeight = 125;
				pdfconverter.PdfFooterOptions.FooterHeight = 41;
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					pdfconverter.HtmlViewerWidth = 662; //'Previous 750, 647
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					pdfconverter.HtmlViewerWidth = 684; //'Previous 750, 647
				}
				pdfconverter.PdfDocumentOptions.FitWidth = false;
				pdfconverter.PdfDocumentOptions.JpegCompressionEnabled = true;
				pdfconverter.PdfDocumentOptions.JpegCompressionLevel = 0;
				pdfconverter.PdfDocumentOptions.PdfCompressionLevel = PdfCompressionLevel.Best;
				pdfconverter.PdfDocumentOptions.StretchToFit = true;
				pdfconverter.PdfDocumentOptions.LeftMargin = 72;
				pdfconverter.PdfDocumentOptions.RightMargin = 27;
				pdfconverter.PdfDocumentOptions.TopMargin = 27;
				pdfconverter.PdfDocumentOptions.BottomMargin = 5;
				string level1TextStyle = "font-family:'Times New Roman'; font-size:16px; text-decoration: underline;";
				pdfconverter.TableOfContentsOptions.SetItemStyle(1, level1TextStyle);
				pdfconverter.TableOfContentsOptions.SetItemStyle(2, level1TextStyle);
				pdfconverter.TableOfContentsOptions.SetItemStyle(3, level1TextStyle);
				pdfconverter.TableOfContentsOptions.AutoTocItemsEnabled = false;
				string level1PageNumberStyle = "padding-right:3px; font-family:'Times New Roman'; font-size:16px; text-decoration: underline; font-weight:bold";
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(1, level1PageNumberStyle);
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(2, level1PageNumberStyle);
				pdfconverter.TableOfContentsOptions.SetPageNumberStyle(3, level1PageNumberStyle);
				d2 = pdfconverter.ConvertHtmlToPdfDocumentObject(html1, string.Empty);
				byte[] bytes = null;
				//bytes = pdfconverter.ConvertHtml(Me.HFHeaderLabel.Value.ToString(), String.Empty)
				d2.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\BlankPage.pdf");
				d2.AutoCloseAppendedDocs = true;
				d2.Close();
				d2 = null;
				bytes = System.IO.File.ReadAllBytes(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\BlankPage.pdf");
				FileInfo fInfo = new FileInfo(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\BlankPage.pdf");
				if (fInfo.Exists)
				{
					fInfo.Delete();
				}
				string DocRemove = string.Empty;
				if (!FindBlankPage(ref DocRemove, bytes))
				{
					objCommon.ShowAlert("Error While Removing Blank Page.Please Generate Report Again! ", this.Page);
                    //INSTANT C# WARNING: 'Exit Try' statements have no equivalent in C#, so it has been replaced with a 'goto' statement:
                    //ORIGINAL LINE: Exit Try
                    //goto ExitLabel1;
                    return false;
				}
				bytes = null;
				if (!string.IsNullOrEmpty(hdnSubSelection.Value.Trim()))
				{

					dtCRFWorkFlowHistoryDtl = new DataTable();

					dtCRFWorkFlowHistoryDtl = CRFReportStatusHistoryReport(rptno, SubjectId, foldername, SubjectNo, SubjectInitial);
					if (dtCRFWorkFlowHistoryDtl.Rows.Count > 0)
					{
						if (!string.IsNullOrEmpty(dtCRFWorkFlowHistoryDtl.Select("", "dModifyOn DESC")[0]["dModifyOn"].ToString()))
						{
							AuthenticatedOn = dtCRFWorkFlowHistoryDtl.Select("", "dModifyOn DESC")[0]["dModifyOn"].ToString();
							this.Session[VS_AuthenticatedOn] = DateTime.Parse(AuthenticatedOn).ToString("dd-MMM-yyyy HH:mm") + GeneralModule.strServerOffset; //for format like "16 July, 2011 09:03:00 PM"
							this.Session[VS_AuthenticatedBy] = dtCRFWorkFlowHistoryDtl.Select("", "dModifyOn DESC")[0]["AuthenticatedBy"].ToString();
						}
					}
					pdfconverter.PdfFooterOptions.AddElement(new TextElement(0, 15, "[Authenticated By:" + (Session[VS_AuthenticatedBy] == null ? null : Convert.ToString(Session[VS_AuthenticatedBy])) + "]", pdfFont));
					pdfconverter.PdfFooterOptions.AddElement(new TextElement(0, 28, "[Authenticated On:" + (Session[VS_AuthenticatedOn] == null ? null : Convert.ToString(Session[VS_AuthenticatedOn])) + "]", pdfFont));
				}
				pdfconverter.PdfFooterOptions.PageNumberingStartIndex = 0;
				pdfconverter.PdfFooterOptions.AddElement(new LineElement(0, 0, pdfconverter.PdfDocumentOptions.PdfPageSize.Width - pdfconverter.PdfDocumentOptions.LeftMargin - pdfconverter.PdfDocumentOptions.RightMargin, 0));
				TextElement footerText = new TextElement(0, 1, "*This is an electronically authenticated report.                                            Page &p; of &P;                       ", new Font(new FontFamily("Times New Roman"), 12, GraphicsUnit.Point));
				footerText.TextAlign = HorizontalTextAlign.Right;
				footerText.ForeColor = Color.Navy;
				footerText.EmbedSysFont = true;
				HtmlToPdfElement Header1 = new HtmlToPdfElement(Convert.ToString(headercontent), null);
				if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
				{
					Header1.HtmlViewerWidth = 662; //'Previous 750, 647
				}
				else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
				{
					Header1.HtmlViewerWidth = 684; //'Previous 750, 647
				}
				Header1.FitWidth = false;
				pdfconverter.PdfHeaderOptions.AddElement(Header1);
				pdfconverter.PdfFooterOptions.AddElement(footerText);
				pdfconverter.PdfViewerPreferences.PageLayout = ViewerPageLayout.SinglePage;
				pdfconverter.PdfViewerPreferences.PageMode = ViewerPageMode.UseOutlines;
				d1 = pdfconverter.ConvertHtmlToPdfDocumentObject(html1, string.Empty);
				BtnGeneratePdf.Enabled = false;
				if (this.ddlPrinttype.SelectedValue.ToUpper() == "DRAFT")
				{
					watermarkTextFont = new System.Drawing.Font("Times New Roman", 75, FontStyle.Bold, GraphicsUnit.Point);
					watermarkTextElement = new TextElement(50, 250, strProfileStatus.ToString() + " Draft Copy", watermarkTextFont);
					watermarkTextElement.ForeColor = System.Drawing.Color.Blue;
					watermarkTextElement.Opacity = 20;
					watermarkTextElement.TextAngle = 45;
					foreach (Winnovative.PdfPage PdfPage in d1.Pages)
					{
						PdfPage.AddElement(watermarkTextElement);
					}
				}
				string[] DocRemove_arry = null;
				if (DocRemove.Length > 0)
				{
					DocRemove_arry = DocRemove.Substring(0, DocRemove.Length - 1).Split(',');
					for (int i = DocRemove_arry.Length - 1; i >= 0; i--)
					{
						d1.Pages.Remove(Convert.ToInt32(DocRemove_arry[i]));
					}
				}
				d1.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\" + rptno + ".pdf");
				d1.AutoCloseAppendedDocs = true;
				d1.Close();
				d1 = null;
				//======================================htmltopdf======================================
			}
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....CRFReport", ex);
			return false;
		}
		finally
		{
			dt.Dispose();
			dv.Dispose();
			dt_MedExMst.Dispose();
			dt_MedexGroup.Dispose();
			dv_MedexGrp.Dispose();
			dtNodeID.Dispose();
			dtPeriod.Dispose();
			dtParentActivity.Dispose();
			dtMain.Dispose();
			dvMain.Dispose();
			dvSort.Dispose();
		}
		ExitLabel1: ;
	}
	private bool ProjectSpecificLabRpt(string SubjectId, int Nodeid, string RptNo, string foldername)
	{
		string wStr = string.Empty;
		string eStr = string.Empty;
		DataSet ds_SampleDtl = new DataSet();
		int Sampleid = 0;
		string NewRptNo = null;

		try
		{
			wStr = " vWorkSpaceId = '" + this.HProjectId.Value.Trim() + "' And vSubjectID = '" + SubjectId + "' AND iNodeID =" + Convert.ToString(Nodeid) + " And cStatusIndi <> 'D' order by nSampleId ";
			if (!objHelp.Get_ViewSampleDetail(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref ds_SampleDtl, ref eStr))
			{
				throw new Exception("Error While Getting Data From View_Sampledetail" + eStr);
				return false;
			}

			if (ds_SampleDtl.Tables[0].Rows.Count > 0)
			{
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of ds_SampleDtl.Tables(0).Rows.Count for every iteration:
				int tempVar = ds_SampleDtl.Tables[0].Rows.Count;
				for (int indexSample = 0; indexSample < tempVar; indexSample++)
				{
					Sampleid = Convert.ToInt32(ds_SampleDtl.Tables[0].Rows[indexSample]["nSampleID"]);
					NewRptNo = RptNo + "." + Convert.ToString(indexSample);
					if (!LabReport(Sampleid, NewRptNo, foldername, SubjectId))
					{
						return false;
					}
				}
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....ProjectSpecificLabRpt", ex);
			return false;
		}
	}
	private bool ECG(string SubjectId, string ScreeningHdrNo, string Sex, string SubjectNo, string SubjectInitial, string foldername, string rptno)
	{
		try
		{
			DataSet dsECGXRAY = new DataSet();
			string wstr = string.Empty;
			object ProjectNo = "" ;
			object SiteId = "" ;
			object strProfileStatus = "" ;
			string headercontent = string.Empty;
			DataSet ds_header = new DataSet();
			string[] Project = null;
			System.Drawing.Font pdfFont = null;
			Document d1 = new Document();
			Document d2 = new Document();
			System.Drawing.Font watermarkTextFont = null;
			TextElement watermarkTextElement = null;
			string html1 = string.Empty;
			System.Text.StringBuilder myBuilder = new System.Text.StringBuilder();
			string htmlcontent = string.Empty;
			byte[] ECGDownloadbytes = null;
			string vECGFileFullPath = string.Empty;
			PlaceHolder PlaceHolder_ECGPrint = new PlaceHolder();
			DataTable dtECG = new DataTable();
			DataTable dtECGData = new DataTable();
			int ECGNumber = 0;
			int ECGDataNumber = 0;

			if (string.IsNullOrEmpty(ScreeningHdrNo))
			{
				this.objCommon.ShowAlert("No Screening Assingment has been done for Subject " + SubjectId, this.Page);
				return true;
			}

			if (this.ViewState[VS_ECGXRAY] != null)
			{
				dsECGXRAY = (DataSet)this.ViewState[VS_ECGXRAY];
			}
			else
			{
				wstr = this.HProjectId.Value.ToString() + "##" + ScreeningHdrNo + "##" + SubjectId + "##" + ddlPeriod.SelectedValue + "##" + "";
				dsECGXRAY = objHelp.ProcedureExecute("dbo.Proc_GetECGXRAYForDossier", wstr);
				this.ViewState[VS_ECGXRAY] = dsECGXRAY;
			}

			if (dsECGXRAY != null)
			{

				if (dsECGXRAY.Tables.Count > 0)
				{

					if (dsECGXRAY.Tables[ECGNO].Rows.Count > 0) //ECG
					{

						dtECG = dsECGXRAY.Tables[ECGNO].DefaultView.ToTable(true, "nSubjectECGImportDetail");

						for (ECGNumber = 0; ECGNumber < dtECG.Rows.Count; ECGNumber++)
						{

							PlaceHolder_ECGPrint = new PlaceHolder();
							headercontent = string.Empty;
							htmlcontent = string.Empty;
							myBuilder = new System.Text.StringBuilder();

							dtECGData = new DataTable();
							dsECGXRAY.Tables[ECGNO].DefaultView.RowFilter = "nSubjectECGImportDetail = " + Convert.ToString(dtECG.Rows[ECGNumber]["nSubjectECGImportDetail"]);
							dtECGData = dsECGXRAY.Tables[ECGNO].DefaultView.ToTable();
							vECGFileFullPath = Server.MapPath(Convert.ToString(dtECGData.Rows[0]["vVirtualPath"]));

							if (!System.IO.File.Exists(vECGFileFullPath))
							{
								this.ShowErrorMessage("No ECG found for Subject " + SubjectId, ".....ECG");
								this.objCommon.ShowAlert("No ECG found for Subject " + SubjectId, this.Page);
								return true;
							}

							ECGDownloadbytes = System.IO.File.ReadAllBytes(vECGFileFullPath);
							Document existsECGDoc = new Document(new MemoryStream(ECGDownloadbytes));

							PlaceHolder_ECGPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" style=\"Font -family :'Times New Roman' !important; font-size:12px !important;\" >"));
							PlaceHolder_ECGPrint.Controls.Add(new LiteralControl("<tr ALIGN=LEFT width=\"100%\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"ECG\">"));
							PlaceHolder_ECGPrint.Controls.Add(new LiteralControl("<td style=\"display:none;font-family:'Times New Roman'; font-size:12px;\">ECG"));
							PlaceHolder_ECGPrint.Controls.Add(new LiteralControl("</td>"));
							PlaceHolder_ECGPrint.Controls.Add(new LiteralControl("</tr>"));
							PlaceHolder_ECGPrint.Controls.Add(new LiteralControl("</Table>"));

							html1 = RenderControl(PlaceHolder_ECGPrint);

							//=====================================Header=================================================
							ds_header = (DataSet)this.ViewState[vs_View_getWorkspaceDetailForHdr];

							string Path = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/"));
							Path = Path + "/images/lambda_logo.jpg";

							Project = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString().Split(':');
							Int32 strLen = Project[0].ToString().LastIndexOf("-");
							ProjectNo = Project[0].ToString();

							if (Convert.ToBoolean(this.ViewState[IsProjectCT]) && strLen > 5)
							{
								ProjectNo = Project[0].Substring(0, strLen);
								strLen = strLen + 1;
								SiteId = Project[0].Substring(strLen);
							}
							headercontent += "<html><head></head><body>";
							headercontent += "<table style=\"margin-top: 2px; margin: auto; border: solid 1px black; width: 100%; font-family: 'Times New Roman'; font-size:12px; \"align=\"left\">";
							headercontent += "<tr style=\" \">";
							headercontent += "<td valign=\"top\">";
							headercontent += "<table style=\"font-family: 'Times New Roman'; font-size:12px; \">";
							headercontent += "<tr style=\" \">";
							headercontent += "<td colspan=\"4\">";
							headercontent += "<Label  for \"" + ConfigurationManager.AppSettings["Client"].ToString() + "\">" + ConfigurationManager.AppSettings["Client"].ToString() + "</asp:Label>";
							headercontent += "</td>";
							headercontent += "</tr>";
							headercontent += "<tr style=\" \">";
							headercontent += "<td colspan=\"4\">";
							headercontent += "Sponsor Name:<Label  for \"" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "\">" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "</asp:Label>";
							headercontent += "</td>";
							headercontent += "</tr >";
							headercontent += "<tr style=\" \">";
							headercontent += "<td align=\"right\" colspan=\"4\" >";
							headercontent += "<h4>";
							headercontent += "ECG</h4>";
							headercontent += "</td>";
							headercontent += "</tr>";
							headercontent += "<tr style=\" \">";
							headercontent += "<td align=\"right\">Project No:</td>";
							headercontent += "<td style=\"border: thin solid #000000;\">";
							headercontent += "<Label  for \"" + ProjectNo.ToString() + "\">" + ProjectNo.ToString() + "</asp:Label>";
							headercontent += "</td>";
							if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == true)
							{
								headercontent += "<td align=\"right\">Site Id:</td>";
								headercontent += "<td  style=\"border: thin solid #000000;\">";
								headercontent += "<Label  for \"" + SiteId.ToString() + "\">" + SiteId.ToString() + "</asp:Label>";
								headercontent += "</td>";
							}

							if (this.chkprotocolno.Checked == false)
							{
								if (ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim().Length > 0)
								{
									headercontent += "<td align=\"right\">Protocol No:</td>";
									headercontent += "<td  style=\"border: thin solid #000000;\">";
									headercontent += "<Label  for \"" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "\">" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "</asp:Label>";
									headercontent += "</td>";
								}
							}

							headercontent += "</tr>";
							headercontent += "<tr style=\" \">";
							if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
							{
								headercontent += "<td align=\"right\">Subject No:</td>";
								headercontent += "<td style=\"border: thin solid #000000;\">";
								headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
								headercontent += "</td>";

								if (this.chkinitial.Checked == false)
								{
									headercontent += "<td align=\"right\">Subject Initials:</td>";
									headercontent += "<td  style=\"border: thin solid #000000;\">";
									headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
									headercontent += "</td>";
								}

							}
							else
							{
								headercontent += "<td align=\"right\">Subject No:</td>";
								headercontent += "<td style=\"border: thin solid #000000;\">";
								headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
								headercontent += "</td>";
								if (this.chkinitial.Checked == false)
								{
									headercontent += "<td align=\"right\">Subject Initials:</td>";
									headercontent += "<td  style=\"border: thin solid #000000;\">";
									headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
									headercontent += "</td>";
								}
							}
							headercontent += "</tr>";
							headercontent += "</table>";
							headercontent += "</td>";

							if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
							{
								headercontent += "<td valign=\"middle\">";
								headercontent += "<img id=ctl00_CPHLAMBDA_ImgsponsorLogo alt=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\" src=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
								headercontent += "</td>";
							}

							headercontent += "<td valign=\"middle\">";
							headercontent += "<img id=ctl00_CPHLAMBDA_ImgLogo alt=\"" + Path.ToString() + "\" src=\"" + Path.ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
							headercontent += "</td>";
							headercontent += "</tr>";
							headercontent += "</table>";
							headercontent += "</body></html>";
							//=====================================Header=================================================

							//=====================================BODY=================================================

							htmlcontent = "<div style='padding-top:20px;'></div>";
							for (ECGDataNumber = 0; ECGDataNumber < dtECGData.Rows.Count; ECGDataNumber++)
							{
								myBuilder.Append(htmlcontent + "<table>");
								if (Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["ECGFirstReview"]) == Convert.ToString(dtECGData.Rows[ECGDataNumber]["ReviewerCode"]))
								{
									myBuilder.Append("<tr><td nowrap>ECG Taken By:</td><td class='addSpace'>" + dtECGData.Rows[ECGDataNumber]["vUserName"].ToString() + "</td></tr>");
								}
								else
								{
									myBuilder.Append("<tr><td nowrap>ECG Review By:</td><td class='addSpace'>" + dtECGData.Rows[ECGDataNumber]["vUserName"].ToString() + "</td></tr>");
								}
								myBuilder.Append("<tr><td nowrap>Full Name:</td><td  class='addSpace'>" + dtECGData.Rows[ECGDataNumber]["ReviewerName"].ToString() + " (" + dtECGData.Rows[ECGDataNumber]["ReviewerType"].ToString() + ")" + "</td></tr>");
								myBuilder.Append("<tr><td nowrap>eSigned On:</td><td class='addSpace'>" + Convert.ToDateTime(dtECGData.Rows[ECGDataNumber]["dReviewRemarksOn"]).ToString("dd-MMM-yyyy hh:mm") + "</td></tr>");
								myBuilder.Append("<tr><td nowrap>Comment:</td><td class='addSpace' style='word-break: break-all;text-align: justify;'>" + dtECGData.Rows[ECGDataNumber]["vReviewRemarks"].ToString() + "</td></tr>");
								myBuilder.Append("</table>");
							}

							//=====================================BODY=================================================

							//============================================================================================
							pdfFont = new System.Drawing.Font("Times New Roman", 12, FontStyle.Bold, GraphicsUnit.Point);
							//============================================================================================

							//======================================htmltopdf=============================================
							HtmlToPdfConverter pdfconverter = new HtmlToPdfConverter();
							//pdfconverter.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g=="
							pdfconverter.PdfDocumentOptions.AvoidImageBreak = true;
							pdfconverter.PdfDocumentOptions.AvoidTextBreak = false;

							if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
							{
								pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.A4;
							}
							else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
							{
								pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.Letter;
							}
							pdfconverter.PdfDocumentOptions.ShowHeader = true;
							pdfconverter.PdfDocumentOptions.ShowFooter = true;
							pdfconverter.PdfHeaderOptions.HeaderHeight = 125;
							pdfconverter.PdfFooterOptions.FooterHeight = 41;
							if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
							{
								pdfconverter.HtmlViewerWidth = 662; //'Previous 750, 647
							}
							else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
							{
								pdfconverter.HtmlViewerWidth = 684; //'Previous 750, 647
							}
							pdfconverter.PdfDocumentOptions.FitWidth = false;
							pdfconverter.PdfDocumentOptions.JpegCompressionEnabled = true;
							pdfconverter.PdfDocumentOptions.JpegCompressionLevel = 0;
							pdfconverter.PdfDocumentOptions.PdfCompressionLevel = PdfCompressionLevel.Best;
							pdfconverter.PdfDocumentOptions.StretchToFit = true;
							pdfconverter.PdfDocumentOptions.LeftMargin = 72;
							pdfconverter.PdfDocumentOptions.RightMargin = 27;
							pdfconverter.PdfDocumentOptions.TopMargin = 27;
							pdfconverter.PdfDocumentOptions.BottomMargin = 5;

							string level1TextStyle = "font-family:'Times New Roman'; font-size:16px; text-decoration: underline;";
							pdfconverter.TableOfContentsOptions.SetItemStyle(1, level1TextStyle);
							pdfconverter.TableOfContentsOptions.SetItemStyle(2, level1TextStyle);
							pdfconverter.TableOfContentsOptions.SetItemStyle(3, level1TextStyle);

							pdfconverter.TableOfContentsOptions.AutoTocItemsEnabled = false;

							string level1PageNumberStyle = "padding-right:3px; font-family:'Times New Roman'; font-size:16px; text-decoration: underline; font-weight:bold";
							pdfconverter.TableOfContentsOptions.SetPageNumberStyle(1, level1PageNumberStyle);
							pdfconverter.TableOfContentsOptions.SetPageNumberStyle(2, level1PageNumberStyle);
							pdfconverter.TableOfContentsOptions.SetPageNumberStyle(3, level1PageNumberStyle);

							pdfconverter.PdfFooterOptions.PageNumberingStartIndex = 0;
							pdfconverter.PdfFooterOptions.AddElement(new LineElement(0, 0, pdfconverter.PdfDocumentOptions.PdfPageSize.Width - pdfconverter.PdfDocumentOptions.LeftMargin - pdfconverter.PdfDocumentOptions.RightMargin, 0));
							TextElement footerText = new TextElement(0, 1, "*This is an electronically authenticated report.                                            Page &p; of &P;                       ", new Font(new FontFamily("Times New Roman"), 12, GraphicsUnit.Point));

							footerText.TextAlign = HorizontalTextAlign.Right;
							footerText.ForeColor = Color.Navy;
							footerText.EmbedSysFont = true;
							HtmlToPdfElement Header1 = new HtmlToPdfElement(headercontent, null);
							if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
							{
								Header1.HtmlViewerWidth = 662; //'Previous 750, 647
							}
							else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
							{
								Header1.HtmlViewerWidth = 684; //'Previous 750, 647
							}
							Header1.FitWidth = false;
							pdfconverter.PdfHeaderOptions.AddElement(Header1);

							pdfconverter.PdfFooterOptions.AddElement(footerText);

							pdfconverter.PdfViewerPreferences.PageLayout = ViewerPageLayout.SinglePage;
							pdfconverter.PdfViewerPreferences.PageMode = ViewerPageMode.UseOutlines;

							d2.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
							d1 = pdfconverter.ConvertHtmlToPdfDocumentObject(html1 + myBuilder.ToString(), string.Empty);
							d2.AppendDocument(existsECGDoc);
							d2.AppendDocument(d1);

							BtnGeneratePdf.Enabled = false;

							if (this.ddlPrinttype.SelectedValue.ToUpper() == "DRAFT")
							{
								watermarkTextFont = new System.Drawing.Font("Times New Roman", 75, FontStyle.Bold, GraphicsUnit.Point);
								watermarkTextElement = new TextElement(125, 401, strProfileStatus.ToString() + " Draft Copy", watermarkTextFont);
								watermarkTextElement.ForeColor = System.Drawing.Color.Blue;
								watermarkTextElement.Opacity = 20;
								watermarkTextElement.TextAngle = 45;
								foreach (Winnovative.PdfPage PdfPage in d2.Pages)
								{
									PdfPage.AddElement(watermarkTextElement);
								}
							}

						}

						d2.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\" + rptno + ".pdf");
						d2.AutoCloseAppendedDocs = true;
						d2.Close();
						d2 = null;
						//======================================htmltopdf=============================================
					}
				}
			}


			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....ECG", ex);
			return false;
		}
	}
	private bool XRAY(string SubjectId, string ScreeningHdrNo, string Sex, string SubjectNo, string SubjectInitial, string foldername, string rptno)
	{
		try
		{
			DataSet dsECGXRAY = new DataSet();
			string wstr = string.Empty;
			object ProjectNo = "" ;
			object SiteId = "" ;
			object strProfileStatus = "";
			string headercontent = string.Empty;
			DataSet ds_header = new DataSet();
			string[] Project = null;
			System.Drawing.Font pdfFont = null;
			Document d1 = new Document();
			Document d2 = new Document();
			System.Drawing.Font watermarkTextFont = null;
			TextElement watermarkTextElement = null;
			string html1 = string.Empty;

			System.Text.StringBuilder myBuilder = new System.Text.StringBuilder();
			string htmlcontent = string.Empty;
			byte[] XRAYDownloadbytes = null;
			string vXRAYFileFullPath = string.Empty;
			PlaceHolder PlaceHolder_XRAYPrint = new PlaceHolder();
			DataTable dtXRAY = new DataTable();
			DataTable dtXRAYData = new DataTable();
			int XRAYNumber = 0;
			int XRAYDataNumber = 0;

			if (string.IsNullOrEmpty(ScreeningHdrNo))
			{
				this.objCommon.ShowAlert("No Screening Assingment has been done for Subject " + SubjectId, this.Page);
				return true;
			}

			if (this.ViewState[VS_ECGXRAY] != null)
			{
				dsECGXRAY = (DataSet)this.ViewState[VS_ECGXRAY];
			}
			else
			{
				wstr = this.HProjectId.Value.ToString() + "##" + ScreeningHdrNo + "##" + SubjectId + "##" + ddlPeriod.SelectedValue + "##" + "";
				dsECGXRAY = objHelp.ProcedureExecute("dbo.Proc_GetECGXRAYForDossier", wstr);
				this.ViewState[VS_ECGXRAY] = dsECGXRAY;
			}

			if (dsECGXRAY != null)
			{

				if (dsECGXRAY.Tables.Count > 0)
				{

					if (dsECGXRAY.Tables[XRAYNO].Rows.Count > 0) //XRAY
					{

						dtXRAY = dsECGXRAY.Tables[XRAYNO].DefaultView.ToTable(true, "nSubjectXRAYImportDetail");

						for (XRAYNumber = 0; XRAYNumber < dtXRAY.Rows.Count; XRAYNumber++)
						{

							PlaceHolder_XRAYPrint = new PlaceHolder();
							headercontent = string.Empty;
							htmlcontent = string.Empty;
							myBuilder = new System.Text.StringBuilder();

							dtXRAYData = new DataTable();

							dsECGXRAY.Tables[XRAYNO].DefaultView.RowFilter = "nSubjectXRAYImportDetail = " + Convert.ToString(dtXRAY.Rows[XRAYNumber]["nSubjectXRAYImportDetail"]);
							dtXRAYData = dsECGXRAY.Tables[XRAYNO].DefaultView.ToTable();
							//--------------------//Code is to Attach XRAY to Dossier//---------------------------'

							vXRAYFileFullPath = Server.MapPath(Convert.ToString(dtXRAYData.Rows[0]["vVirtualPath"]));
							//Added by rinkal

							if (!System.IO.File.Exists(vXRAYFileFullPath))
							{
								this.ShowErrorMessage("No XRAY found for Subject " + SubjectId, ".....XRAY");
								this.objCommon.ShowAlert("No XRAY found for Subject " + SubjectId, this.Page);
								return true;
							}



							Winnovative.WnvHtmlConvert.PdfConverter pdfConverter1 = new Winnovative.WnvHtmlConvert.PdfConverter();
							//Dim FinalDocument As Winnovative.WnvHtmlConvert.PdfDocument.Document = pdfConverter1.GetPdfDocumentObjectFromHtmlString(String.Empty)
							Winnovative.WnvHtmlConvert.PdfDocument.Document eSignAndAnnotationDoc = null;



							myBuilder.Clear();

							myBuilder.Append("<!DOCTYPE html>");
							myBuilder.Append("<html><head>");
							myBuilder.Append("</head>");
							myBuilder.Append("<body>");
							myBuilder.Append("<img id=ctl00_CPHLAMBDA_ImgLogo alt=\"" + vXRAYFileFullPath.ToString() + "\" src=\"" + vXRAYFileFullPath.ToString() + "\"right\" alt=\"lambda\" style=\"width:100%; height:100%;\"/>");
							myBuilder.Append("</body>");
							myBuilder.Append("</html>");

							eSignAndAnnotationDoc = pdfConverter1.GetPdfDocumentObjectFromHtmlString(myBuilder.ToString());
							//FinalDocument.AppendDocument(eSignAndAnnotationDoc)

							XRAYDownloadbytes = eSignAndAnnotationDoc.Save();
							Document existsECGDoc = new Document(new MemoryStream(XRAYDownloadbytes));



							//If Not System.IO.File.Exists(vXRAYFileFullPath) Then
							//    Me.ShowErrorMessage("No XRAY found for Subject " + SubjectId, ".....XRAY")
							//    Me.objCommon.ShowAlert("No XRAY found for Subject " + SubjectId, Me.Page)
							//    Return True
							//End If

							//XRAYDownloadbytes = System.IO.File.ReadAllBytes(vXRAYFileFullPath)
							//Dim existsECGDoc As New Document(New MemoryStream(XRAYDownloadbytes))

							//--------------------//Code is to Attach XRAY to Dossier//---------------------------'

							PlaceHolder_XRAYPrint.Controls.Add(new LiteralControl("<Table width=\"100%\" style=\"Font -family :'Times New Roman' !important; font-size:12px !important;\" >"));
							PlaceHolder_XRAYPrint.Controls.Add(new LiteralControl("<tr ALIGN=LEFT width=\"100%\" data-bookmark-enabled=\"true\" data-bookmark-level=\"1\" data-bookmark-text=\"XRAY\">"));
							PlaceHolder_XRAYPrint.Controls.Add(new LiteralControl("<td style=\"display:none;font-family:'Times New Roman'; font-size:12px;\">"));
							PlaceHolder_XRAYPrint.Controls.Add(new LiteralControl("</td>"));
							PlaceHolder_XRAYPrint.Controls.Add(new LiteralControl("</tr>"));
							PlaceHolder_XRAYPrint.Controls.Add(new LiteralControl("</Table>"));

							html1 = RenderControl(PlaceHolder_XRAYPrint);


							//=====================================Header=================================================
							ds_header = (DataSet)this.ViewState[vs_View_getWorkspaceDetailForHdr];

							string Path = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/"));
							Path = Path + "/images/lambda_logo.jpg";

							Project = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString().Split(':');
							Int32 strLen = Project[0].ToString().LastIndexOf("-");
							ProjectNo = Project[0].ToString();

							if (Convert.ToBoolean(this.ViewState[IsProjectCT]) && strLen > 5)
							{
								ProjectNo = Project[0].Substring(0, strLen);
								strLen = strLen + 1;
								SiteId = Project[0].Substring(strLen);
							}
							headercontent += "<html><head></head><body>";
							headercontent += "<table style=\"margin-top: 2px; margin: auto; border: solid 1px black; width: 100%; font-family: 'Times New Roman'; font-size:12px; \"align=\"left\">";
							headercontent += "<tr style=\" \">";
							headercontent += "<td valign=\"top\">";
							headercontent += "<table style=\"font-family: 'Times New Roman'; font-size:12px; \">";
							headercontent += "<tr style=\" \">";
							headercontent += "<td colspan=\"4\">";
							headercontent += "<Label  for \"" + ConfigurationManager.AppSettings["Client"].ToString() + "\">" + ConfigurationManager.AppSettings["Client"].ToString() + "</asp:Label>";
							headercontent += "</td>";
							headercontent += "</tr>";
							headercontent += "<tr style=\" \">";
							headercontent += "<td colspan=\"4\">";
							headercontent += "Sponsor Name:<Label  for \"" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "\">" + ds_header.Tables[0].Rows[0]["vClientName"].ToString() + "</asp:Label>";
							headercontent += "</td>";
							headercontent += "</tr >";
							headercontent += "<tr style=\" \">";
							headercontent += "<td align=\"right\" colspan=\"4\" >";
							headercontent += "<h4>";
							headercontent += "XRAY</h4>";
							headercontent += "</td>";
							headercontent += "</tr>";
							headercontent += "<tr style=\" \">";
							headercontent += "<td align=\"right\">Project No:</td>";
							headercontent += "<td style=\"border: thin solid #000000;\">";
							headercontent += "<Label  for \"" + ProjectNo.ToString() + "\">" + ProjectNo.ToString() + "</asp:Label>";
							headercontent += "</td>";
							if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == true)
							{
								headercontent += "<td align=\"right\">Site Id:</td>";
								headercontent += "<td  style=\"border: thin solid #000000;\">";
								headercontent += "<Label  for \"" + SiteId.ToString() + "\">" + SiteId.ToString() + "</asp:Label>";
								headercontent += "</td>";
							}

							if (this.chkprotocolno.Checked == false)
							{
								if (ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim().Length > 0)
								{
									headercontent += "<td align=\"right\">Protocol No:</td>";
									headercontent += "<td  style=\"border: thin solid #000000;\">";
									headercontent += "<Label  for \"" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "\">" + ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim() + "</asp:Label>";
									headercontent += "</td>";
								}
							}

							headercontent += "</tr>";
							headercontent += "<tr style=\" \">";
							if (Convert.ToBoolean(this.ViewState[IsProjectCT]))
							{
								headercontent += "<td align=\"right\">Subject No:</td>";
								headercontent += "<td style=\"border: thin solid #000000;\">";
								headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
								headercontent += "</td>";

								if (this.chkinitial.Checked == false)
								{
									headercontent += "<td align=\"right\">Subject Initials:</td>";
									headercontent += "<td  style=\"border: thin solid #000000;\">";
									headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
									headercontent += "</td>";
								}

							}
							else
							{
								headercontent += "<td align=\"right\">Subject No:</td>";
								headercontent += "<td style=\"border: thin solid #000000;\">";
								headercontent += "<Label  for \"" + SubjectNo + "\">" + SubjectNo + "</asp:Label>";
								headercontent += "</td>";
								if (this.chkinitial.Checked == false)
								{
									headercontent += "<td align=\"right\">Subject Initials:</td>";
									headercontent += "<td  style=\"border: thin solid #000000;\">";
									headercontent += "<Label  for \"" + SubjectInitial + "\">" + SubjectInitial + "</asp:Label>";
									headercontent += "</td>";
								}
							}
							headercontent += "</tr>";
							headercontent += "</table>";
							headercontent += "</td>";

							if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
							{
								headercontent += "<td valign=\"middle\">";
								headercontent += "<img id=ctl00_CPHLAMBDA_ImgsponsorLogo alt=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\" src=\"" + this.ViewState[vs_sponsorlogofilepath].ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
								headercontent += "</td>";
							}

							headercontent += "<td valign=\"right\">";
							headercontent += "<img id=ctl00_CPHLAMBDA_ImgLogo alt=\"" + Path.ToString() + "\" src=\"" + Path.ToString() + "\"right\" alt=\"lambda\" style=\"width:120px; height:120px;\"/>";
							headercontent += "</td>";
							headercontent += "</tr>";
							headercontent += "</table>";
							headercontent += "</body></html>";
							//=====================================Header=================================================

							//=====================================BODY=================================================
							myBuilder.Clear();
							htmlcontent = "<div style='padding-top:20px;'></div>";
							for (XRAYDataNumber = 0; XRAYDataNumber < dtXRAYData.Rows.Count; XRAYDataNumber++)
							{
								myBuilder.Append(htmlcontent + "<table>");
								if (Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["XRAYFirstReview"]) == Convert.ToString(dtXRAYData.Rows[XRAYDataNumber]["ReviewerCode"]))
								{
									myBuilder.Append("<tr><td nowrap>XRAY Taken By:</td><td class='addSpace'>" + dtXRAYData.Rows[XRAYDataNumber]["vUserName"].ToString() + "</td></tr>");
								}
								else
								{
									myBuilder.Append("<tr><td nowrap>XRAY Review By:</td><td class='addSpace'>" + dtXRAYData.Rows[XRAYDataNumber]["vUserName"].ToString() + "</td></tr>");
								}
								myBuilder.Append("<tr><td nowrap>Full Name:</td><td  class='addSpace'>" + dtXRAYData.Rows[XRAYDataNumber]["ReviewerName"].ToString() + " (" + dtXRAYData.Rows[XRAYDataNumber]["ReviewerType"].ToString() + ")" + "</td></tr>");
								myBuilder.Append("<tr><td nowrap>eSigned on:</td><td class='addSpace'>" + Convert.ToDateTime(dtXRAYData.Rows[XRAYDataNumber]["dReviewRemarksOn"]).ToString("dd-MMM-yyyy hh:mm") + "</td></tr>");
								myBuilder.Append("<tr><td nowrap>Comment:</td><td class='addSpace' style='word-break: break-all;text-align: justify;'>" + dtXRAYData.Rows[XRAYDataNumber]["vReviewRemarks"].ToString() + "</td></tr>");
								myBuilder.Append("</table>");
							}

							//=====================================BODY=================================================

							//============================================================================================
							pdfFont = new System.Drawing.Font("Times New Roman", 12, FontStyle.Bold, GraphicsUnit.Point);
							//============================================================================================

							//======================================htmltopdf=============================================
							HtmlToPdfConverter pdfconverter = new HtmlToPdfConverter();
							//pdfconverter.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g=="
							pdfconverter.PdfDocumentOptions.AvoidImageBreak = true;
							pdfconverter.PdfDocumentOptions.AvoidTextBreak = false;

							if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
							{
								pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.A4;
							}
							else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
							{
								pdfconverter.PdfDocumentOptions.PdfPageSize = PdfPageSize.Letter;
							}
							pdfconverter.PdfDocumentOptions.ShowHeader = true;
							pdfconverter.PdfDocumentOptions.ShowFooter = true;
							pdfconverter.PdfHeaderOptions.HeaderHeight = 125;
							pdfconverter.PdfFooterOptions.FooterHeight = 41;
							if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
							{
								pdfconverter.HtmlViewerWidth = 662; //'Previous 750, 647
							}
							else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
							{
								pdfconverter.HtmlViewerWidth = 684; //'Previous 750, 647
							}
							pdfconverter.PdfDocumentOptions.FitWidth = false;
							pdfconverter.PdfDocumentOptions.JpegCompressionEnabled = true;
							pdfconverter.PdfDocumentOptions.JpegCompressionLevel = 0;
							pdfconverter.PdfDocumentOptions.PdfCompressionLevel = PdfCompressionLevel.Best;
							pdfconverter.PdfDocumentOptions.StretchToFit = true;
							pdfconverter.PdfDocumentOptions.LeftMargin = 72;
							pdfconverter.PdfDocumentOptions.RightMargin = 27;
							pdfconverter.PdfDocumentOptions.TopMargin = 27;
							pdfconverter.PdfDocumentOptions.BottomMargin = 5;

							string level1TextStyle = "font-family:'Times New Roman'; font-size:16px; text-decoration: underline;";
							pdfconverter.TableOfContentsOptions.SetItemStyle(1, level1TextStyle);
							pdfconverter.TableOfContentsOptions.SetItemStyle(2, level1TextStyle);
							pdfconverter.TableOfContentsOptions.SetItemStyle(3, level1TextStyle);

							pdfconverter.TableOfContentsOptions.AutoTocItemsEnabled = false;

							string level1PageNumberStyle = "padding-right:3px; font-family:'Times New Roman'; font-size:16px; text-decoration: underline; font-weight:bold";
							pdfconverter.TableOfContentsOptions.SetPageNumberStyle(1, level1PageNumberStyle);
							pdfconverter.TableOfContentsOptions.SetPageNumberStyle(2, level1PageNumberStyle);
							pdfconverter.TableOfContentsOptions.SetPageNumberStyle(3, level1PageNumberStyle);

							pdfconverter.PdfFooterOptions.PageNumberingStartIndex = 0;
							pdfconverter.PdfFooterOptions.AddElement(new LineElement(0, 0, pdfconverter.PdfDocumentOptions.PdfPageSize.Width - pdfconverter.PdfDocumentOptions.LeftMargin - pdfconverter.PdfDocumentOptions.RightMargin, 0));
							TextElement footerText = new TextElement(0, 1, "*This is an electronically authenticated report.                                            Page &p; of &P;                       ", new Font(new FontFamily("Times New Roman"), 12, GraphicsUnit.Point));

							footerText.TextAlign = HorizontalTextAlign.Right;
							footerText.ForeColor = Color.Navy;
							footerText.EmbedSysFont = true;
							HtmlToPdfElement Header1 = new HtmlToPdfElement(headercontent, null);
							if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "A4")
							{
								Header1.HtmlViewerWidth = 662; //'Previous 750, 647
							}
							else if (ddlOrientation.SelectedValue.ToString().ToUpper().ToString() == "LETTER")
							{
								Header1.HtmlViewerWidth = 684; //'Previous 750, 647
							}
							Header1.FitWidth = false;

							pdfconverter.PdfHeaderOptions.AddElement(Header1);
							pdfconverter.PdfFooterOptions.AddElement(footerText);

							pdfconverter.PdfViewerPreferences.PageLayout = ViewerPageLayout.SinglePage;
							pdfconverter.PdfViewerPreferences.PageMode = ViewerPageMode.UseOutlines;

							d2.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
							d1 = pdfconverter.ConvertHtmlToPdfDocumentObject(html1 + myBuilder.ToString(), string.Empty);
							d2.AppendDocument(existsECGDoc); // Fo Attach XRAY to Dossier
							d2.AppendDocument(d1);

							BtnGeneratePdf.Enabled = false;

							if (this.ddlPrinttype.SelectedValue.ToUpper() == "DRAFT")
							{
								watermarkTextFont = new System.Drawing.Font("Times New Roman", 75, FontStyle.Bold, GraphicsUnit.Point);
								watermarkTextElement = new TextElement(125, 401, strProfileStatus.ToString() + " Draft Copy", watermarkTextFont);
								watermarkTextElement.ForeColor = System.Drawing.Color.Blue;
								watermarkTextElement.Opacity = 20;
								watermarkTextElement.TextAngle = 45;
								foreach (Winnovative.PdfPage PdfPage in d2.Pages)
								{
									PdfPage.AddElement(watermarkTextElement);
								}
							}

						}

						d2.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge\\" + rptno + ".pdf");
						d2.AutoCloseAppendedDocs = true;
						d2.Close();
						d2 = null;
						//======================================htmltopdf=============================================
					}
				}
			}


			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....XRAY", ex);
			return false;
		}
	}

#endregion

#region Merge PDF

	private bool MergePdf(string SubjectNo, string foldername, string subjectinitials)
	{
		FileInfo fInfo = null;
		string[] DocumentsArray = null;
		string PathforLocal = string.Empty;
		Document document1 = new Document();
		Document document2 = new Document();
		int av = 1;
		int ileft = 0;
		int itop = 0;
		int ipages = 0;
		int splitchar = 0;
		ileft = 0;
		itop = 0;
		splitchar = 0;
		ipages = 1;
		int i1 = 0;
		List<string> strsub = new List<string>();

		try
		{

			if (!Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername))
			{
				return true;
			}

			DocumentsArray = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\RptMerge");

			if (DocumentsArray.Length == 0)
			{
				return true;
			}

			for (var i = 0; i < DocumentsArray.Length; i++)
			{
				fInfo = new FileInfo(DocumentsArray[i]);
				if (fInfo.Exists)
				{
					if (i == 0)
					{
						document1 = new Document(DocumentsArray[i]);
						document1.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
					}
					else
					{
						document2 = new Document(DocumentsArray[i]);
						document2.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g==";
						document1.AppendDocument(document2);
					}
				}
			}

			document1.ViewerPreferences.PageMode = ViewerPageMode.UseOutlines;

			if (DocumentsArray.Length > 0)
			{
				document1.Save(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\Report\\02.pdf");
				if (DocumentsArray.Length == 1)
				{
					document1.AutoCloseAppendedDocs = true;
					document1.Close();

				}
				else
				{
					document1.AutoCloseAppendedDocs = true;
					document1.Close();
					document2.AutoCloseAppendedDocs = true;
					document2.Close();

				}
				for (var i = 0; i < DocumentsArray.Length; i++)
				{
					fInfo = new FileInfo(DocumentsArray[i]);
					if (fInfo.Exists)
					{
						fInfo.Delete();
					}
				}
			}

			if (!this.CreateTOC(SubjectNo, foldername, subjectinitials))
			{
				return false;
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....MergePdf", ex);
			return false;
		}
	}

#endregion

#region Create toc

	private bool CreateTOC(string SubjectNo, string foldername, string Subjectinitial)
	{
		FileInfo fInfo = null;
		string PathforLocal = string.Empty;
		int av = 1;
		int ileft = 0;
		int itop = 0;
		int ipages = 0;
		int splitchar = 0;
		ileft = 0;
		itop = 0;
		splitchar = 0;
		ipages = 1;
		object lst1 = null;
		string strtitle = null;
		string strpage = null;
		string siteid = null;
		int i1 = 0;
		strtitle = "";
		strpage = "";
		siteid = "";
		iTextSharp.text.Chunk c = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cPagenumber = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cPagenumberTest = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cDottedline = null;
		List<string> strsub = new List<string>();
		iTextSharp.text.pdf.PdfAction action = null;
		string strcommand = "";

		//Dim strdot As String = ".............................................................................................................................................................."
		try
		{
			if (!Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim() + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReport")))
			{
				Directory.CreateDirectory(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim() + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReport"));
			}

			byte[] downloadbytes = System.IO.File.ReadAllBytes(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\Report\\02.pdf");
			iTextSharp.text.pdf.PdfReader reader = new iTextSharp.text.pdf.PdfReader(downloadbytes);
			//List<Dictionary<string, object>> lst = iTextSharp.text.pdf.SimpleBookmark.GetBookmark(reader);
            var lst = iTextSharp.text.pdf.SimpleBookmark.GetBookmark(reader);
            iTextSharp.text.pdf.PdfStamper stamper = new iTextSharp.text.pdf.PdfStamper(reader, new FileStream(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReport\\" + SubjectNo + ".pdf", FileMode.Create), '4');
			stamper.Writer.SetPdfVersion(iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_4); //'Added By ketan
			stamper.InsertPage(1, reader.GetPageSize(1));

			string pagewidth = (reader.GetPageSize(1).Width).ToString();
			itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);
			iTextSharp.text.pdf.PdfContentByte canvas = stamper.GetOverContent(1);
			string fontpath = Server.MapPath("Reports") + "\\times.ttf";
			iTextSharp.text.pdf.BaseFont customfont = iTextSharp.text.pdf.BaseFont.CreateFont(fontpath, iTextSharp.text.pdf.BaseFont.CP1252, iTextSharp.text.pdf.BaseFont.EMBEDDED);
			iTextSharp.text.Font font1 = new iTextSharp.text.Font(customfont, 12, 1, iTextSharp.text.BaseColor.BLACK);
			iTextSharp.text.Font font2 = new iTextSharp.text.Font(customfont, 12, 0, iTextSharp.text.BaseColor.BLUE);
			iTextSharp.text.Font font3 = new iTextSharp.text.Font(customfont, 12, 1, iTextSharp.text.BaseColor.BLUE);
			iTextSharp.text.Font Whitefont = new iTextSharp.text.Font(customfont, 12, 1, iTextSharp.text.BaseColor.WHITE);
			if (!this.AddHeader(canvas, stamper, reader, itop, 1, SubjectNo, Subjectinitial))
			{
				return false;
			}

			itop -= 140;

			if (lst.Count > 0)
			{
				c = new iTextSharp.text.Chunk("TABLE OF CONTENTS");
				c.Font = font1;
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_CENTER, new iTextSharp.text.Phrase(c), Convert.ToSingle(Convert.ToSingle(pagewidth) / 2), itop, 0);
				Dictionary<string, object> Hashtable1 = new Dictionary<string, object>();
				Hashtable1.Add("Title", "TABLE OF CONTENTS");
				Hashtable1.Add("Page", "1 XYZ 0 685 .00");
				Hashtable1.Add("Action", "GoTo");
				lst.Insert(0, Hashtable1);
			}

			int j2 = 0;
			int ipage = 1;
			int itopcount = itop;
			if (!this.PagesCount(lst, c, ref ileft, ref pagewidth, ref itopcount, ref ipage, ref reader, ref font2, ref font3))
			{
				throw new Exception();
			}
			else
			{
				j2 = ipage;
			}

			for (int i = 0; i < lst.Count; i++)
			{
				strsub.Clear();
				itop -= 20;
				if (itop < 72)
				{
					ipages += 1;
					stamper.InsertPage(ipages, reader.GetPageSize(1));
					canvas = stamper.GetOverContent(ipages);
					itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);
					if (!this.AddHeader(canvas, stamper, reader, itop, ipages, SubjectNo, Subjectinitial))
					{
						return false;
					}
					itop -= 160;
				}
				else
				{
					canvas = stamper.GetOverContent(ipages);
				}

				ileft = 72;
				dynamic lst2 = lst[i];
				i1 += 1;
				action = new iTextSharp.text.pdf.PdfAction();

				if (lst2.TryGetValue("Title", strtitle))
				{
					c = new iTextSharp.text.Chunk(strtitle);
					c.Font = font3;
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					if (c.GetWidthPoint() + ileft > Convert.ToInt32(Convert.ToInt32(pagewidth) - 47))
					{
						if (ileft == 82)
						{
							splitchar = 66;
						}
						else if (ileft == 92)
						{
							splitchar = 65;
						}
						else if (ileft == 102)
						{
							splitchar = 64;
						}
						else if (ileft == 72)
						{
							splitchar = 67;
						}

						string strtemp = Convert.ToString(strtitle.Length / (double)splitchar);
						if (strtitle.Length <= splitchar)
						{
							strtemp = "0";
						}
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of Convert.ToInt16(strtemp.Split(".")(0)) for every iteration:
						int tempVar = Convert.ToInt16(strtemp.Split('.')[0]);
						for (int i2 = 0; i2 <= tempVar; i2++)
						{
							if (i2 == 0)
							{
								if (Convert.ToInt16(strtemp.Split('.')[0]) == 0)
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length));
								}
								else
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, splitchar));
								}
							}
							else
							{
								strsub.Add(strtitle.Substring(i2 * splitchar - 1, strtitle.Length - (i2 * splitchar - 1)));
							}
						}
					}
					else
					{
						strsub.Add(strtitle.Substring(0, strtitle.Length));
					}
				}

				//------------------For Text------------------------------
				action.Put(iTextSharp.text.pdf.PdfName.S, iTextSharp.text.pdf.PdfName.GOTO);
				if (lst2.TryGetValue("Page", strpage))
				{
					strpage = strpage.Replace("XYZ", "/XYZ");

					if (strsub[0].ToUpper() == "TABLE OF CONTENTS")
					{
						action.Put(iTextSharp.text.pdf.PdfName.D, new iTextSharp.text.pdf.PdfLiteral("[" + "0" + " " + strpage.Split(' ')[1] + " " + strpage.Split(' ')[2] + " " + strpage.Split(' ')[3] + " " + strpage.Split(' ')[4] + "]"));
					}
					else
					{
						action.Put(iTextSharp.text.pdf.PdfName.D, new iTextSharp.text.pdf.PdfLiteral("[" + Convert.ToInt32(Convert.ToInt32(strpage.Split(' ')[0]) + j2 - 1).ToString() + " " + strpage.Split(' ')[1] + " " + strpage.Split(' ')[2] + " " + strpage.Split(' ')[3] + " " + strpage.Split(' ')[4] + "]"));
					}
				}

				cDottedline = new iTextSharp.text.Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
				cDottedline.Font = font3;
				// cDottedline.SetAction(action)
				if (strsub.Count == 1)
				{
					//-------------------For Dotted line-------------------------
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cDottedline), ileft, itop, 0);
					//-----------------------------------------------------------
				}
				else
				{
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cDottedline), ileft, itop - ((strsub.Count - 1) * 20), 0);
				}
				for (int i3 = 0; i3 < strsub.Count; i3++)
				{
					if (i3 > 0)
					{
						itop -= 20;
					}
					c = new iTextSharp.text.Chunk(strsub[i3]);
					c.Font = font3;
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					c.SetAction(action);
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), ileft, itop, 0);
				}
				//-----------------------------------------------------------
				//------------------For page number--------------------------
				int intPageNo = 0;
				string strBlank_PageNo = null;
				if (lst2.TryGetValue("Page", strpage))
				{
					strpage = strpage.Replace("XYZ", "/XYZ");
					if (strsub[0].ToUpper() != "TABLE OF CONTENTS")
					{
						//cPagenumber = New iTextSharp.text.Chunk(Convert.ToString(Convert.ToInt32(strpage.Split(" ")(0)) + j2))
						intPageNo = Convert.ToInt32(strpage.Split(' ')[0]) + j2;
						strBlank_PageNo = "   " + intPageNo;
						cPagenumber = new iTextSharp.text.Chunk(strBlank_PageNo);
					}
					else
					{
						//cPagenumber = New iTextSharp.text.Chunk(Convert.ToString(Convert.ToInt32(strpage.Split(" ")(0))))
						intPageNo = Convert.ToInt32(strpage.Split(' ')[0]);
						strBlank_PageNo = "   " + intPageNo;
						cPagenumber = new iTextSharp.text.Chunk(strBlank_PageNo);
					}
					cPagenumber.Font = font3;
					cPagenumber.SetBackground(iTextSharp.text.BaseColor.WHITE);
				}
				//cPagenumber.SetAction(action)
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cPagenumber), Convert.ToSingle(Convert.ToInt32(pagewidth) - 49), itop, 0);

				int intRemoveExtraWidth = 37;
				intRemoveExtraWidth = intRemoveExtraWidth - (intPageNo.ToString().Length * 5);
				cPagenumberTest = new iTextSharp.text.Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
				cPagenumberTest.Font = Whitefont;
				cPagenumberTest.SetBackground(iTextSharp.text.BaseColor.WHITE);
				//cPagenumberTest.SetAction(action)
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cPagenumberTest), Convert.ToSingle(Convert.ToInt32(pagewidth) - intRemoveExtraWidth), itop, 0);
				//-----------------------------------------------------------
				if (strsub[0].ToUpper() != "TABLE OF CONTENTS")
				{
					lst[i]["Page"] = Convert.ToInt32(strpage.Split(' ')[0] + j2).ToString() + " " + strpage.Split(' ')[1].ToString() + " " + strpage.Split(' ')[2].ToString() + " " + strpage.Split(' ')[3].ToString() + " " + strpage.Split(' ')[4].ToString();
				}

				if (lst2.TryGetValue("Kids", lst1))
				{
					if (!Recursive1(SubjectNo, Subjectinitial, (IList<Dictionary<string, object>>)lst1, ref itop, ref ileft, ref ipages, stamper, reader, canvas, ref j2, ref font2, ref i1))
					{
						throw new Exception();
					}
				}
			}

			stamper.Outlines = lst;
			reader.ViewerPreferences = iTextSharp.text.pdf.PdfWriter.PageModeUseOutlines;

			stamper.Close();
			reader.Close();

			//'Enable if security needs.
			//Dim DocSecurity As Document = New Document(Server.MapPath(ConfigurationManager.AppSettings.Item("uploadfilepath").Trim()) + "\" + Me.HProjectId.Value.ToString() + "\" + foldername + "\Report\" + SubjectNo + "_1" + ".pdf")
			//DocSecurity.LicenseKey = "dfvo+uv66OPj6vrr6PTq+unr9Ovo9OPj4+P66g=="
			//DocSecurity.Security.CanEditContent = False
			//DocSecurity.Save(Server.MapPath(ConfigurationManager.AppSettings.Item("uploadfilepath").Trim()) + "\" + Me.HProjectId.Value.ToString() + "\" + foldername + "\FinalReport\" + SubjectNo + ".pdf")
			//DocSecurity.AutoCloseAppendedDocs = True
			//DocSecurity.Close()

			//====================Set pdf fast web view to yes================
			strcommand = Server.MapPath(ConfigurationManager.AppSettings["QPdfPath"].Trim()) + " --linearize " + "\"" + Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReport\\" + SubjectNo + ".pdf\" " + "\"" + Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReportLinear\\" + SubjectNo + ".pdf\" ";

			if (!Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim() + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReportLinear")))
			{
				Directory.CreateDirectory(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim() + "\\" + this.HProjectId.Value.ToString() + "\\" + foldername + "\\FinalReportLinear"));
			}

			System.Diagnostics.Process.Start("CMD", "/C" + strcommand);
			System.Diagnostics.Process proc = System.Diagnostics.Process.Start("CMD", "/C" + strcommand);
			proc.WaitForExit();
			proc.Close();
			proc.Dispose();
			//===========================================================

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....CreateTOC", ex);
			return false;
		}
	}

#endregion

#region EXPORT PDF

	private bool ExportToPDF(string PDFFileName = "", int TranNo = 0, string folder = "", bool IsForMerge = false)
	{
		string filepath = string.Empty;

		try
		{
			CrystalDecisions.Shared.ExportOptions rptOptions = new CrystalDecisions.Shared.ExportOptions();
			//Dim pdffprnat As New CrystalDecisions.Shared.PdfFormatOptions()
			//pdffprnat.CreateBookmarksFromGroupTree = True
			//rptOptions.ExportFormatOptions = pdffprnat
			rptOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
			rptOptions.ExportDestinationType = ExportDestinationType.DiskFile;

			filepath = ConfigurationManager.AppSettings["uploadfilepath"].Trim() + "\\" + this.HProjectId.Value.ToString() + "\\" + folder;

			if (!(IsForMerge == false))
			{
				filepath += "\\RptMerge";
			}

			if (!System.IO.Directory.Exists(Server.MapPath(filepath)))
			{
				Directory.CreateDirectory(Server.MapPath(filepath));
			}

			DiskFileDestinationOptions dest = new DiskFileDestinationOptions();

			dest.DiskFileName = Server.MapPath(filepath) + "\\" + PDFFileName + ".PDF";
			rptOptions.ExportDestinationOptions = dest;
			rDocument.Export(rptOptions);
			rDocument.Close();
			rDocument.Dispose();
			return true;
		}
		catch (System.Threading.ThreadAbortException ex)
		{
			return false;
		}
		catch (Exception ex1)
		{
			this.ShowErrorMessage(ex1.Message, "Error While ExportToPDF. ", ex1);
			return false;
		}

	}

#endregion

#region DownloadZip

	private bool DownloadZip(string strFolderpath)
	{
		ZipFile zip = new ZipFile();
		string[] DocumentsArray = null;
		FileInfo fInfo = null;
		string SrcDirPath = "";
		string zipFilePath = "";
		string zipFileName = "";

		try
		{
			if (!Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strFolderpath))
			{
				return true;
			}

			//If Not Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings.Item("uploadfilepath").Trim()) + "\" + Me.HProjectId.Value.ToString() + "\" + strFolderpath + "\ZipFiles") Then
			//    Directory.CreateDirectory(Server.MapPath(ConfigurationManager.AppSettings.Item("uploadfilepath").Trim()) + "\" + Me.HProjectId.Value.ToString() + "\" + strFolderpath + "\ZipFiles")
			//End If

			//SrcDirPath = Server.MapPath(ConfigurationManager.AppSettings.Item("uploadfilepath").Trim()) + "\" + Me.HProjectId.Value.ToString() + "\" + strFolderpath + "\FinalReportLinear"
			zipFileName = string.Format("Zip_{0}.zip", DateTime.Now.ToString("yyyyMMMddHHmmss"));
			//zipFilePath = Server.MapPath(ConfigurationManager.AppSettings.Item("uploadfilepath").Trim()) + "\" + Me.HProjectId.Value.ToString() + "\" + strFolderpath + "\ZipFiles\" + zipFileName

			//ZipFile.CreateFromDirectory(SrcDirPath, zipFilePath)
			//'ZipFile.CreateFromDirectory(SrcDirPath, zipFilePath, CompressionLevel.NoCompression, False)

			//Using fs As FileStream = New FileStream(zipFilePath, FileMode.Open, FileAccess.Read)
			//    Dim bytes As Byte() = New Byte(CInt(fs.Length) - 1) {}
			//    fs.Read(bytes, 0, CInt(fs.Length))

			//    Dim Response As System.Web.HttpResponse = System.Web.HttpContext.Current.Response
			//    Response.Clear()
			//    Response.Buffer = True

			//    Response.ContentType = "application/zip"
			//    Response.AddHeader("content-disposition", "attachment; filename=" + zipFileName)
			//    Response.BinaryWrite(bytes)
			//    Response.Flush()
			//    'ApplicationInstance.CompleteRequest()
			//    Response.End()
			//End Using

			DocumentsArray = System.IO.Directory.GetFiles(Server.MapPath(ConfigurationManager.AppSettings["uploadfilepath"].Trim()) + "\\" + this.HProjectId.Value.ToString() + "\\" + strFolderpath + "\\FinalReportLinear");
			if (DocumentsArray.Length == 0)
			{
				return true;
			}
			System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;

			zip.AlternateEncodingUsage = ZipOption.AsNecessary;
			zip.UseZip64WhenSaving = Zip64Option.Always;

			zip.AddDirectoryByName("Files");
			for (var i = 0; i < DocumentsArray.Length; i++)
			{
				fInfo = new FileInfo(DocumentsArray[i]);
				if (fInfo.Exists)
				{
					string filePath = fInfo.FullName.ToString();
					zip.AddFile(filePath, "Files");
				}
			}

			response.Clear();
			response.ContentType = "application/zip";
			response.AddHeader("content-disposition", "attachment; filename=" + zipFileName);
			zip.Save(response.OutputStream);
			response.Flush();
			ApplicationInstance.CompleteRequest();
			response.End();

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "...........DownloadZip", ex);
			//Return False
			//Throw ex
			return true;
		}
	}


#endregion

#region Radio button events

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub RBLProjecttype_SelectedIndexChanged(sender As Object, e As EventArgs) Handles RBLProjecttype.SelectedIndexChanged, RBLselect.SelectedIndexChanged
	protected void RBLProjecttype_SelectedIndexChanged(object sender, EventArgs e)
	{
		ResetPage();
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub btnRearrangeActivity_Click(sender As Object, e As EventArgs) Handles btnRearrangeActivity.Click
	protected void btnRearrangeActivity_Click(object sender, EventArgs e)
	{
		try
		{
			if (!SequenceActivity())
			{
				this.ShowErrorMessage("Error Whlie Rearranging", "");
//INSTANT C# WARNING: 'Exit Try' statements have no equivalent in C#, so it has been replaced with a 'goto' statement:
//ORIGINAL LINE: Exit Try
				goto ExitLabel1;
			}

		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message, ".....btnRearrangeActivity_Click", ex);
		}
		ExitLabel1: ;
	}

//INSTANT C# WARNING: Strict 'Handles' conversion only applies to 'WithEvents' fields declared in the same class - the event will be wired in 'SubscribeToEvents':
//ORIGINAL LINE: Protected Sub btnRearrangeReport_Click(sender As Object, e As EventArgs) Handles btnRearrangeReport.Click
	protected void btnRearrangeReport_Click(object sender, EventArgs e)
	{
		try
		{
			if (!SequenceReport())
			{
				this.ShowErrorMessage("Error Whlie Rearranging", "");
//INSTANT C# WARNING: 'Exit Try' statements have no equivalent in C#, so it has been replaced with a 'goto' statement:
//ORIGINAL LINE: Exit Try
				goto ExitLabel1;
			}

		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message, ".....btnRearrangeReport_Click", ex);
		}
		ExitLabel1: ;
	}

#endregion

#region Helper Function

	private bool GetReportType(ref DataTable dt)
	{
		string wStr = string.Empty;
		DataSet Ds_fillReport = new DataSet();
		DataTable dt_FillReport = new DataTable();
		DataTable dt_Reports = new DataTable();
		DataRow dr_Reports = null;
		int SeqNo = 0;
		try
		{
			wStr = " vWorkspaceId = '" + this.HProjectId.Value.Trim() + "'";
			wStr += " And cStatusindi<>'D'";
			wStr += " And ISNULL(vNodeDisplayName,'') <> ''";
			if (!objHelp.Get_ViewSampleDetail(wStr, WS_HelpDbTable.DataRetrievalModeEnum.DataTable_WithWhereCondition, ref Ds_fillReport, ref eStr_Retu))
			{
				throw new Exception(eStr_Retu);
			}
			if (Ds_fillReport.Tables[0].Rows.Count > 0)
			{
				dt_FillReport = Ds_fillReport.Tables[0].DefaultView.ToTable(true, "iNodeId,vNodeDisplayName".Split(','));
			}
			dt_Reports.Columns.Add(new DataColumn("iSeqNo", typeof(int)));
			dt_Reports.Columns.Add(new DataColumn("vReportId", typeof(string)));
			dt_Reports.Columns.Add(new DataColumn("iNodeID", typeof(int)));
			dt_Reports.Columns.Add(new DataColumn("vReportDesc", typeof(string)));
			dt_Reports.Columns.Add(new DataColumn("vReportType", typeof(string)));
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 1;
			dr_Reports["iNodeID"] = -2;
			dr_Reports["vReportId"] = "1#-2";
			dr_Reports["vReportDesc"] = "MSR Report";
			dr_Reports["vReportType"] = "1";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();


			//dr_Reports = dt_Reports.NewRow
			//dr_Reports("iSeqNo") = 2
			//dr_Reports("iNodeID") = -12
			//dr_Reports("vReportId") = "12#-12"
			//dr_Reports("vReportDesc") = "MSR Review History Report"
			//dr_Reports("vReportType") = "1"
			//dt_Reports.Rows.Add(dr_Reports)
			//dt_Reports.AcceptChanges()

			//dr_Reports = dt_Reports.NewRow
			//dr_Reports("iSeqNo") = 4
			//dr_Reports("iNodeID") = -14
			//dr_Reports("vReportId") = "14#-14"
			//dr_Reports("vReportDesc") = "MSR DCF Report"
			//dr_Reports("vReportType") = "1"
			//dt_Reports.Rows.Add(dr_Reports)
			//dt_Reports.AcceptChanges()


			//dr_Reports = dt_Reports.NewRow
			//dr_Reports("iSeqNo") = 5
			//dr_Reports("iNodeID") = -11
			//dr_Reports("vReportId") = "11#-11"
			//dr_Reports("vReportDesc") = "MSR Version History Report"
			//dr_Reports("vReportType") = "1"
			//dt_Reports.Rows.Add(dr_Reports)
			//dt_Reports.AcceptChanges()

			//dr_Reports = dt_Reports.NewRow
			//dr_Reports("iSeqNo") = 6
			//dr_Reports("iNodeID") = -11
			//dr_Reports("vReportId") = "16#-16"
			//dr_Reports("vReportDesc") = "MSR Additional Test Report"
			//dr_Reports("vReportType") = "1"
			//dt_Reports.Rows.Add(dr_Reports)
			//dt_Reports.AcceptChanges()


			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 7;
			dr_Reports["iNodeID"] = -1;
			dr_Reports["vReportId"] = "2#-1";
			dr_Reports["vReportDesc"] = "Screening Lab Report";
			dr_Reports["vReportType"] = "2";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 8;
			dr_Reports["iNodeID"] = 0;
			dr_Reports["vReportId"] = "3#-3";
			dr_Reports["vReportDesc"] = "CRF Report";
			dr_Reports["vReportType"] = "3";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 9;
			dr_Reports["iNodeID"] = -4;
			dr_Reports["vReportId"] = "4#-4";
			dr_Reports["vReportDesc"] = "eCRF Status History Report";
			dr_Reports["vReportType"] = "3";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 10;
			dr_Reports["iNodeID"] = -5;
			dr_Reports["vReportId"] = "5#-5";
			dr_Reports["vReportDesc"] = "eCRF Data Change Status Report";
			dr_Reports["vReportType"] = "3";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 11;
			dr_Reports["iNodeID"] = -6;
			dr_Reports["vReportId"] = "6#-6";
			dr_Reports["vReportDesc"] = "CRF DCF Report";
			dr_Reports["vReportType"] = "3";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 12;
			dr_Reports["iNodeID"] = -8;
			dr_Reports["vReportId"] = "8#-8";
			dr_Reports["vReportDesc"] = "eCRF Version History Report";
			dr_Reports["vReportType"] = "3";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();

			dr_Reports = dt_Reports.NewRow();
			dr_Reports["iSeqNo"] = 13;
			dr_Reports["iNodeID"] = -7;
			dr_Reports["vReportId"] = "7#-7";
			dr_Reports["vReportDesc"] = "SEC Report";
			dr_Reports["vReportType"] = "3";
			dt_Reports.Rows.Add(dr_Reports);
			dt_Reports.AcceptChanges();


			if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == false)
			{
				if (RBLselect.SelectedIndex == 0)
				{
					//ECG
					dr_Reports = dt_Reports.NewRow();
					dr_Reports["iSeqNo"] = 14;
					dr_Reports["iNodeID"] = -9;
					dr_Reports["vReportId"] = "9#-9";
					dr_Reports["vReportDesc"] = "ECG";
					dr_Reports["vReportType"] = "4";
					dt_Reports.Rows.Add(dr_Reports);
					dt_Reports.AcceptChanges();
					//XRAY
					dr_Reports = dt_Reports.NewRow();
					dr_Reports["iSeqNo"] = 15;
					dr_Reports["iNodeID"] = -10;
					dr_Reports["vReportId"] = "10#-10";
					dr_Reports["vReportDesc"] = "XRAY";
					dr_Reports["vReportType"] = "5";
					dt_Reports.Rows.Add(dr_Reports);
					dt_Reports.AcceptChanges();
				}
			}
			dt_Reports.DefaultView.Sort = "iSeqNo Desc";
			if (dt_FillReport.Rows.Count > 0)
			{
				SeqNo = Convert.ToInt16(dt_Reports.DefaultView.ToTable().Rows[0]["iSeqNo"]) + 1;
				foreach (DataRow dr in dt_FillReport.Rows)
				{
					dr_Reports = dt_Reports.NewRow();
					dr_Reports["iSeqNo"] = SeqNo;
					dr_Reports["iNodeID"] = dr["iNodeID"];
					dr_Reports["vReportId"] = Convert.ToString(dr_Reports["iSeqNo"]) + "#" + Convert.ToString(dr["iNodeID"].ToString());
					dr_Reports["vReportDesc"] = dr["vNodeDisplayName"];
					dt_Reports.Rows.Add(dr_Reports);
					dt_Reports.AcceptChanges();
					SeqNo = SeqNo + 1;
				}
			}
			dt = dt_Reports;
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.ToString(), "....FillReportType()", ex);
			return false;
		}
	}

	private bool SequenceReport()
	{
		DataSet ds_Report = new DataSet();
		DataSet ds_SequenceSample = new DataSet();
		DataTable dt_Report = new DataTable();

//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim drReport As DataRow, drSeq As DataRow
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim drSeq As DataRow
		string wstr = string.Empty;
		DataSet ds_ParentAct = new DataSet();
		int iNodeNo = 2;
		try
		{
			if (!string.IsNullOrEmpty(this.HFGV_Report.Value.ToString()))
			{
				ds_Report.Tables.Add((DataTable)JsonConvert.DeserializeObject(this.HFGV_Report.Value.Trim(), typeof(DataTable)));
				dt_Report = (DataTable)this.ViewState[vs_reporttype];

				if (dt_Report != null && ds_Report != null)
				{
					foreach (DataRow drReport in dt_Report.Rows)
					{
						foreach (DataRow drSeq in ds_Report.Tables[0].Rows)
						{
							if (drReport["iNodeId"] == drSeq["iNodeId"])
							{
								drReport["iSeqNo"] = drSeq["iSeqNo"];
								break;
							}
						}
						dt_Report.AcceptChanges();
					}
					dt_Report.DefaultView.Sort = "iSeqNo ASC";

				}
				this.ViewState[vs_reporttype] = dt_Report.DefaultView.ToTable();

				gvwReportType.DataSource = dt_Report.DefaultView.ToTable();
				gvwReportType.DataBind();
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "...SequenceReport()", ex);
			return false;
		}
	}

	private bool SequenceActivity()
	{
		DataSet ds_Activity = new DataSet();
		DataSet ds_SequenceSample = new DataSet();
		DataTable dt_WorkspaceNodeDetail = new DataTable();
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim drActivity As DataRow, drSeq As DataRow
//INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
//		Dim drSeq As DataRow
		string wstr = string.Empty;
		DataSet ds_ParentAct = new DataSet();
		int iNodeNo = 2;

		try
		{
			if (!string.IsNullOrEmpty(this.HFGV_Activity.Value.ToString()))
			{
				ds_Activity.Tables.Add((DataTable)JsonConvert.DeserializeObject(this.HFGV_Activity.Value.Trim(), typeof(DataTable)));

				dt_WorkspaceNodeDetail = (DataTable)this.ViewState[VS_Activity];

				if (dt_WorkspaceNodeDetail != null && ds_Activity != null)
				{
					foreach (DataRow drActivity in dt_WorkspaceNodeDetail.Rows)
					{
						foreach (DataRow drSeq in ds_Activity.Tables[0].Rows)
						{
							if (drActivity["iNodeId"] == drSeq["iNodeId"])
							{
								drActivity["iNodeNo"] = drSeq["iNodeNo"];
								break;
							}
						}
						dt_WorkspaceNodeDetail.AcceptChanges();
					}
					dt_WorkspaceNodeDetail.DefaultView.Sort = "iNodeNo ASC";
				}
				this.ViewState[VS_Activity] = dt_WorkspaceNodeDetail.DefaultView.ToTable();
				gvwActivity.DataSource = dt_WorkspaceNodeDetail.DefaultView.ToTable();
				gvwActivity.DataBind();
			}
			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "...SequenceActivity()", ex);
			return false;
		}
	}

	private string RenderControl(Control control)
	{

		StringBuilder sb = new StringBuilder();
		StringWriter sw = new StringWriter(sb);
		HtmlTextWriter writer = new HtmlTextWriter(sw);

		control.RenderControl(writer);
		return sb.ToString();
	}

	private bool Recursive1(string subjectno, string subjectinitial, IList<Dictionary<string, object>> list1, ref int itop, ref int ileft, ref int ipages, iTextSharp.text.pdf.PdfStamper stamper, iTextSharp.text.pdf.PdfReader reader, iTextSharp.text.pdf.PdfContentByte canvas, ref int j1, ref iTextSharp.text.Font font2)
	{
		int tempVar = 0;
		return Recursive1(subjectno, subjectinitial, list1, ref itop, ref ileft, ref ipages, stamper, reader, canvas, ref j1, ref font2, ref tempVar);
	}

//INSTANT C# NOTE: Overloaded method(s) are created above to convert the following method having optional parameters:
//ORIGINAL LINE: Private Function Recursive1(ByVal subjectno As String, ByVal subjectinitial As String, ByVal list1 As IList(Of Dictionary(Of String, Object)), ByRef itop As Integer, ByRef ileft As Integer, ByRef ipages As Integer, ByVal stamper As iTextSharp.text.pdf.PdfStamper, ByVal reader As iTextSharp.text.pdf.PdfReader, ByVal canvas As iTextSharp.text.pdf.PdfContentByte, ByRef j1 As Integer, ByRef font2 As iTextSharp.text.Font, Optional ByRef i1 As Integer = 0) As Boolean
	private bool Recursive1(string subjectno, string subjectinitial, IList<Dictionary<string, object>> list1, ref int itop, ref int ileft, ref int ipages, iTextSharp.text.pdf.PdfStamper stamper, iTextSharp.text.pdf.PdfReader reader, iTextSharp.text.pdf.PdfContentByte canvas, ref int j1, ref iTextSharp.text.Font font2, ref int i1)
	{
		dynamic lst1 = null;
		object lst2 = null;
		List<string> strsub = new List<string>();
		string strtitle = "";
		string strpage = "";
		int splitchar = 0;
		iTextSharp.text.Chunk c = null;
		iTextSharp.text.pdf.PdfAction action = null;
		string pagewidth = (reader.GetPageSize(ipages).Width).ToString();
		iTextSharp.text.Chunk cPagenumber = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cPagenumberTest = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cDottedline = null;
		//Dim strdot As String = "..........................................................................................................................................................."
		try
		{
			ileft += 10;
			for (int i = 0; i < list1.Count; i++)
			{
				strsub.Clear();
				itop -= 20;
				i1 += 1;
				if (itop < 72)
				{
					ipages += 1;

					stamper.InsertPage(ipages, reader.GetPageSize(1));
					canvas = stamper.GetOverContent(ipages);
					itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);

					if (!this.AddHeader(canvas, stamper, reader, itop, ipages, subjectno, subjectinitial))
					{
						return false;
					}
					itop -= 160;
				}
				else
				{
					canvas = stamper.GetOverContent(ipages);
				}
				lst1 = list1[i];

				if (lst1.TryGetValue("Title", strtitle))
				{
					c = new iTextSharp.text.Chunk(strtitle);
					c.Font = font2;
					if (c.GetWidthPoint() + ileft > Convert.ToInt32(Convert.ToInt32(pagewidth) - 47))
					{
						if (ileft == 82)
						{
							splitchar = 66;
						}
						else if (ileft == 92)
						{
							splitchar = 65;
						}
						else if (ileft == 102)
						{
							splitchar = 64;
						}
						string strtemp = Convert.ToString(strtitle.Length / (double)splitchar);
						if (strtitle.Length <= splitchar)
						{
							strtemp = "0";
						}
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of Convert.ToInt16(strtemp.Split(".")(0)) for every iteration:
						int tempVar2 = Convert.ToInt16(strtemp.Split('.')[0]);
						for (int i2 = 0; i2 <= tempVar2; i2++)
						{
							if (i2 == 0)
							{
								if (Convert.ToInt16(strtemp.Split('.')[0]) == 0)
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length));
								}
								else
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, splitchar));
								}
							}
							else
							{
								strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length - (i2 * splitchar)));
							}
						}
					}
					else
					{
						strsub.Add(strtitle.Substring(0, strtitle.Length));
					}
				}
				action = new iTextSharp.text.pdf.PdfAction();
				action.Put(iTextSharp.text.pdf.PdfName.S, iTextSharp.text.pdf.PdfName.GOTO);
				//-----------------------Added by nipun khant-----------------------------------
				if (lst1.TryGetValue("Page", strpage))
				{
					strpage = strpage.Replace("XYZ", "/XYZ");
					action.Put(iTextSharp.text.pdf.PdfName.D, new iTextSharp.text.pdf.PdfLiteral("[" + Convert.ToInt32(Convert.ToInt32(strpage.Split(' ')[0]) + j1 - 1).ToString() + " " + strpage.Split(' ')[1] + " " + strpage.Split(' ')[2] + " " + strpage.Split(' ')[3] + " " + strpage.Split(' ')[4] + "]"));

				}
				//cDottedline = New iTextSharp.text.Chunk(strdot)
				cDottedline = new iTextSharp.text.Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
				cDottedline.Font = font2;
				//  cDottedline.SetAction(action)
				if (strsub.Count == 1)
				{
					//-------------------For Dotted line-------------------------
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cDottedline), ileft, itop, 0);
					//-----------------------------------------------------------
				}
				else
				{
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cDottedline), ileft, itop - ((strsub.Count - 1) * 20), 0);
				}
				for (int i3 = 0; i3 < strsub.Count; i3++)
				{
					if (i3 > 0)
					{
						itop -= 20;
					}
					c = new iTextSharp.text.Chunk(strsub[i3]);
					c.Font = font2;
					c.SetAction(action);
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), ileft, itop, 0);

				}

				int intPageNo = 0;
				string strBlank_PageNo = null;
				if (lst1.TryGetValue("Page", strpage))
				{
					strpage = strpage.Replace("XYZ", "/XYZ");
					//cPagenumber = New iTextSharp.text.Chunk(Convert.ToString(Convert.ToInt32(strpage.Split(" ")(0)) + j1))
					intPageNo = Convert.ToInt32(strpage.Split(' ')[0]) + j1;
					strBlank_PageNo = "   " + intPageNo;
					cPagenumber = new iTextSharp.text.Chunk(strBlank_PageNo);
					cPagenumber.Font = font2;
					cPagenumber.SetBackground(iTextSharp.text.BaseColor.WHITE);
				}
				//cPagenumber.SetAction(action)
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cPagenumber), Convert.ToSingle(Convert.ToInt32(pagewidth) - 49), itop, 0);

				int intRemoveExtraWidth = 37;
				intRemoveExtraWidth = intRemoveExtraWidth - (intPageNo.ToString().Length * 5);
				cPagenumberTest = new iTextSharp.text.Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
				cPagenumberTest.Font.Color = iTextSharp.text.BaseColor.WHITE;
				cPagenumberTest.SetBackground(iTextSharp.text.BaseColor.WHITE);
				//cPagenumberTest.SetAction(action)
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cPagenumberTest), Convert.ToSingle(Convert.ToInt32(pagewidth) - intRemoveExtraWidth), itop, 0);

				list1[i]["Page"] = Convert.ToInt32(strpage.Split(' ')[0] + j1).ToString() + " " + strpage.Split(' ')[1].ToString() + " " + strpage.Split(' ')[2].ToString() + " " + strpage.Split(' ')[3].ToString() + " " + strpage.Split(' ')[4].ToString();
				if (lst1.TryGetValue("Kids", lst2))
				{
					if (!Recursive2(subjectno, subjectinitial, (IList<Dictionary<string, object>>)lst2, ref itop, ileft, ref ipages, stamper, reader, canvas, ref j1, ref font2, ref i1))
					{
						return false;
					}
				}
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While Recursive function. ", ex);
			return false;
		}
	}

	private bool Recursive2(string subjectno, string subjectinitial, IList<Dictionary<string, object>> list1, ref int itop, int ileft, ref int ipages, iTextSharp.text.pdf.PdfStamper stamper, iTextSharp.text.pdf.PdfReader reader, iTextSharp.text.pdf.PdfContentByte canvas, ref int j1, ref iTextSharp.text.Font font2)
	{
		int tempVar = 0;
		return Recursive2(subjectno, subjectinitial, list1, ref itop, ileft, ref ipages, stamper, reader, canvas, ref j1, ref font2, ref tempVar);
	}

//INSTANT C# NOTE: Overloaded method(s) are created above to convert the following method having optional parameters:
//ORIGINAL LINE: Private Function Recursive2(ByVal subjectno As String, ByVal subjectinitial As String, ByVal list1 As IList(Of Dictionary(Of String, Object)), ByRef itop As Integer, ByVal ileft As Integer, ByRef ipages As Integer, ByVal stamper As iTextSharp.text.pdf.PdfStamper, ByVal reader As iTextSharp.text.pdf.PdfReader, ByVal canvas As iTextSharp.text.pdf.PdfContentByte, ByRef j1 As Integer, ByRef font2 As iTextSharp.text.Font, Optional ByRef i1 As Integer = 0) As Boolean
	private bool Recursive2(string subjectno, string subjectinitial, IList<Dictionary<string, object>> list1, ref int itop, int ileft, ref int ipages, iTextSharp.text.pdf.PdfStamper stamper, iTextSharp.text.pdf.PdfReader reader, iTextSharp.text.pdf.PdfContentByte canvas, ref int j1, ref iTextSharp.text.Font font2, ref int i1)
	{
		dynamic lst1 = null;
		object lst2 = null;
		List<string> strsub = new List<string>();
		string strtitle = "";
		string strpage = "";
		int splitchar = 0;
		iTextSharp.text.Chunk c = null;
		iTextSharp.text.pdf.PdfAction action = null;
		string pagewidth = (reader.GetPageSize(ipages).Width).ToString();
		iTextSharp.text.Chunk cPagenumber = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cPagenumberTest = new iTextSharp.text.Chunk();
		iTextSharp.text.Chunk cDottedline = null;
		//Dim strdot As String = "........................................................................................................................................................"
		try
		{
			ileft += 10;
			for (int i = 0; i < list1.Count; i++)
			{
				strsub.Clear();
				itop -= 20;
				i1 += 1;
				if (itop < 72)
				{
					ipages += 1;
					stamper.InsertPage(ipages, reader.GetPageSize(1));
					canvas = stamper.GetOverContent(ipages);
					itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);
					if (!this.AddHeader(canvas, stamper, reader, itop, ipages, subjectno, subjectinitial))
					{
						return false;
					}
					itop -= 160;
				}
				else
				{
					canvas = stamper.GetOverContent(ipages);
				}
				lst1 = list1[i];

				if (lst1.TryGetValue("Title", strtitle))
				{
					c = new iTextSharp.text.Chunk(strtitle);
					c.Font = font2;
					if (c.GetWidthPoint() + ileft > Convert.ToInt32(Convert.ToInt32(pagewidth) - 47))
					{
						if (ileft == 82)
						{
							splitchar = 66;
						}
						else if (ileft == 92)
						{
							splitchar = 65;
						}
						else if (ileft == 102)
						{
							splitchar = 64;
						}
						string strtemp = Convert.ToString(strtitle.Length / (double)splitchar);
						if (strtitle.Length <= splitchar)
						{
							strtemp = "0";
						}
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of Convert.ToInt16(strtemp.Split(".")(0)) for every iteration:
						int tempVar2 = Convert.ToInt16(strtemp.Split('.')[0]);
						for (int i2 = 0; i2 <= tempVar2; i2++)
						{
							if (i2 == 0)
							{
								if (Convert.ToInt16(strtemp.Split('.')[0]) == 0)
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length));
								}
								else
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, splitchar));
								}
							}
							else
							{
								strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length - (i2 * splitchar)));
							}
						}
					}
					else
					{
						strsub.Add(strtitle.Substring(0, strtitle.Length));
					}
				}
				action = new iTextSharp.text.pdf.PdfAction();
				action.Put(iTextSharp.text.pdf.PdfName.S, iTextSharp.text.pdf.PdfName.GOTO);
				//-----------------------Added by nipun khant-----------------------------------
				if (lst1.TryGetValue("Page", strpage))
				{
					strpage = strpage.Replace("XYZ", "/XYZ");
					action.Put(iTextSharp.text.pdf.PdfName.D, new iTextSharp.text.pdf.PdfLiteral("[" + Convert.ToInt32(Convert.ToInt32(strpage.Split(' ')[0]) + j1 - 1).ToString() + " " + strpage.Split(' ')[1] + " " + strpage.Split(' ')[2] + " " + strpage.Split(' ')[3] + " " + strpage.Split(' ')[4] + "]"));

				}
				//cDottedline = New iTextSharp.text.Chunk(strdot)
				cDottedline = new iTextSharp.text.Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
				cDottedline.Font = font2;
				// cDottedline.SetAction(action)
				if (strsub.Count == 1)
				{
					//-------------------For Dotted line-------------------------
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cDottedline), ileft, itop, 0);
					//-----------------------------------------------------------
				}
				else
				{
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cDottedline), ileft, itop - ((strsub.Count - 1) * 20), 0);
				}
				for (int i3 = 0; i3 < strsub.Count; i3++)
				{
					if (i3 > 0)
					{
						itop -= 20;
					}
					c = new iTextSharp.text.Chunk(strsub[i3]);
					c.Font = font2;
					c.SetAction(action);
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), ileft, itop, 0);
				}

				int intPageNo = 0;
				string strBlank_PageNo = null;
				if (lst1.TryGetValue("Page", strpage))
				{
					strpage = strpage.Replace("XYZ", "/XYZ");
					//cPagenumber = New iTextSharp.text.Chunk(Convert.ToString(Convert.ToInt32(strpage.Split(" ")(0)) + j1))
					intPageNo = Convert.ToInt32(strpage.Split(' ')[0]) + j1;
					strBlank_PageNo = "   " + intPageNo;
					cPagenumber = new iTextSharp.text.Chunk(strBlank_PageNo);
					cPagenumber.Font = font2;
					cPagenumber.SetBackground(iTextSharp.text.BaseColor.WHITE);
				}
				//cPagenumber.SetAction(action)
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cPagenumber), Convert.ToSingle(Convert.ToInt32(pagewidth) - 49), itop, 0);

				int intRemoveExtraWidth = 37;
				intRemoveExtraWidth = intRemoveExtraWidth - (intPageNo.ToString().Length * 5);
				cPagenumberTest = new iTextSharp.text.Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
				cPagenumberTest.Font.Color = iTextSharp.text.BaseColor.WHITE;
				cPagenumberTest.SetBackground(iTextSharp.text.BaseColor.WHITE);
				//cPagenumberTest.SetAction(action)
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(cPagenumberTest), Convert.ToSingle(Convert.ToInt32(pagewidth) - intRemoveExtraWidth), itop, 0);

				list1[i]["Page"] = Convert.ToInt32(strpage.Split(' ')[0] + j1).ToString() + " " + strpage.Split(' ')[1].ToString() + " " + strpage.Split(' ')[2].ToString() + " " + strpage.Split(' ')[3].ToString() + " " + strpage.Split(' ')[4].ToString();
				if (lst1.TryGetValue("Kids", lst2))
				{
					return Recursive2(subjectno, subjectinitial, (IList<Dictionary<string, object>>)lst2, ref itop, ileft, ref ipages, stamper, reader, canvas, ref j1, ref font2, ref i1);
				}
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "Error While Recursive function. ", ex);
			return false;
		}
	}

	private bool recursiveforpdf(IList<Dictionary<string, object>> list1, iTextSharp.text.Chunk c, ref int ileft, ref string pagewidth, ref int itop, ref int ipage, ref iTextSharp.text.pdf.PdfReader reader, ref iTextSharp.text.Font font2)
	{
		dynamic lst1 = null;
		object lst2 = null;
		List<string> strsub = new List<string>();
		string strtitle = "";
		int splitchar = 0;

		try
		{
			ileft += 10;
			for (int i = 0; i < list1.Count; i++)
			{
				strsub.Clear();
				itop -= 20;
				if (itop < 72)
				{
					ipage += 1;
					itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);
					itop -= 160;
				}
				lst1 = list1[i];
				if (lst1.TryGetValue("Title", strtitle))
				{
					c = new iTextSharp.text.Chunk(strtitle);
					c.Font = font2;
					if (c.GetWidthPoint() + ileft > Convert.ToInt32(Convert.ToInt32(pagewidth) - 47))
					{
						if (ileft == 82)
						{
							splitchar = 66;
						}
						else if (ileft == 92)
						{
							splitchar = 65;
						}
						else if (ileft == 102)
						{
							splitchar = 64;
							//ElseIf ileft = 62 Then ' added by prayag
							//    splitchar = 63
						}
						string strtemp = Convert.ToString(strtitle.Length / (double)splitchar);

						if (strtitle.Length <= splitchar)
						{
							strtemp = "0";
						}

//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of Convert.ToInt16(strtemp.Split(".")(0)) for every iteration:
						int tempVar = Convert.ToInt16(strtemp.Split('.')[0]);
						for (int i2 = 0; i2 <= tempVar; i2++)
						{
							if (i2 == 0)
							{
								if (Convert.ToInt16(strtemp.Split('.')[0]) == 0)
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length));
								}
								else
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, splitchar));
								}
							}
							else
							{
								itop -= 20;
								strsub.Add(strtitle.Substring(i2 * splitchar - 1, strtitle.Length - (i2 * splitchar - 1)));
							}
						}
					}
					else
					{
						strsub.Add(strtitle.Substring(0, strtitle.Length));
					}
				}
				if (lst1.TryGetValue("Kids", lst2))
				{
					if (!recursiveforpdf1((IList<Dictionary<string, object>>)lst2, c, ileft, ref pagewidth, ref itop, ref ipage, ref reader, ref font2))
					{
						return false;
					}
				}
			}
			return true;
		}
		catch (Exception ex)
		{
			return false;
		}

	}

	private bool recursiveforpdf1(IList<Dictionary<string, object>> list1, iTextSharp.text.Chunk c, int ileft, ref string pagewidth, ref int itop, ref int ipage, ref iTextSharp.text.pdf.PdfReader reader, ref iTextSharp.text.Font font2)
	{
		dynamic lst1 = null;
		object lst2 = null;
		List<string> strsub = new List<string>();
		string strtitle = "";
		int splitchar = 0;

		try
		{
			ileft += 10;
			for (int i = 0; i < list1.Count; i++)
			{
				strsub.Clear();
				itop -= 20;
				if (itop < 72)
				{
					ipage += 1;
					itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);
					itop -= 160;
				}
				lst1 = list1[i];
				if (lst1.TryGetValue("Title", strtitle))
				{
					c = new iTextSharp.text.Chunk(strtitle);
					c.Font = font2;
					if (c.GetWidthPoint() + ileft > Convert.ToInt32(Convert.ToInt32(pagewidth) - 47))
					{
						if (ileft == 82)
						{
							splitchar = 66;
						}
						else if (ileft == 92)
						{
							splitchar = 65;
						}
						else if (ileft == 102)
						{
							splitchar = 64;
							//ElseIf ileft = 72 Then ' added by prayag
							//    splitchar = 63
						}
						string strtemp = Convert.ToString(strtitle.Length / (double)splitchar);
						if (strtitle.Length <= splitchar)
						{
							strtemp = "0";
						}
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of Convert.ToInt16(strtemp.Split(".")(0)) for every iteration:
						int tempVar = Convert.ToInt16(strtemp.Split('.')[0]);
						for (int i2 = 0; i2 <= tempVar; i2++)
						{
							if (i2 == 0)
							{
								if (Convert.ToInt16(strtemp.Split('.')[0]) == 0)
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length));
								}
								else
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, splitchar));
								}
							}
							else
							{
								itop -= 20;
								strsub.Add(strtitle.Substring(i2 * splitchar - 1, strtitle.Length - (i2 * splitchar - 1)));
							}
						}
					}
					else
					{
						strsub.Add(strtitle.Substring(0, strtitle.Length));
					}
				}
				if (lst1.TryGetValue("Kids", lst2))
				{
					return recursiveforpdf((IList<Dictionary<string, object>>)lst2, c, ref ileft, ref pagewidth, ref itop, ref ipage, ref reader, ref font2);
				}
			}
			return true;
		}
		catch (Exception ex)
		{
			return false;
		}

	}

	private bool PagesCount(IList<Dictionary<string, object>> lst, iTextSharp.text.Chunk c, ref int ileft, ref string pagewidth, ref int itop, ref int ipage, ref iTextSharp.text.pdf.PdfReader reader, ref iTextSharp.text.Font font2, ref iTextSharp.text.Font font3)
	{
		object lstpages1 = null;
		string strtitle = "";
		int splitchar = 0;
		List<string> strsub = new List<string>();

		try
		{

			for (int i = 0; i < lst.Count; i++)
			{
				strsub.Clear();
				itop -= 20;
				if (itop < 72)
				{
					ipage += 1;
					itop = Convert.ToInt32(reader.GetPageSize(1).Height - 27);
					itop -= 160;
				}
				ileft = 72;
				dynamic lstpages2 = lst[i];
				if (lstpages2.TryGetValue("Title", strtitle))
				{
					c = new iTextSharp.text.Chunk(strtitle);
					c.Font = font3;
					if (c.GetWidthPoint() + ileft > Convert.ToInt32(Convert.ToInt32(pagewidth) - 47))
					{
						if (ileft == 82)
						{
							splitchar = 66;
						}
						else if (ileft == 92)
						{
							splitchar = 65;
						}
						else if (ileft == 102)
						{
							splitchar = 64;
						}
						else if (ileft == 72)
						{
							splitchar = 67;
							//ElseIf ileft = 52 Then ' added by prayag
							//    splitchar = 63
						}
						string strtemp = Convert.ToString(strtitle.Length / (double)splitchar);
						if (strtitle.Length <= splitchar)
						{
							strtemp = "0";
						}
//INSTANT C# NOTE: The ending condition of VB 'For' loops is tested only on entry to the loop. Instant C# has created a temporary variable in order to use the initial value of Convert.ToInt16(strtemp.Split(".")(0)) for every iteration:
						int tempVar = Convert.ToInt16(strtemp.Split('.')[0]);
						for (int i2 = 0; i2 <= tempVar; i2++)
						{
							if (i2 == 0)
							{
								if (Convert.ToInt16(strtemp.Split('.')[0]) == 0)
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, strtitle.Length));
								}
								else
								{
									strsub.Add(strtitle.Substring(i2 * splitchar, splitchar));
								}
							}
							else
							{
								itop -= 20;
								strsub.Add(strtitle.Substring(i2 * splitchar - 1, strtitle.Length - (i2 * splitchar - 1)));
							}
						}
					}
					else
					{
						strsub.Add(strtitle.Substring(0, strtitle.Length));
					}
				}
				if (lstpages2.TryGetValue("Kids", lstpages1))
				{
					if (!recursiveforpdf((IList<Dictionary<string, object>>)lstpages1, c, ref ileft, ref pagewidth, ref itop, ref ipage, ref reader, ref font2))
					{
						throw new Exception();
					}
				}
			}
			return true;
		}
		catch (Exception ex)
		{
			return false;
		}
	}

	private bool AddHeader(iTextSharp.text.pdf.PdfContentByte canvas, iTextSharp.text.pdf.PdfStamper stamper, iTextSharp.text.pdf.PdfReader reader, int itop, int iPages, string subjectno, string subjectinitial)
	{
		DataSet ds_header = new DataSet();
		string[] Project = null;
		string Projectno = null;
		string SiteId = "";
		iTextSharp.text.Chunk c = null;
		int contentwidth = 0;
		try
		{
			string fontpath = Server.MapPath("Reports") + "\\times.ttf";
			iTextSharp.text.pdf.BaseFont customfont = iTextSharp.text.pdf.BaseFont.CreateFont(fontpath, iTextSharp.text.pdf.BaseFont.CP1252, iTextSharp.text.pdf.BaseFont.EMBEDDED);
			iTextSharp.text.Font font1 = new iTextSharp.text.Font(customfont, 12, 1, iTextSharp.text.BaseColor.BLACK);
			iTextSharp.text.Font font4 = new iTextSharp.text.Font(customfont, 12, 0, iTextSharp.text.BaseColor.BLACK);
			ds_header = (DataSet)this.ViewState[vs_View_getWorkspaceDetailForHdr];
			Project = ds_header.Tables[0].Rows[0]["vProjectNo"].ToString().Split(':');
			Int32 strLen = Project[0].ToString().LastIndexOf("-");
			Projectno = Project[0].ToString();
			if (Convert.ToBoolean(this.ViewState[IsProjectCT]) && strLen > 5)
			{
				Projectno = Project[0].Substring(0, strLen);
				strLen = strLen + 1;
				SiteId = Project[0].Substring(strLen);
			}
			iTextSharp.text.pdf.PdfContentByte cb = stamper.GetOverContent(iPages);
			cb.Rectangle(72, reader.GetPageSize(1).Height - 150, reader.GetPageSize(1).Width - 102, 115.0F);
			cb.SetLineWidth(0.5F);
			cb.Stroke();

			c = new iTextSharp.text.Chunk(System.Configuration.ConfigurationManager.AppSettings["Client"]);
			c.Font = font4;
			c.SetBackground(iTextSharp.text.BaseColor.WHITE);
			iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75, itop - 20, 0);

			c = new iTextSharp.text.Chunk("Sponsor Name: " + ds_header.Tables[0].Rows[0]["vClientName"].ToString());
			c.SetBackground(iTextSharp.text.BaseColor.WHITE);
			c.Font = font4;
			iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75, itop - 40, 0);
			c = new iTextSharp.text.Chunk("TABLE OF CONTENTS");
			c.Font = font1;
			c.SetBackground(iTextSharp.text.BaseColor.WHITE);
			iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75, itop - 60, 0);

			if (this.chkprotocolno.Checked == false)
			{
				if (ds_header.Tables[0].Rows[0]["ProtocolNo"].ToString().Trim().Length > 0)
				{
					contentwidth += Convert.ToInt32(c.GetWidthPoint() + 70);
					c = new iTextSharp.text.Chunk("Protocol No:");
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					c.Font = font4;
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 10 + contentwidth, itop - 60, 0);
					contentwidth += Convert.ToInt32(c.GetWidthPoint());
					c = new iTextSharp.text.Chunk(ds_header.Tables[0].Rows[0]["Protocolno"].ToString());
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					c.Font = font4;
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), contentwidth + 10, itop - 60, 0);
					cb = stamper.GetOverContent(iPages);
					cb.Rectangle(contentwidth + 10, reader.GetPageSize(1).Height - 90, c.GetWidthPoint() + 5, 15.0F);
					cb.Stroke();
				}
			}

			c = new iTextSharp.text.Chunk("Project No:");
			c.SetBackground(iTextSharp.text.BaseColor.WHITE);
			c.Font = font4;
			iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75, itop - 90, 0);
			contentwidth = Convert.ToInt32(c.GetWidthPoint());
			c = new iTextSharp.text.Chunk(Projectno);
			c.SetBackground(iTextSharp.text.BaseColor.WHITE);
			c.Font = font4;
			iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75 + contentwidth + 5, itop - 90, 0);
			cb = stamper.GetOverContent(iPages);
			cb.Rectangle(80 + contentwidth, reader.GetPageSize(1).Height - 120, c.GetWidthPoint() + 10, 15.0F);
			cb.Stroke();
			contentwidth = Convert.ToInt32(contentwidth + c.GetWidthPoint() + 100);

			if (Convert.ToBoolean(this.ViewState[IsProjectCT]) == true)
			{
				if (!string.IsNullOrEmpty(SiteId.Trim()))
				{
					c = new iTextSharp.text.Chunk("Site Id:");
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					c.Font = font4;
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 10 + contentwidth, itop - 90, 0);
					contentwidth += Convert.ToInt32(c.GetWidthPoint());
					if (string.IsNullOrEmpty(SiteId.Trim()))
					{
						SiteId = "_";
					}
					c = new iTextSharp.text.Chunk(SiteId);
					c.SetBackground(iTextSharp.text.BaseColor.WHITE);
					c.Font = font4;
					iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), contentwidth + 15, itop - 90, 0);
					cb = stamper.GetOverContent(iPages);
					cb.Rectangle(contentwidth + 15, reader.GetPageSize(1).Height - 120, c.GetWidthPoint() + 10, 15.0F);
					cb.Stroke();
					contentwidth = Convert.ToInt32(contentwidth + c.GetWidthPoint() + 20);
				}
			}



			if (this.ddlActivityType.SelectedIndex == 2)
			{
				c = new iTextSharp.text.Chunk("Subject No:");
				c.SetBackground(iTextSharp.text.BaseColor.WHITE);
				c.Font = font4;
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75, itop - 110, 0);
				contentwidth = Convert.ToInt32(c.GetWidthPoint());
				if (string.IsNullOrEmpty(this.hdnSubSelection.Value.Trim()))
				{
					c = new iTextSharp.text.Chunk("_");
				}
				else
				{
					c = new iTextSharp.text.Chunk(subjectno);
				}
				c.SetBackground(iTextSharp.text.BaseColor.WHITE);
				c.Font = font4;
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 75 + contentwidth + 5, itop - 110, 0);
				cb = stamper.GetOverContent(iPages);
				cb.Rectangle(80 + contentwidth, reader.GetPageSize(1).Height - 140, c.GetWidthPoint() + 10, 15.0F);
				cb.Stroke();
				contentwidth = Convert.ToInt32(80 + contentwidth + c.GetWidthPoint() + 10);
			}
			if (this.chkinitial.Checked == false && this.ddlActivityType.SelectedIndex == 2)
			{
				c = new iTextSharp.text.Chunk("Subject Initials:");
				c.SetBackground(iTextSharp.text.BaseColor.WHITE);
				c.Font = font4;
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), 10 + contentwidth, itop - 110, 0);
				contentwidth += Convert.ToInt32(c.GetWidthPoint());
				if (string.IsNullOrEmpty(subjectinitial.Trim()))
				{
					c = new iTextSharp.text.Chunk("_");
				}
				else
				{
					c = new iTextSharp.text.Chunk(subjectinitial);
				}
				c.SetBackground(iTextSharp.text.BaseColor.WHITE);
				c.Font = font4;
				iTextSharp.text.pdf.ColumnText.ShowTextAligned(canvas, iTextSharp.text.Element.ALIGN_LEFT, new iTextSharp.text.Phrase(c), contentwidth + 15, itop - 110, 0);
				cb = stamper.GetOverContent(iPages);
				cb.Rectangle(contentwidth + 15, reader.GetPageSize(1).Height - 140, c.GetWidthPoint() + 10, 15.0F);
				cb.Stroke();
			}
			cb = stamper.GetOverContent(iPages);
			string Path = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.ToString().LastIndexOf("/"));
			Path = Path + "/images/lambda_logo.jpg";
			iTextSharp.text.Image img = new iTextSharp.text.Jpeg(new Uri(Path));
			cb.AddImage(img, 90.0F, 0, 0, 90.0F, 470, itop - 115);

			if (!string.IsNullOrEmpty(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()))
			{
				cb = stamper.GetOverContent(iPages);
				iTextSharp.text.Image imglogo = new iTextSharp.text.Jpeg(new Uri(this.ViewState[vs_sponsorlogofilepath].ToString().Trim()));
				cb.AddImage(imglogo, 90.0F, 0, 0, 90.0F, 380, itop - 115);
			}

			return true;
		}
		catch (Exception ex)
		{
			this.ShowErrorMessage(ex.Message, "....AddHeader", ex);
			return false;
		}
	}

	public override void VerifyRenderingInServerForm(Control control)
	{
		// Verifies that the control is rendered

	}

#endregion

#region ResetPage

	private void ResetPage()
	{
		this.lblSubjectName.Text = "";
		this.lblSubjectNo.Text = "";
		this.txtproject.Text = "";
		this.HFHeaderLabel.Value = "";
		this.HFHeaderPDF.Value = ".";
		this.HProjectId.Value = "";
		this.hdnLock.Value = false.ToString();
		this.ddlSubject.Items.Clear();
		this.ddlPeriod.Items.Clear();
		this.divActivity.Style.Add("Display", "none");
		this.divReport.Style.Add("Display", "none");
		this.dvheadershow.Style.Add("display", "none");
		this.gvwActivity.DataSource = null;
		this.gvwActivity.DataBind();
		this.gvwReportType.DataSource = null;
		this.gvwReportType.DataBind();
		this.ddlActivityType.Enabled = false;
		this.ddlPrinttype.Enabled = true;
		this.ddlPrinttype.SelectedIndex = 0;
		this.ddlActivityType.SelectedIndex = 0;
		this.BtnGeneratePdf.Style.Add("Display", "none");
		this.lockdtl.Style.Add("Display", "none");
		this.ViewState.Clear();
		this.chkDataType.Checked = false;
		this.chkSubactivityWise.Checked = false;

		if (RBLselect.SelectedValue == "0")
		{
			this.chkSubactivityWise.Style.Add("display", "block");
		}
		else
		{
			this.chkSubactivityWise.Style.Add("display", "none");
			chkSubactivityWise.Checked = false;
		}
	}

#endregion

#region Error Handler

	private void ShowErrorMessage(string exMessage, string eStr)
	{
		((Label)this.Master.FindControl("lblerrormsg")).Text = exMessage + "<BR> " + eStr;
		System.Web.SessionState.HttpSessionState tempVar = Session;
		objCommon.WriteError(Server, Request, ref tempVar, exMessage + "<BR> " + eStr);
	}

	private void ShowErrorMessage(string exMessage, string eStr, Exception ex)
	{
		((Label)this.Master.FindControl("lblerrormsg")).Text = exMessage + "<BR> " + eStr;
		System.Web.SessionState.HttpSessionState tempVar = Session;
		objCommon.WriteError(Server, Request, ref tempVar, ex, exMessage + "<BR> " + eStr);
	}

#endregion

#region Wrap String
	//Public Function WrapString(ByVal str As String, ByVal numOfChar As Long) As String
	//    Dim newStr As String = ""
	//    Dim nCount As Long
	//    Dim bolContinue As Boolean = False
	//    Do While Len(str)
	//        Dim strFindText As String = Left$(str, numOfChar)
	//        'If (strFindText.IndexOf(" ") > -1) Then
	//        'newStr = newStr + strFindText
	//        'bolContinue = True
	//        'Else
	//        'If bolContinue = True Then
	//        '    newStr = newStr + Left$(str, numOfChar)
	//        'Else
	//        '    newStr = newStr + " " + Left$(str, numOfChar)
	//        'End If
	//        'bolContinue = False

	//        'newStr = newStr + " " + Left$(str, numOfChar)
	//        'End If
	//        newStr = newStr + " " + Left$(str, numOfChar)
	//        str = Mid$(str, numOfChar + 1)
	//        nCount = nCount + 1
	//    Loop
	//    Return newStr.Trim()
	//End Function

	public string WrapString(string str, long numOfChar)
	{
		string newStr = "";
		long nCount = 0;
		bool bolContinue = false;
		string[] Str_wrap_main = null;
		string[] Str_wrap_sub = null;
		int count = 0;
		int Subcount = 0;
		//Dim i As Integer = 0
		//Dim j As Integer = 0
		string[] sub_comma = null;
		int commacount = 0;
		bool Bol_Coma = false;

		Str_wrap_main = str.Split(' ');
		while (str.Length != 0)
		{

			string strFindText = str.Substring(0, (System.Int32)numOfChar);
			Str_wrap_sub = strFindText.Split(' ');
			if (bolContinue == false)
			{
				count = count + Str_wrap_sub.Length;
			}
			else
			{
				count = count + Str_wrap_sub.Length - 1;
			}

			if (Bol_Coma == true)
			{
				if (str.Contains(" "))
				{

				}
				else
				{

					sub_comma = str.Split(',');
					commacount = str.Split(',')[sub_comma.Length - 1].Length;
					numOfChar = numOfChar - commacount;
					newStr = newStr + " " + str.Substring(0, (System.Int32)numOfChar);
					str = str.Substring((System.Int32)numOfChar);
					numOfChar = numOfChar + commacount;
					Bol_Coma = true;
				}
				//  newStr = newStr + " " + Left$(str, numOfChar)
				// str = Mid$(str, numOfChar + 1)
			}
			else
			{
				if (Str_wrap_main[count - 1] != Str_wrap_sub[Str_wrap_sub.Length - 1]) //For checking the long sentence
				{

					string MainString = Str_wrap_main[count - 1];
					string SubString = Str_wrap_sub[Str_wrap_sub.Length - 1];

					if (SubString.Contains(","))
					{
						sub_comma = SubString.Split(',');
						commacount = SubString.Split(',')[sub_comma.Length - 1].Length;
						numOfChar = numOfChar - commacount;
						newStr = newStr + " " + str.Substring(0, (System.Int32)numOfChar);
						str = str.Substring((System.Int32)numOfChar);
						numOfChar = numOfChar + commacount;
						Bol_Coma = true;

					}
					else
					{

						if (MainString.Length > SubString.Length)
						{
							numOfChar = numOfChar - SubString.Length;
							count = count - 1;
							newStr = newStr + " " + str.Substring(0, (System.Int32)numOfChar);
							str = str.Substring((System.Int32)numOfChar);
							numOfChar = numOfChar + SubString.Length;
							Bol_Coma = false;
						}
						else
						{

							newStr = newStr + " " + str.Substring(0, (System.Int32)numOfChar);
							str = str.Substring((System.Int32)numOfChar);
							Bol_Coma = false;
						}


					}

					bolContinue = false;
				}
				else
				{
					bolContinue = true;
					newStr = newStr + " " + str.Substring(0, (System.Int32)numOfChar);
					str = str.Substring((System.Int32)numOfChar);
					Bol_Coma = false;
				}

			}



			nCount = nCount + 1;

		}
		return newStr.Trim();
	}
	// <Services.WebMethod()> _
	//  Public Function GetMyProjectCompletionList_dossier1(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

	[System.Web.Script.Services.ScriptMethod(), System.Web.Services.WebMethod()]
	public static string[] GetMyProjectCompletionList_dossier1(string prefixText, int count, string contextKey)
	{
		clsCommon Objcommon = new clsCommon();
		WS_HelpDbTable.WS_HelpDbTable DBHelp = Objcommon.GetHelpDbTableRef();
		string[] item = null;

		string Wstr_ScopeValue = "";
		item = new string[1];
		item[0] = "Project Not Found";

		//To Get Where condition of ScopeVales( Project Type )
		//If Convert.ToString(HttpContext.Current.Session(S_ScopeValue)).Length > 0 Then
		//    Wstr_ScopeValue = Convert.ToString(HttpContext.Current.Session(S_ScopeValue))
		//    Wstr_ScopeValue = " vProjectTypeCode in (" + Wstr_ScopeValue + ")"
		//End If

		//Changed on 01-Sept-2009
		//If Not IsNothing(contextKey) AndAlso contextKey.ToString.Trim() <> "" Then
		//    contextKey += " And " + Wstr_ScopeValue
		//Else
		//    contextKey = Wstr_ScopeValue
		//End If
		//'*****************************************

		item = DBHelp.GetMyProjectCompletionList(prefixText, count, contextKey);
		return item;

	}

#endregion

#region Generate Barcode

	public byte[] GenerateBarcodeUsingBarcodeImageGenerator(string BarcodeText, int xCoOrdinate, int yCoOrdinate, int BarcodeWidth, int BarcodeHeight)
	{
		BarcodeGenerator BarcodeImage = new BarcodeGenerator();
		System.IO.FileStream fsPhoto = null;
		byte[] binaryfile = null;
		Graphics g = null;
		System.Drawing.Image imagetoconvert = null;
		string strBarcode = "";

		//    Dim bm As Bitmap = New Bitmap(400, 140)
		//    Dim xCoOrdinate As Integer = 5
		//    Dim yCoOrdinate As Integer = 5
		//    BarcodeImage.Width = 395
		//    BarcodeImage.Height = 90

		Bitmap bm = new Bitmap(BarcodeWidth, BarcodeHeight);
		BarcodeImage.Width = BarcodeWidth;
		BarcodeImage.Height = BarcodeHeight;

		g = Graphics.FromImage(bm);
		g.Clear(Color.White);
		strBarcode = BarcodeImage.DrawCode128(g, BarcodeText, "", xCoOrdinate, yCoOrdinate);

		if (!string.IsNullOrEmpty(strBarcode))
		{
			this.ShowErrorMessage("Error While Generating Barcode", "Barcode");
		}

		bm.Save(AppDomain.CurrentDomain.BaseDirectory + "\\BarCode.png", System.Drawing.Imaging.ImageFormat.Png);
		fsPhoto = new System.IO.FileStream(AppDomain.CurrentDomain.BaseDirectory + "\\BarCode.png", FileMode.Open);
		imagetoconvert = System.Drawing.Image.FromStream(fsPhoto);
		binaryfile = (byte[])((new ImageConverter()).ConvertTo(imagetoconvert, typeof(byte[])));
		fsPhoto.Close();
		System.IO.File.Delete(AppDomain.CurrentDomain.BaseDirectory + "\\BarCode.png");
		return binaryfile;
	}

#endregion


	override protected void OnInit(EventArgs e)
	{
//INSTANT C# NOTE: Converted event handler wireups:
		this.Load += Page_Load;
		this.Unload += Page_Unload;
		BtnGeneratePdf.Click += BtnGeneratePdf_Click;
		btnGo.Click += btnGo_Click;
		btnCancel.Click += btnCancel_Click;
		btnExit.Click += btnExit_Click;
		ddlActivityType.SelectedIndexChanged += ddlActivityType_SelectedIndexChanged;
		ddlPeriod.SelectedIndexChanged += ddlPeriod_SelectedIndexChanged;
		gvwReportType.RowCommand += gvwReportType_RowCommand;
		gvwReportType.RowCreated += gvwReportType_RowCreated;
		gvwReportType.RowDataBound += gvwReportType_RowDataBound;
		gvwActivity.RowCommand += gvwActivity_RowCommand;
		gvwActivity.RowCreated += gvwActivity_RowCreated;
		gvwActivity.RowDataBound += gvwActivity_RowDataBound;
		RBLProjecttype.SelectedIndexChanged += RBLProjecttype_SelectedIndexChanged;
		RBLselect.SelectedIndexChanged += RBLProjecttype_SelectedIndexChanged;
		btnRearrangeActivity.Click += btnRearrangeActivity_Click;
		btnRearrangeReport.Click += btnRearrangeReport_Click;

		base.OnInit(e);
	}
}
